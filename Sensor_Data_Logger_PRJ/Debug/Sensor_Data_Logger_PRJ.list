
Sensor_Data_Logger_PRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a744  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800a930  0800a930  0001a930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae34  0800ae34  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae34  0800ae34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001e0  0800b01c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800b01c  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001221b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003000  00000000  00000000  00032424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a23  00000000  00000000  00037890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148da  00000000  00000000  0003c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2acb  00000000  00000000  00050b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c8  00000000  00000000  000f36a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a914 	.word	0x0800a914

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800a914 	.word	0x0800a914

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <lcd_strobe>:
static void lcd_wait_until_not_busy();
static void lcd_strobe(void);
static void lcd_write_nibble(uint8_t c);

static void lcd_strobe(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	// E = ENABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <lcd_strobe+0x20>)
 8000cbc:	f001 f970 	bl	8001fa0 <HAL_GPIO_WritePin>

	// E = DISABLED;
	HAL_GPIO_WritePin(E_PORT, E_PIN, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <lcd_strobe+0x20>)
 8000cc8:	f001 f96a 	bl	8001fa0 <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40011400 	.word	0x40011400

08000cd4 <lcd_wait_until_not_busy>:

static void lcd_wait_until_not_busy()
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
	volatile uint32_t i;

	for (i = 0UL; i < 5000UL; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e003      	b.n	8000ce8 <lcd_wait_until_not_busy+0x14>
	{
		__asm__("NOP");
 8000ce0:	bf00      	nop
	for (i = 0UL; i < 5000UL; i++)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d9f6      	bls.n	8000ce0 <lcd_wait_until_not_busy+0xc>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <lcd_clear>:
void lcd_clear(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  lcd_write_command(0x01U);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 f86e 	bl	8000de4 <lcd_write_command>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <lcd_puts>:

void lcd_puts(uint8_t row, uint8_t column, const char *s)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	603a      	str	r2, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	71bb      	strb	r3, [r7, #6]
	size_t i;
	size_t length = strlen(s);
 8000d1c:	6838      	ldr	r0, [r7, #0]
 8000d1e:	f7ff fa83 	bl	8000228 <strlen>
 8000d22:	60b8      	str	r0, [r7, #8]

	if (row == 0U)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <lcd_puts+0x2c>
	{
		lcd_write_command(0x80U + column);
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	3b80      	subs	r3, #128	; 0x80
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f857 	bl	8000de4 <lcd_write_command>
 8000d36:	e005      	b.n	8000d44 <lcd_puts+0x38>
	}
	else
	{
        lcd_write_command(0xc0U + column);
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	3b40      	subs	r3, #64	; 0x40
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f850 	bl	8000de4 <lcd_write_command>
    }

    for (i = 0U; i < length; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e009      	b.n	8000d5e <lcd_puts+0x52>
    {
        lcd_write_data(s[i]);
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f868 	bl	8000e28 <lcd_write_data>
    for (i = 0U; i < length; i++)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3f1      	bcc.n	8000d4a <lcd_puts+0x3e>
    }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, (GPIO_PinState)(c & 0x01U));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <lcd_write_nibble+0x70>)
 8000d8a:	f001 f909 	bl	8001fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, (GPIO_PinState)((c >> 1) & 0x01U));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <lcd_write_nibble+0x70>)
 8000da2:	f001 f8fd 	bl	8001fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, (GPIO_PinState)((c >> 2) & 0x01U));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <lcd_write_nibble+0x70>)
 8000dba:	f001 f8f1 	bl	8001fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PORT, D7_PIN, (GPIO_PinState)((c >> 3) & 0x01U));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <lcd_write_nibble+0x70>)
 8000dd2:	f001 f8e5 	bl	8001fa0 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40011400 	.word	0x40011400

08000de4 <lcd_write_command>:

static void lcd_write_command(uint8_t c)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	lcd_wait_until_not_busy();
 8000dee:	f7ff ff71 	bl	8000cd4 <lcd_wait_until_not_busy>

	// RS = COMMAND
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <lcd_write_command+0x40>)
 8000dfa:	f001 f8d1 	bl	8001fa0 <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ffb3 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000e0a:	f7ff ff51 	bl	8000cb0 <lcd_strobe>
	lcd_write_nibble(c);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffad 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000e16:	f7ff ff4b 	bl	8000cb0 <lcd_strobe>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40011400 	.word	0x40011400

08000e28 <lcd_write_data>:

static void lcd_write_data(uint8_t c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	// wait until previous operation is finished
	lcd_wait_until_not_busy();
 8000e32:	f7ff ff4f 	bl	8000cd4 <lcd_wait_until_not_busy>

	// RS = DATA
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <lcd_write_data+0x40>)
 8000e3e:	f001 f8af 	bl	8001fa0 <HAL_GPIO_WritePin>

	lcd_write_nibble(c >> 4);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff91 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000e4e:	f7ff ff2f 	bl	8000cb0 <lcd_strobe>
	lcd_write_nibble(c);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff8b 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000e5a:	f7ff ff29 	bl	8000cb0 <lcd_strobe>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40011400 	.word	0x40011400

08000e6c <lcd_init>:
		lcd_write_data(bytes[row]);
	}
}

void lcd_init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	// pins E_PORT:E_PIN, RS_PORT:RS_PIN and RW_PORT:RW_PIN all default to zero on reset so don't need setting here

    HAL_Delay(15U);
 8000e70:	200f      	movs	r0, #15
 8000e72:	f000 fdfd 	bl	8001a70 <HAL_Delay>
    lcd_write_nibble(0x03U);
 8000e76:	2003      	movs	r0, #3
 8000e78:	f7ff ff7a 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000e7c:	f7ff ff18 	bl	8000cb0 <lcd_strobe>
    HAL_Delay(5U);
 8000e80:	2005      	movs	r0, #5
 8000e82:	f000 fdf5 	bl	8001a70 <HAL_Delay>
    lcd_strobe();
 8000e86:	f7ff ff13 	bl	8000cb0 <lcd_strobe>
    HAL_Delay(200U);
 8000e8a:	20c8      	movs	r0, #200	; 0xc8
 8000e8c:	f000 fdf0 	bl	8001a70 <HAL_Delay>
    lcd_strobe();
 8000e90:	f7ff ff0e 	bl	8000cb0 <lcd_strobe>
    HAL_Delay(1U);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 fdeb 	bl	8001a70 <HAL_Delay>
	lcd_write_nibble(0x02U);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f7ff ff68 	bl	8000d70 <lcd_write_nibble>
    lcd_strobe();
 8000ea0:	f7ff ff06 	bl	8000cb0 <lcd_strobe>
	lcd_write_command(0x28U);
 8000ea4:	2028      	movs	r0, #40	; 0x28
 8000ea6:	f7ff ff9d 	bl	8000de4 <lcd_write_command>
	HAL_Delay(40U);
 8000eaa:	2028      	movs	r0, #40	; 0x28
 8000eac:	f000 fde0 	bl	8001a70 <HAL_Delay>
    lcd_write_command(0x06U);
 8000eb0:	2006      	movs	r0, #6
 8000eb2:	f7ff ff97 	bl	8000de4 <lcd_write_command>
    lcd_write_command(0x0cU);
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f7ff ff94 	bl	8000de4 <lcd_write_command>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fda2 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f81e 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f9d4 	bl	8001278 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ed0:	f000 f87a 	bl	8000fc8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000ed4:	f000 f8c2 	bl	800105c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000ed8:	f000 f8e0 	bl	800109c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 f9a2 	bl	8001224 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000ee0:	f004 fede 	bl	8005ca0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000ee4:	f7ff ffc2 	bl	8000e6c <lcd_init>
  lcd_clear();
 8000ee8:	f7ff ff09 	bl	8000cfe <lcd_clear>
  lcd_puts(0U, 0U, "LCD Project Test");
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <main+0x44>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ff0b 	bl	8000d0c <lcd_puts>
  HAL_Delay (1000);
 8000ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efa:	f000 fdb9 	bl	8001a70 <HAL_Delay>
  lcd_clear();
 8000efe:	f7ff fefe 	bl	8000cfe <lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <main+0x42>
 8000f04:	0800a930 	.word	0x0800a930

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b096      	sub	sp, #88	; 0x58
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f12:	2228      	movs	r2, #40	; 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 f8c4 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 f860 	bl	800202c <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fa45 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 facc 	bl	8002530 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f9e:	f000 fa2f 	bl	8001400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fc86 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fba:	f000 fa21 	bl	8001400 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3758      	adds	r7, #88	; 0x58
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	801a      	strh	r2, [r3, #0]
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_RTC_Init+0x8c>)
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <MX_RTC_Init+0x90>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_RTC_Init+0x8c>)
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fea:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_RTC_Init+0x8c>)
 8000fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <MX_RTC_Init+0x8c>)
 8000ff6:	f001 fdfd 	bl	8002bf4 <HAL_RTC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001000:	f000 f9fe 	bl	8001400 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001004:	2312      	movs	r3, #18
 8001006:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x14;
 8001008:	2314      	movs	r3, #20
 800100a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x17;
 800100c:	2317      	movs	r3, #23
 800100e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <MX_RTC_Init+0x8c>)
 8001018:	f001 fe82 	bl	8002d20 <HAL_RTC_SetTime>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001022:	f000 f9ed 	bl	8001400 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001026:	2301      	movs	r3, #1
 8001028:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800102a:	2301      	movs	r3, #1
 800102c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800102e:	2301      	movs	r3, #1
 8001030:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 8001032:	2322      	movs	r3, #34	; 0x22
 8001034:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_RTC_Init+0x8c>)
 800103e:	f001 ff07 	bl	8002e50 <HAL_RTC_SetDate>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001048:	f000 f9da 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200001fc 	.word	0x200001fc
 8001058:	40002800 	.word	0x40002800

0800105c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <MX_SDIO_SD_Init+0x3c>)
 8001064:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <MX_SDIO_SD_Init+0x38>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000210 	.word	0x20000210
 8001098:	40018000 	.word	0x40018000

0800109c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	; 0x58
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 ffe5 	bl	80060a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <MX_TIM1_Init+0x180>)
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <MX_TIM1_Init+0x184>)
 80010de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1107-1;
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <MX_TIM1_Init+0x180>)
 80010e2:	f240 4252 	movw	r2, #1106	; 0x452
 80010e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b4c      	ldr	r3, [pc, #304]	; (800121c <MX_TIM1_Init+0x180>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 80010ee:	4b4b      	ldr	r3, [pc, #300]	; (800121c <MX_TIM1_Init+0x180>)
 80010f0:	22fe      	movs	r2, #254	; 0xfe
 80010f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <MX_TIM1_Init+0x180>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fa:	4b48      	ldr	r3, [pc, #288]	; (800121c <MX_TIM1_Init+0x180>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b46      	ldr	r3, [pc, #280]	; (800121c <MX_TIM1_Init+0x180>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001106:	4845      	ldr	r0, [pc, #276]	; (800121c <MX_TIM1_Init+0x180>)
 8001108:	f003 f888 	bl	800421c <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001112:	f000 f975 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001120:	4619      	mov	r1, r3
 8001122:	483e      	ldr	r0, [pc, #248]	; (800121c <MX_TIM1_Init+0x180>)
 8001124:	f003 fb48 	bl	80047b8 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800112e:	f000 f967 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001132:	483a      	ldr	r0, [pc, #232]	; (800121c <MX_TIM1_Init+0x180>)
 8001134:	f003 f922 	bl	800437c <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800113e:	f000 f95f 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800114a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800114e:	4619      	mov	r1, r3
 8001150:	4832      	ldr	r0, [pc, #200]	; (800121c <MX_TIM1_Init+0x180>)
 8001152:	f003 fed5 	bl	8004f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800115c:	f000 f950 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	4825      	ldr	r0, [pc, #148]	; (800121c <MX_TIM1_Init+0x180>)
 8001186:	f003 fa59 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001190:	f000 f936 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	2204      	movs	r2, #4
 800119a:	4619      	mov	r1, r3
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <MX_TIM1_Init+0x180>)
 800119e:	f003 fa4d 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80011a8:	f000 f92a 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	2208      	movs	r2, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	4819      	ldr	r0, [pc, #100]	; (800121c <MX_TIM1_Init+0x180>)
 80011b6:	f003 fa41 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011c0:	f000 f91e 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	220c      	movs	r2, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_TIM1_Init+0x180>)
 80011ce:	f003 fa35 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80011d8:	f000 f912 	bl	8001400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM1_Init+0x180>)
 8001200:	f003 feea 	bl	8004fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800120a:	f000 f8f9 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM1_Init+0x180>)
 8001210:	f000 f9ba 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3758      	adds	r7, #88	; 0x58
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000294 	.word	0x20000294
 8001220:	40012c00 	.word	0x40012c00

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART1_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800125c:	f003 ff1f 	bl	800509e <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f8cb 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200002dc 	.word	0x200002dc
 8001274:	40013800 	.word	0x40013800

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <MX_GPIO_Init+0x14c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <MX_GPIO_Init+0x14c>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <MX_GPIO_Init+0x14c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x14c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	213c      	movs	r1, #60	; 0x3c
 8001308:	482f      	ldr	r0, [pc, #188]	; (80013c8 <MX_GPIO_Init+0x150>)
 800130a:	f000 fe49 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	210d      	movs	r1, #13
 8001312:	482e      	ldr	r0, [pc, #184]	; (80013cc <MX_GPIO_Init+0x154>)
 8001314:	f000 fe44 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS_Pin|E_Pin|D4_Pin|D5_Pin
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800131e:	482c      	ldr	r0, [pc, #176]	; (80013d0 <MX_GPIO_Init+0x158>)
 8001320:	f000 fe3e 	bl	8001fa0 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF2 PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4619      	mov	r1, r3
 800133a:	4823      	ldr	r0, [pc, #140]	; (80013c8 <MX_GPIO_Init+0x150>)
 800133c:	f000 fc9c 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001340:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_GPIO_Init+0x15c>)
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_GPIO_Init+0x150>)
 8001356:	f000 fc8f 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 800135a:	230d      	movs	r3, #13
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2302      	movs	r3, #2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4619      	mov	r1, r3
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_GPIO_Init+0x154>)
 8001372:	f000 fc81 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBTN2_Pin PBTN3_Pin PBTN1_Pin */
  GPIO_InitStruct.Pin = PBTN2_Pin|PBTN3_Pin|PBTN1_Pin;
 8001376:	2338      	movs	r3, #56	; 0x38
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4619      	mov	r1, r3
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_GPIO_Init+0x160>)
 800138a:	f000 fc75 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin PD14 */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D4_Pin|D5_Pin
 800138e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001392:	61bb      	str	r3, [r7, #24]
                          |D6_Pin|D7_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4619      	mov	r1, r3
 80013a6:	480a      	ldr	r0, [pc, #40]	; (80013d0 <MX_GPIO_Init+0x158>)
 80013a8:	f000 fc66 	bl	8001c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2017      	movs	r0, #23
 80013b2:	f000 fc36 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013b6:	2017      	movs	r0, #23
 80013b8:	f000 fc4f 	bl	8001c5a <HAL_NVIC_EnableIRQ>

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011c00 	.word	0x40011c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	10110000 	.word	0x10110000
 80013d8:	40010800 	.word	0x40010800

080013dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ee:	f000 fb23 	bl	8001a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001400 	.word	0x40001400

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_MspInit+0x40>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_MspInit+0x40>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6193      	str	r3, [r2, #24]
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_MspInit+0x40>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_MspInit+0x40>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_MspInit+0x40>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_MspInit+0x40>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_RTC_MspInit+0x3c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d110      	bne.n	8001484 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001462:	f000 fdd7 	bl	8002014 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_RTC_MspInit+0x40>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_RTC_MspInit+0x40>)
 800146c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <HAL_RTC_MspInit+0x40>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RTC_MspInit+0x44>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40002800 	.word	0x40002800
 8001490:	40021000 	.word	0x40021000
 8001494:	4242043c 	.word	0x4242043c

08001498 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_SD_MspInit+0xa4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13c      	bne.n	8001532 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6153      	str	r3, [r2, #20]
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014ee:	f043 0320 	orr.w	r3, r3, #32
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_SD_MspInit+0xa8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001500:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4619      	mov	r1, r3
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <HAL_SD_MspInit+0xac>)
 8001516:	f000 fbaf 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800151a:	2304      	movs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_SD_MspInit+0xb0>)
 800152e:	f000 fba3 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40018000 	.word	0x40018000
 8001540:	40021000 	.word	0x40021000
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x34>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_TIM_MspPostInit+0x80>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d12a      	bne.n	80015fe <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_TIM_MspPostInit+0x84>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_TIM_MspPostInit+0x84>)
 80015ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_MspPostInit+0x84>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin;
 80015c0:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80015c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <HAL_TIM_MspPostInit+0x88>)
 80015d6:	f000 fb4f 	bl	8001c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_TIM_MspPostInit+0x8c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_TIM_MspPostInit+0x8c>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40011800 	.word	0x40011800
 8001614:	40010000 	.word	0x40010000

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d131      	bne.n	800169c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_UART_MspInit+0x94>)
 800167e:	f000 fafb 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0x94>)
 8001698:	f000 faee 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010800 	.word	0x40010800

080016b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016c6:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_InitTick+0xe8>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_InitTick+0xe8>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_InitTick+0xe8>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016de:	f107 0210 	add.w	r2, r7, #16
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f89b 	bl	8002824 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d103      	bne.n	8001700 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016f8:	f001 f86c 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 80016fc:	6378      	str	r0, [r7, #52]	; 0x34
 80016fe:	e004      	b.n	800170a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001700:	f001 f868 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8001704:	4603      	mov	r3, r0
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_InitTick+0xec>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	3b01      	subs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_InitTick+0xf0>)
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_InitTick+0xf4>)
 800171c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_InitTick+0xf0>)
 8001720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001724:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_InitTick+0xf0>)
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_InitTick+0xf0>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_InitTick+0xf0>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_InitTick+0xf0>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800173e:	4818      	ldr	r0, [pc, #96]	; (80017a0 <HAL_InitTick+0xf0>)
 8001740:	f002 fd6c 	bl	800421c <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800174a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800174e:	2b00      	cmp	r3, #0
 8001750:	d11b      	bne.n	800178a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <HAL_InitTick+0xf0>)
 8001754:	f002 fdb2 	bl	80042bc <HAL_TIM_Base_Start_IT>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800175e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001762:	2b00      	cmp	r3, #0
 8001764:	d111      	bne.n	800178a <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001766:	2037      	movs	r0, #55	; 0x37
 8001768:	f000 fa77 	bl	8001c5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d808      	bhi.n	8001784 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001772:	2200      	movs	r2, #0
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	2037      	movs	r0, #55	; 0x37
 8001778:	f000 fa53 	bl	8001c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_InitTick+0xf8>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e002      	b.n	800178a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800178a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800178e:	4618      	mov	r0, r3
 8001790:	3738      	adds	r7, #56	; 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	20000320 	.word	0x20000320
 80017a4:	40001400 	.word	0x40001400
 80017a8:	20000004 	.word	0x20000004

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017fe:	2040      	movs	r0, #64	; 0x40
 8001800:	f000 fbe6 	bl	8001fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001804:	2080      	movs	r0, #128	; 0x80
 8001806:	f000 fbe3 	bl	8001fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800180a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800180e:	f000 fbdf 	bl	8001fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001812:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001816:	f000 fbdb 	bl	8001fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM7_IRQHandler+0x10>)
 8001826:	f002 fe01 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000320 	.word	0x20000320

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_kill>:

int _kill(int pid, int sig)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184c:	f004 fc00 	bl	8006050 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	2216      	movs	r2, #22
 8001854:	601a      	str	r2, [r3, #0]
	return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_exit>:

void _exit (int status)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800186a:	f04f 31ff 	mov.w	r1, #4294967295
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffe7 	bl	8001842 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001874:	e7fe      	b.n	8001874 <_exit+0x12>

08001876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001888:	f3af 8000 	nop.w
 800188c:	4601      	mov	r1, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf0      	blt.n	8001888 <_read+0x12>
	}

return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e009      	b.n	80018d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf1      	blt.n	80018c2 <_write+0x12>
	}
	return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_close>:

int _close(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <_isatty>:

int _isatty(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f004 fb6a 	bl	8006050 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20010000 	.word	0x20010000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000368 	.word	0x20000368
 80019b0:	20000398 	.word	0x20000398

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	; (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e6:	f7ff ffe5 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f004 fb37 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fa67 	bl	8000ec0 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019fc:	0800ae3c 	.word	0x0800ae3c
  ldr r2, =_sbss
 8001a00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a04:	20000394 	.word	0x20000394

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f8f5 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f7ff fe44 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fcf0 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x1c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x20>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_IncTick+0x20>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000008 	.word	0x20000008
 8001a58:	2000036c 	.word	0x2000036c

08001a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_GetTick+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	2000036c 	.word	0x2000036c

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffe0 	bl	8001a5c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <__NVIC_EnableIRQ+0x34>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff4f 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff64 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ffb2 	bl	8001ba8 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff81 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff57 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b08b      	sub	sp, #44	; 0x2c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e179      	b.n	8001f80 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8168 	bne.w	8001f7a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4a96      	ldr	r2, [pc, #600]	; (8001f08 <HAL_GPIO_Init+0x290>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d05e      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a94      	ldr	r2, [pc, #592]	; (8001f08 <HAL_GPIO_Init+0x290>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d875      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cba:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <HAL_GPIO_Init+0x294>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d058      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
 8001cc0:	4a92      	ldr	r2, [pc, #584]	; (8001f0c <HAL_GPIO_Init+0x294>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d86f      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cc6:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <HAL_GPIO_Init+0x298>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d052      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
 8001ccc:	4a90      	ldr	r2, [pc, #576]	; (8001f10 <HAL_GPIO_Init+0x298>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d869      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cd2:	4a90      	ldr	r2, [pc, #576]	; (8001f14 <HAL_GPIO_Init+0x29c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04c      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
 8001cd8:	4a8e      	ldr	r2, [pc, #568]	; (8001f14 <HAL_GPIO_Init+0x29c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d863      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cde:	4a8e      	ldr	r2, [pc, #568]	; (8001f18 <HAL_GPIO_Init+0x2a0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d046      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
 8001ce4:	4a8c      	ldr	r2, [pc, #560]	; (8001f18 <HAL_GPIO_Init+0x2a0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d85d      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d82a      	bhi.n	8001d44 <HAL_GPIO_Init+0xcc>
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d859      	bhi.n	8001da6 <HAL_GPIO_Init+0x12e>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <HAL_GPIO_Init+0x80>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d73 	.word	0x08001d73
 8001cfc:	08001d4d 	.word	0x08001d4d
 8001d00:	08001d5f 	.word	0x08001d5f
 8001d04:	08001da1 	.word	0x08001da1
 8001d08:	08001da7 	.word	0x08001da7
 8001d0c:	08001da7 	.word	0x08001da7
 8001d10:	08001da7 	.word	0x08001da7
 8001d14:	08001da7 	.word	0x08001da7
 8001d18:	08001da7 	.word	0x08001da7
 8001d1c:	08001da7 	.word	0x08001da7
 8001d20:	08001da7 	.word	0x08001da7
 8001d24:	08001da7 	.word	0x08001da7
 8001d28:	08001da7 	.word	0x08001da7
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001da7 	.word	0x08001da7
 8001d34:	08001da7 	.word	0x08001da7
 8001d38:	08001da7 	.word	0x08001da7
 8001d3c:	08001d55 	.word	0x08001d55
 8001d40:	08001d69 	.word	0x08001d69
 8001d44:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d4a:	e02c      	b.n	8001da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e029      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e024      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	3308      	adds	r3, #8
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e01f      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	623b      	str	r3, [r7, #32]
          break;
 8001d70:	e01a      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e013      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	611a      	str	r2, [r3, #16]
          break;
 8001d92:	e009      	b.n	8001da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	615a      	str	r2, [r3, #20]
          break;
 8001d9e:	e003      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x130>
          break;
 8001da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2bff      	cmp	r3, #255	; 0xff
 8001dac:	d801      	bhi.n	8001db2 <HAL_GPIO_Init+0x13a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_Init+0x13e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3304      	adds	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d802      	bhi.n	8001dc4 <HAL_GPIO_Init+0x14c>
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x152>
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3b08      	subs	r3, #8
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	6a39      	ldr	r1, [r7, #32]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80c1 	beq.w	8001f7a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_GPIO_Init+0x2a8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2a8>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_GPIO_Init+0x2a8>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e10:	4a44      	ldr	r2, [pc, #272]	; (8001f24 <HAL_GPIO_Init+0x2ac>)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_GPIO_Init+0x2b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x204>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <HAL_GPIO_Init+0x2b4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x200>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <HAL_GPIO_Init+0x2b8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1fc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a39      	ldr	r2, [pc, #228]	; (8001f34 <HAL_GPIO_Init+0x2bc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1f8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a38      	ldr	r2, [pc, #224]	; (8001f38 <HAL_GPIO_Init+0x2c0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1f4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <HAL_GPIO_Init+0x2c4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1f0>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e68:	2306      	movs	r3, #6
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8e:	4925      	ldr	r1, [pc, #148]	; (8001f24 <HAL_GPIO_Init+0x2ac>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4924      	ldr	r1, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4920      	ldr	r1, [pc, #128]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	491a      	ldr	r1, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d025      	beq.n	8001f44 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4910      	ldr	r1, [pc, #64]	; (8001f40 <HAL_GPIO_Init+0x2c8>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
 8001f04:	e025      	b.n	8001f52 <HAL_GPIO_Init+0x2da>
 8001f06:	bf00      	nop
 8001f08:	10320000 	.word	0x10320000
 8001f0c:	10310000 	.word	0x10310000
 8001f10:	10220000 	.word	0x10220000
 8001f14:	10210000 	.word	0x10210000
 8001f18:	10120000 	.word	0x10120000
 8001f1c:	10110000 	.word	0x10110000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40011800 	.word	0x40011800
 8001f3c:	40011c00 	.word	0x40011c00
 8001f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4913      	ldr	r1, [pc, #76]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60cb      	str	r3, [r1, #12]
 8001f6a:	e006      	b.n	8001f7a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4909      	ldr	r1, [pc, #36]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f47f ae7e 	bne.w	8001c8c <HAL_GPIO_Init+0x14>
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	372c      	adds	r7, #44	; 0x2c
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f806 	bl	8002000 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_PWR_EnableBkUpAccess+0x14>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	420e0020 	.word	0x420e0020

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e272      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8087 	beq.w	800215a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00c      	beq.n	8002072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d112      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06c      	beq.n	8002158 <HAL_RCC_OscConfig+0x12c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d168      	bne.n	8002158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e24c      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x76>
 8002094:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e02e      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0xbc>
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020e8:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a67      	ldr	r2, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fca8 	bl	8001a5c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fca4 	bl	8001a5c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e200      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xe4>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fc94 	bl	8001a5c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fc90 	bl	8001a5c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1ec      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x10c>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1c0      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4939      	ldr	r1, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fc49 	bl	8001a5c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fc45 	bl	8001a5c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1a1      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fc28 	bl	8001a5c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fc24 	bl	8001a5c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e180      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03a      	beq.n	80022b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff fc08 	bl	8001a5c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fc04 	bl	8001a5c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e160      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 fb08 	bl	8002884 <RCC_Delay>
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fbee 	bl	8001a5c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fbea 	bl	8001a5c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e146      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	42420000 	.word	0x42420000
 80022a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e9      	bne.n	8002284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a6 	beq.w	800240a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a87      	ldr	r2, [pc, #540]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff fbab 	bl	8001a5c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7ff fba7 	bl	8001a5c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e103      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x312>
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e02d      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x334>
 8002346:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a66      	ldr	r2, [pc, #408]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e01c      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x356>
 8002368:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fb5b 	bl	8001a5c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff fb57 	bl	8001a5c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0b1      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ee      	beq.n	80023aa <HAL_RCC_OscConfig+0x37e>
 80023cc:	e014      	b.n	80023f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fb45 	bl	8001a5c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff fb41 	bl	8001a5c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e09b      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d061      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d146      	bne.n	80024b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fb15 	bl	8001a5c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fb11 	bl	8001a5c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e06d      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d108      	bne.n	8002470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4921      	ldr	r1, [pc, #132]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a19      	ldr	r1, [r3, #32]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	430b      	orrs	r3, r1
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fae5 	bl	8001a5c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff fae1 	bl	8001a5c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e03d      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x46a>
 80024b4:	e035      	b.n	8002522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff face 	bl	8001a5c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff faca 	bl	8001a5c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e026      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x498>
 80024e2:	e01e      	b.n	8002522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e019      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x500>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4965      	ldr	r1, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e073      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4936      	ldr	r1, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fa1c 	bl	8001a5c <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff fa18 	bl	8001a5c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e053      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ffe6 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	0800a964 	.word	0x0800a964
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b490      	push	{r4, r7}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800270c:	1d3c      	adds	r4, r7, #4
 800270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002714:	f240 2301 	movw	r3, #513	; 0x201
 8002718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x40>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x46>
 8002742:	e02b      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	e02b      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3328      	adds	r3, #40	; 0x28
 8002754:	443b      	add	r3, r7
 8002756:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800275a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0c5b      	lsrs	r3, r3, #17
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	3328      	adds	r3, #40	; 0x28
 8002772:	443b      	add	r3, r7
 8002774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	fb03 f202 	mul.w	r2, r3, r2
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e004      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc90      	pop	{r4, r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	0800a944 	.word	0x0800a944
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	0800a974 	.word	0x0800a974

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffde 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	0800a974 	.word	0x0800a974

08002824 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	220f      	movs	r2, #15
 8002832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_GetClockConfig+0x58>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_RCC_GetClockConfig+0x58>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_GetClockConfig+0x58>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_GetClockConfig+0x58>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0207 	and.w	r2, r3, #7
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000
 8002880:	40022000 	.word	0x40022000

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCC_Delay+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <RCC_Delay+0x38>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a0:	bf00      	nop
  }
  while (Delay --);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <RCC_Delay+0x1c>
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000000 	.word	0x20000000
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d07d      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e0:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a4b      	ldr	r2, [pc, #300]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	61d3      	str	r3, [r2, #28]
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d118      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002920:	f7ff f89c 	bl	8001a5c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	e008      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7ff f898 	bl	8001a5c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e06d      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002946:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02e      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d027      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800296e:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800297a:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d014      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7ff f867 	bl	8001a5c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7ff f863 	bl	8001a5c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e036      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ee      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4917      	ldr	r1, [pc, #92]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	490b      	ldr	r1, [pc, #44]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420440 	.word	0x42420440

08002a2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b08d      	sub	sp, #52	; 0x34
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002a36:	f107 040c 	add.w	r4, r7, #12
 8002a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a40:	f240 2301 	movw	r3, #513	; 0x201
 8002a44:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f200 80b4 	bhi.w	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002b4b 	.word	0x08002b4b
 8002a70:	08002bb1 	.word	0x08002bb1
 8002a74:	08002bcd 	.word	0x08002bcd
 8002a78:	08002b3b 	.word	0x08002b3b
 8002a7c:	08002bcd 	.word	0x08002bcd
 8002a80:	08002bcd 	.word	0x08002bcd
 8002a84:	08002bcd 	.word	0x08002bcd
 8002a88:	08002b43 	.word	0x08002b43
 8002a8c:	08002bcd 	.word	0x08002bcd
 8002a90:	08002bcd 	.word	0x08002bcd
 8002a94:	08002bcd 	.word	0x08002bcd
 8002a98:	08002bcd 	.word	0x08002bcd
 8002a9c:	08002bcd 	.word	0x08002bcd
 8002aa0:	08002bcd 	.word	0x08002bcd
 8002aa4:	08002bcd 	.word	0x08002bcd
 8002aa8:	08002aad 	.word	0x08002aad
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002aac:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8088 	beq.w	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	0c9b      	lsrs	r3, r3, #18
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	3330      	adds	r3, #48	; 0x30
 8002aca:	443b      	add	r3, r7
 8002acc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ad0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c5b      	lsrs	r3, r3, #17
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	3330      	adds	r3, #48	; 0x30
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0a:	e004      	b.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	4a37      	ldr	r2, [pc, #220]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b22:	d102      	bne.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002b28:	e052      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b38:	e04a      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b3a:	f7ff fde3 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002b3e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b40:	e049      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b42:	f7ff fddf 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002b46:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b48:	e045      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5a:	d108      	bne.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6c:	e01f      	b.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d109      	bne.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002b86:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	e00f      	b.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002ba6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002bac:	e012      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002bae:	e011      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bb0:	f7ff fe24 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0b9b      	lsrs	r3, r3, #14
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bca:	e004      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002bcc:	bf00      	nop
 8002bce:	e002      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002bd4:	bf00      	nop
    }
  }
  return (frequency);
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3734      	adds	r7, #52	; 0x34
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	0800a954 	.word	0x0800a954
 8002be4:	40021000 	.word	0x40021000
 8002be8:	007a1200 	.word	0x007a1200
 8002bec:	003d0900 	.word	0x003d0900
 8002bf0:	aaaaaaab 	.word	0xaaaaaaab

08002bf4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e084      	b.n	8002d14 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7c5b      	ldrb	r3, [r3, #17]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fc18 	bl	8001450 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9c8 	bl	8002fbc <HAL_RTC_WaitForSynchro>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e06b      	b.n	8002d14 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa81 	bl	8003144 <RTC_EnterInitMode>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e060      	b.n	8002d14 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0207 	bic.w	r2, r2, #7
 8002c60:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_RTC_Init+0x128>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_RTC_Init+0x128>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_RTC_Init+0x128>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4926      	ldr	r1, [pc, #152]	; (8002d1c <HAL_RTC_Init+0x128>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d003      	beq.n	8002c9a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e00e      	b.n	8002cb8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7ff fec6 	bl	8002a2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ca0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2204      	movs	r2, #4
 8002cac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e030      	b.n	8002d14 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 010f 	bic.w	r1, r3, #15
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0c1a      	lsrs	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	b291      	uxth	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa55 	bl	8003194 <RTC_ExitInitMode>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00c      	b.n	8002d14 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40006c00 	.word	0x40006c00

08002d20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_RTC_SetTime+0x20>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e080      	b.n	8002e46 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	7c1b      	ldrb	r3, [r3, #16]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_RTC_SetTime+0x30>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e07a      	b.n	8002e46 <HAL_RTC_SetTime+0x126>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d113      	bne.n	8002d8a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002d6c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	4619      	mov	r1, r3
 8002d76:	460b      	mov	r3, r1
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a5b      	subs	r3, r3, r1
 8002d7c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d7e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e01e      	b.n	8002dc8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa28 	bl	80031e4 <RTC_Bcd2ToByte>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002d9c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fa1d 	bl	80031e4 <RTC_Bcd2ToByte>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002db6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	789b      	ldrb	r3, [r3, #2]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa11 	bl	80031e4 <RTC_Bcd2ToByte>
 8002dc2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002dc4:	4423      	add	r3, r4
 8002dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dc8:	6979      	ldr	r1, [r7, #20]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f953 	bl	8003076 <RTC_WriteTimeCounter>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e02f      	b.n	8002e46 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0205 	bic.w	r2, r2, #5
 8002df4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f964 	bl	80030c4 <RTC_ReadAlarmCounter>
 8002dfc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d018      	beq.n	8002e38 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d214      	bcs.n	8002e38 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002e14:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e18:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e1a:	6939      	ldr	r1, [r7, #16]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f96a 	bl	80030f6 <RTC_WriteAlarmCounter>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e006      	b.n	8002e46 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}
	...

08002e50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RTC_SetDate+0x24>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e097      	b.n	8002fa8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	7c1b      	ldrb	r3, [r3, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RTC_SetDate+0x34>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e091      	b.n	8002fa8 <HAL_RTC_SetDate+0x158>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	78da      	ldrb	r2, [r3, #3]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	785a      	ldrb	r2, [r3, #1]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	789a      	ldrb	r2, [r3, #2]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	739a      	strb	r2, [r3, #14]
 8002eae:	e01a      	b.n	8002ee6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f995 	bl	80031e4 <RTC_Bcd2ToByte>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f98c 	bl	80031e4 <RTC_Bcd2ToByte>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	789b      	ldrb	r3, [r3, #2]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f983 	bl	80031e4 <RTC_Bcd2ToByte>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	7bdb      	ldrb	r3, [r3, #15]
 8002eea:	4618      	mov	r0, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	7b59      	ldrb	r1, [r3, #13]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	7b9b      	ldrb	r3, [r3, #14]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f000 f993 	bl	8003220 <RTC_WeekDayNum>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	7b1a      	ldrb	r2, [r3, #12]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f883 	bl	8003016 <RTC_ReadTimeCounter>
 8002f10:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_RTC_SetDate+0x160>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0adb      	lsrs	r3, r3, #11
 8002f1c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b18      	cmp	r3, #24
 8002f22:	d93a      	bls.n	8002f9a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_RTC_SetDate+0x164>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_RTC_SetDate+0x168>)
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f89a 	bl	8003076 <RTC_WriteTimeCounter>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e027      	b.n	8002fa8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f8b3 	bl	80030c4 <RTC_ReadAlarmCounter>
 8002f5e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d018      	beq.n	8002f9a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d214      	bcs.n	8002f9a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002f76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f7a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8b9 	bl	80030f6 <RTC_WriteAlarmCounter>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e006      	b.n	8002fa8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	91a2b3c5 	.word	0x91a2b3c5
 8002fb4:	aaaaaaab 	.word	0xaaaaaaab
 8002fb8:	00015180 	.word	0x00015180

08002fbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e01d      	b.n	800300e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0208 	bic.w	r2, r2, #8
 8002fe0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002fe2:	f7fe fd3b 	bl	8001a5c <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002fe8:	e009      	b.n	8002ffe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002fea:	f7fe fd37 	bl	8001a5c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff8:	d901      	bls.n	8002ffe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e007      	b.n	800300e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	827b      	strh	r3, [r7, #18]
 8003022:	2300      	movs	r3, #0
 8003024:	823b      	strh	r3, [r7, #16]
 8003026:	2300      	movs	r3, #0
 8003028:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003046:	8a7a      	ldrh	r2, [r7, #18]
 8003048:	8a3b      	ldrh	r3, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d008      	beq.n	8003060 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e004      	b.n	800306a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003060:	8a7b      	ldrh	r3, [r7, #18]
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800306a:	697b      	ldr	r3, [r7, #20]
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f85d 	bl	8003144 <RTC_EnterInitMode>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	e011      	b.n	80030ba <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	0c12      	lsrs	r2, r2, #16
 800309e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b292      	uxth	r2, r2
 80030a8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f872 	bl	8003194 <RTC_ExitInitMode>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	81fb      	strh	r3, [r7, #14]
 80030d0:	2300      	movs	r3, #0
 80030d2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	041a      	lsls	r2, r3, #16
 80030e8:	89bb      	ldrh	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f81d 	bl	8003144 <RTC_EnterInitMode>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e011      	b.n	800313a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	0c12      	lsrs	r2, r2, #16
 800311e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b292      	uxth	r2, r2
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f832 	bl	8003194 <RTC_ExitInitMode>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003150:	f7fe fc84 	bl	8001a5c <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003156:	e009      	b.n	800316c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003158:	f7fe fc80 	bl	8001a5c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003166:	d901      	bls.n	800316c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e00f      	b.n	800318c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0210 	orr.w	r2, r2, #16
 8003188:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0210 	bic.w	r2, r2, #16
 80031ae:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80031b0:	f7fe fc54 	bl	8001a5c <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031b6:	e009      	b.n	80031cc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80031b8:	f7fe fc50 	bl	8001a5c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c6:	d901      	bls.n	80031cc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e007      	b.n	80031dc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4413      	add	r3, r2
 8003212:	b2db      	uxtb	r3, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	4613      	mov	r3, r2
 800322e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800323e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d82d      	bhi.n	80032a2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <RTC_WeekDayNum+0xe4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	085a      	lsrs	r2, r3, #1
 800325a:	78bb      	ldrb	r3, [r7, #2]
 800325c:	441a      	add	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	441a      	add	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3b01      	subs	r3, #1
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3b01      	subs	r3, #1
 800326e:	4926      	ldr	r1, [pc, #152]	; (8003308 <RTC_WeekDayNum+0xe8>)
 8003270:	fba1 1303 	umull	r1, r3, r1, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	1ad2      	subs	r2, r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	3b01      	subs	r3, #1
 800327c:	4922      	ldr	r1, [pc, #136]	; (8003308 <RTC_WeekDayNum+0xe8>)
 800327e:	fba1 1303 	umull	r1, r3, r1, r3
 8003282:	09db      	lsrs	r3, r3, #7
 8003284:	4413      	add	r3, r2
 8003286:	1d1a      	adds	r2, r3, #4
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <RTC_WeekDayNum+0xec>)
 800328a:	fba3 1302 	umull	r1, r3, r3, r2
 800328e:	1ad1      	subs	r1, r2, r3
 8003290:	0849      	lsrs	r1, r1, #1
 8003292:	440b      	add	r3, r1
 8003294:	0899      	lsrs	r1, r3, #2
 8003296:	460b      	mov	r3, r1
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	1a5b      	subs	r3, r3, r1
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e029      	b.n	80032f6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <RTC_WeekDayNum+0xe4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	085a      	lsrs	r2, r3, #1
 80032b6:	78bb      	ldrb	r3, [r7, #2]
 80032b8:	441a      	add	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	441a      	add	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4910      	ldr	r1, [pc, #64]	; (8003308 <RTC_WeekDayNum+0xe8>)
 80032c8:	fba1 1303 	umull	r1, r3, r1, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	490d      	ldr	r1, [pc, #52]	; (8003308 <RTC_WeekDayNum+0xe8>)
 80032d4:	fba1 1303 	umull	r1, r3, r1, r3
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	4413      	add	r3, r2
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <RTC_WeekDayNum+0xec>)
 80032e0:	fba3 1302 	umull	r1, r3, r3, r2
 80032e4:	1ad1      	subs	r1, r2, r3
 80032e6:	0849      	lsrs	r1, r1, #1
 80032e8:	440b      	add	r3, r1
 80032ea:	0899      	lsrs	r1, r3, #2
 80032ec:	460b      	mov	r3, r1
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	b2db      	uxtb	r3, r3
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	38e38e39 	.word	0x38e38e39
 8003308:	51eb851f 	.word	0x51eb851f
 800330c:	24924925 	.word	0x24924925

08003310 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e022      	b.n	8003368 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fe f8af 	bl	8001498 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f814 	bl	8003370 <HAL_SD_InitCard>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00a      	b.n	8003368 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b08e      	sub	sp, #56	; 0x38
 8003374:	af04      	add	r7, sp, #16
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800338c:	2376      	movs	r3, #118	; 0x76
 800338e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681d      	ldr	r5, [r3, #0]
 8003394:	466c      	mov	r4, sp
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800339e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a8:	4628      	mov	r0, r5
 80033aa:	f001 ff53 	bl	8005254 <SDIO_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80033b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e04c      	b.n	800345a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_SD_InitCard+0xf4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 ff88 	bl	80052e0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_SD_InitCard+0xf4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fe6a 	bl	80040b0 <SD_PowerON>
 80033dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e02e      	b.n	800345a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fd88 	bl	8003f12 <SD_InitCard>
 8003402:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01b      	b.n	800345a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800342a:	4618      	mov	r0, r3
 800342c:	f001 ffe6 	bl	80053fc <SDMMC_CmdBlockLength>
 8003430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00f      	beq.n	8003458 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_SD_InitCard+0xf8>)
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bdb0      	pop	{r4, r5, r7, pc}
 8003462:	bf00      	nop
 8003464:	423000a0 	.word	0x423000a0
 8003468:	004005ff 	.word	0x004005ff

0800346c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b092      	sub	sp, #72	; 0x48
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7fe faef 	bl	8001a5c <HAL_GetTick>
 800347e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1bd      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 81b0 	bne.w	800380c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80034b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	441a      	add	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d907      	bls.n	80034d0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e1a4      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2203      	movs	r2, #3
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	025b      	lsls	r3, r3, #9
 80034f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034fa:	2390      	movs	r3, #144	; 0x90
 80034fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80034fe:	2302      	movs	r3, #2
 8003500:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003506:	2301      	movs	r3, #1
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f107 0214 	add.w	r2, r7, #20
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f001 ff46 	bl	80053a6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d90a      	bls.n	8003536 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2202      	movs	r2, #2
 8003524:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f001 ffa9 	bl	8005484 <SDMMC_CmdReadMultiBlock>
 8003532:	6478      	str	r0, [r7, #68]	; 0x44
 8003534:	e009      	b.n	800354a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003542:	4618      	mov	r0, r3
 8003544:	f001 ff7c 	bl	8005440 <SDMMC_CmdReadSingleBlock>
 8003548:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800354a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e151      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800357a:	e061      	b.n	8003640 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d03c      	beq.n	8003604 <HAL_SD_ReadBlocks+0x198>
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d039      	beq.n	8003604 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
 8003594:	e033      	b.n	80035fe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fe84 	bl	80052a8 <SDIO_ReadFIFO>
 80035a0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	3301      	adds	r3, #1
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	3b01      	subs	r3, #1
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	3301      	adds	r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	3b01      	subs	r3, #1
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	3301      	adds	r3, #1
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	3b01      	subs	r3, #1
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	0e1b      	lsrs	r3, r3, #24
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	3301      	adds	r3, #1
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f4:	3b01      	subs	r3, #1
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80035f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fa:	3301      	adds	r3, #1
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003600:	2b07      	cmp	r3, #7
 8003602:	d9c8      	bls.n	8003596 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003604:	f7fe fa2a 	bl	8001a5c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003610:	429a      	cmp	r2, r3
 8003612:	d902      	bls.n	800361a <HAL_SD_ReadBlocks+0x1ae>
 8003614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a48      	ldr	r2, [pc, #288]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0ec      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003646:	f240 332a 	movw	r3, #810	; 0x32a
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d095      	beq.n	800357c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d022      	beq.n	80036a4 <HAL_SD_ReadBlocks+0x238>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d91f      	bls.n	80036a4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	2b03      	cmp	r3, #3
 800366a:	d01b      	beq.n	80036a4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f001 ff6d 	bl	8005550 <SDMMC_CmdStopTransfer>
 8003676:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ba      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	f043 0208 	orr.w	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0a0      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f043 0202 	orr.w	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e086      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <HAL_SD_ReadBlocks+0x2d4>)
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e06c      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
 8003740:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fdad 	bl	80052a8 <SDIO_ReadFIFO>
 800374e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	b2da      	uxtb	r2, r3
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	3301      	adds	r3, #1
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	3b01      	subs	r3, #1
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b2da      	uxtb	r2, r3
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003770:	3301      	adds	r3, #1
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003776:	3b01      	subs	r3, #1
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	b2da      	uxtb	r2, r3
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003786:	3301      	adds	r3, #1
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	3b01      	subs	r3, #1
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	b2da      	uxtb	r2, r3
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	3301      	adds	r3, #1
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	3b01      	subs	r3, #1
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80037a6:	f7fe f959 	bl	8001a5c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d902      	bls.n	80037bc <HAL_SD_ReadBlocks+0x350>
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d112      	bne.n	80037e2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_SD_ReadBlocks+0x3b8>)
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e01b      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SD_ReadBlocks+0x38a>
 80037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1a6      	bne.n	8003744 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e006      	b.n	800381a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3748      	adds	r7, #72	; 0x48
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	004005ff 	.word	0x004005ff

08003828 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b092      	sub	sp, #72	; 0x48
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7fe f911 	bl	8001a5c <HAL_GetTick>
 800383a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e166      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	f040 8159 	bne.w	8003b1a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800386e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	441a      	add	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	429a      	cmp	r2, r3
 800387a:	d907      	bls.n	800388c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e14d      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d002      	beq.n	80038aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	025b      	lsls	r3, r3, #9
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80038b6:	2390      	movs	r3, #144	; 0x90
 80038b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038be:	2300      	movs	r3, #0
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f107 0218 	add.w	r2, r7, #24
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fd68 	bl	80053a6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d90a      	bls.n	80038f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fe0f 	bl	800550c <SDMMC_CmdWriteMultiBlock>
 80038ee:	6478      	str	r0, [r7, #68]	; 0x44
 80038f0:	e009      	b.n	8003906 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2210      	movs	r2, #16
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 fde2 	bl	80054c8 <SDMMC_CmdWriteSingleBlock>
 8003904:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a87      	ldr	r2, [pc, #540]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0fa      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003936:	e065      	b.n	8003a04 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d040      	beq.n	80039c8 <HAL_SD_WriteBlocks+0x1a0>
 8003946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d03d      	beq.n	80039c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800394c:	2300      	movs	r3, #0
 800394e:	643b      	str	r3, [r7, #64]	; 0x40
 8003950:	e037      	b.n	80039c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	3301      	adds	r3, #1
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	3b01      	subs	r3, #1
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	3301      	adds	r3, #1
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003978:	3b01      	subs	r3, #1
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	041a      	lsls	r2, r3, #16
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	3301      	adds	r3, #1
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	3b01      	subs	r3, #1
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	061a      	lsls	r2, r3, #24
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	3301      	adds	r3, #1
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a8:	3b01      	subs	r3, #1
 80039aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f107 0214 	add.w	r2, r7, #20
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 fc82 	bl	80052c0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80039bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039be:	3301      	adds	r3, #1
 80039c0:	643b      	str	r3, [r7, #64]	; 0x40
 80039c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	d9c4      	bls.n	8003952 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039c8:	f7fe f848 	bl	8001a5c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d902      	bls.n	80039de <HAL_SD_WriteBlocks+0x1b6>
 80039d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d112      	bne.n	8003a04 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a53      	ldr	r2, [pc, #332]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e091      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	f240 331a 	movw	r3, #794	; 0x31a
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d091      	beq.n	8003938 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d022      	beq.n	8003a68 <HAL_SD_WriteBlocks+0x240>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d91f      	bls.n	8003a68 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d01b      	beq.n	8003a68 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fd8b 	bl	8005550 <SDMMC_CmdStopTransfer>
 8003a3a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e05f      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2d      	ldr	r2, [pc, #180]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f043 0208 	orr.w	r2, r3, #8
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e045      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e02b      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <HAL_SD_WriteBlocks+0x308>)
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e011      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e006      	b.n	8003b28 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3748      	adds	r7, #72	; 0x48
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	004005ff 	.word	0x004005ff

08003b34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	0f9b      	lsrs	r3, r3, #30
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4e:	0e9b      	lsrs	r3, r3, #26
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb2:	0bdb      	lsrs	r3, r3, #15
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc4:	0b9b      	lsrs	r3, r3, #14
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd6:	0b5b      	lsrs	r3, r3, #13
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be8:	0b1b      	lsrs	r3, r3, #12
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d163      	bne.n	8003ccc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c08:	009a      	lsls	r2, r3, #2
 8003c0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c14:	0f92      	lsrs	r2, r2, #30
 8003c16:	431a      	orrs	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c20:	0edb      	lsrs	r3, r3, #27
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c32:	0e1b      	lsrs	r3, r3, #24
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	0d5b      	lsrs	r3, r3, #21
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c68:	0bdb      	lsrs	r3, r3, #15
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c96:	fb03 f202 	mul.w	r2, r3, r2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7a1b      	ldrb	r3, [r3, #8]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cb8:	0a52      	lsrs	r2, r2, #9
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	661a      	str	r2, [r3, #96]	; 0x60
 8003cca:	e031      	b.n	8003d30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d11d      	bne.n	8003d10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	029a      	lsls	r2, r3, #10
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
 8003d0e:	e00f      	b.n	8003d30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <HAL_SD_GetCardCSD+0x344>)
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e09d      	b.n	8003e6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	0b9b      	lsrs	r3, r3, #14
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	09db      	lsrs	r3, r3, #7
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	0fdb      	lsrs	r3, r3, #31
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	0f5b      	lsrs	r3, r3, #29
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	0e9b      	lsrs	r3, r3, #26
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	0d9b      	lsrs	r3, r3, #22
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	0d5b      	lsrs	r3, r3, #21
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	0bdb      	lsrs	r3, r3, #15
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	0b9b      	lsrs	r3, r3, #14
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	0b1b      	lsrs	r3, r3, #12
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	0a9b      	lsrs	r3, r3, #10
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	004005ff 	.word	0x004005ff

08003e7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f971 	bl	80041cc <SD_SendStatus>
 8003eea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f08:	693b      	ldr	r3, [r7, #16]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f12:	b5b0      	push	{r4, r5, r7, lr}
 8003f14:	b094      	sub	sp, #80	; 0x50
 8003f16:	af04      	add	r7, sp, #16
 8003f18:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 f9eb 	bl	80052fe <SDIO_GetPowerState>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f32:	e0b8      	b.n	80040a6 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d02f      	beq.n	8003f9c <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fbcc 	bl	80056de <SDMMC_CmdSendCID>
 8003f46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <SD_InitCard+0x40>
    {
      return errorstate;
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	e0a9      	b.n	80040a6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fa12 	bl	8005382 <SDIO_GetResponse>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2104      	movs	r1, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fa09 	bl	8005382 <SDIO_GetResponse>
 8003f70:	4602      	mov	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2108      	movs	r1, #8
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fa00 	bl	8005382 <SDIO_GetResponse>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	210c      	movs	r1, #12
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f9f7 	bl	8005382 <SDIO_GetResponse>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d00d      	beq.n	8003fc0 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f107 020e 	add.w	r2, r7, #14
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fbd2 	bl	8005758 <SDMMC_CmdSetRelAdd>
 8003fb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <SD_InitCard+0xae>
    {
      return errorstate;
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbe:	e072      	b.n	80040a6 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d036      	beq.n	8004036 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f001 fb9c 	bl	800571a <SDMMC_CmdSendCSD>
 8003fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <SD_InitCard+0xdc>
    {
      return errorstate;
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	e05b      	b.n	80040a6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f9c4 	bl	8005382 <SDIO_GetResponse>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2104      	movs	r1, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f9bb 	bl	8005382 <SDIO_GetResponse>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2108      	movs	r1, #8
 8004018:	4618      	mov	r0, r3
 800401a:	f001 f9b2 	bl	8005382 <SDIO_GetResponse>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	210c      	movs	r1, #12
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f9a9 	bl	8005382 <SDIO_GetResponse>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2104      	movs	r1, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f9a0 	bl	8005382 <SDIO_GetResponse>
 8004042:	4603      	mov	r3, r0
 8004044:	0d1a      	lsrs	r2, r3, #20
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fd6f 	bl	8003b34 <HAL_SD_GetCardCSD>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800405c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004060:	e021      	b.n	80040a6 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	2200      	movs	r2, #0
 800406e:	461c      	mov	r4, r3
 8004070:	4615      	mov	r5, r2
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	4608      	mov	r0, r1
 8004078:	f001 fa8c 	bl	8005594 <SDMMC_CmdSelDesel>
 800407c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_InitCard+0x176>
  {
    return errorstate;
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	e00e      	b.n	80040a6 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681d      	ldr	r5, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	466c      	mov	r4, sp
 8004090:	f103 0210 	add.w	r2, r3, #16
 8004094:	ca07      	ldmia	r2, {r0, r1, r2}
 8004096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800409a:	3304      	adds	r3, #4
 800409c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800409e:	4628      	mov	r0, r5
 80040a0:	f001 f8d8 	bl	8005254 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3740      	adds	r7, #64	; 0x40
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa86 	bl	80055da <SDMMC_CmdGoIdleState>
 80040ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SD_PowerON+0x2a>
  {
    return errorstate;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	e072      	b.n	80041c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fa99 	bl	8005616 <SDMMC_CmdOperCond>
 80040e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fa6f 	bl	80055da <SDMMC_CmdGoIdleState>
 80040fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	e05b      	b.n	80041c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	2b01      	cmp	r3, #1
 8004114:	d137      	bne.n	8004186 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f001 fa99 	bl	8005654 <SDMMC_CmdAppCommand>
 8004122:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02d      	beq.n	8004186 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800412a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800412e:	e047      	b.n	80041c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fa8c 	bl	8005654 <SDMMC_CmdAppCommand>
 800413c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <SD_PowerON+0x98>
    {
      return errorstate;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	e03b      	b.n	80041c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	491e      	ldr	r1, [pc, #120]	; (80041c8 <SD_PowerON+0x118>)
 800414e:	4618      	mov	r0, r3
 8004150:	f001 faa2 	bl	8005698 <SDMMC_CmdAppOperCommand>
 8004154:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800415c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004160:	e02e      	b.n	80041c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f001 f90a 	bl	8005382 <SDIO_GetResponse>
 800416e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	0fdb      	lsrs	r3, r3, #31
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <SD_PowerON+0xcc>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <SD_PowerON+0xce>
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

    count++;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3301      	adds	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800418c:	4293      	cmp	r3, r2
 800418e:	d802      	bhi.n	8004196 <SD_PowerON+0xe6>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0cc      	beq.n	8004130 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800419c:	4293      	cmp	r3, r2
 800419e:	d902      	bls.n	80041a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a4:	e00c      	b.n	80041c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
 80041b6:	e002      	b.n	80041be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	c1100000 	.word	0xc1100000

080041cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041e0:	e018      	b.n	8004214 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f001 fad3 	bl	800579a <SDMMC_CmdSendStatus>
 80041f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SD_SendStatus+0x34>
  {
    return errorstate;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	e009      	b.n	8004214 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f8bb 	bl	8005382 <SDIO_GetResponse>
 800420c:	4602      	mov	r2, r0
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e041      	b.n	80042b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd f982 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 fb94 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e044      	b.n	800435e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <HAL_TIM_Base_Start_IT+0xac>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_TIM_Base_Start_IT+0xb0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d00e      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_TIM_Base_Start_IT+0xb4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a16      	ldr	r2, [pc, #88]	; (8004374 <HAL_TIM_Base_Start_IT+0xb8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <HAL_TIM_Base_Start_IT+0xbc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d111      	bne.n	800434c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b06      	cmp	r3, #6
 8004338:	d010      	beq.n	800435c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e007      	b.n	800435c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00

0800437c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e041      	b.n	8004412 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f839 	bl	800441a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fae4 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa6f 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa62 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa71 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa45 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa38 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa47 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa1b 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa0e 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa1d 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9f1 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9e4 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9f3 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc ff16 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fd58 	bl	800508c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9b7 	bl	8004976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fd23 	bl	800507a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004652:	2302      	movs	r3, #2
 8004654:	e0ac      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	f200 809f 	bhi.w	80047a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080047a5 	.word	0x080047a5
 8004674:	080047a5 	.word	0x080047a5
 8004678:	080047a5 	.word	0x080047a5
 800467c:	080046e1 	.word	0x080046e1
 8004680:	080047a5 	.word	0x080047a5
 8004684:	080047a5 	.word	0x080047a5
 8004688:	080047a5 	.word	0x080047a5
 800468c:	08004723 	.word	0x08004723
 8004690:	080047a5 	.word	0x080047a5
 8004694:	080047a5 	.word	0x080047a5
 8004698:	080047a5 	.word	0x080047a5
 800469c:	08004763 	.word	0x08004763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f9e8 	bl	8004a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0208 	orr.w	r2, r2, #8
 80046ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0204 	bic.w	r2, r2, #4
 80046ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6999      	ldr	r1, [r3, #24]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	619a      	str	r2, [r3, #24]
      break;
 80046de:	e062      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fa38 	bl	8004b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	619a      	str	r2, [r3, #24]
      break;
 8004720:	e041      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fa8b 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0208 	orr.w	r2, r2, #8
 800473c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0204 	bic.w	r2, r2, #4
 800474c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69d9      	ldr	r1, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	61da      	str	r2, [r3, #28]
      break;
 8004760:	e021      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fadf 	bl	8004d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69d9      	ldr	r1, [r3, #28]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	021a      	lsls	r2, r3, #8
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	61da      	str	r2, [r3, #28]
      break;
 80047a2:	e000      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80047a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_ConfigClockSource+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0b3      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x180>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d03e      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0xd0>
 800480a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480e:	f200 8087 	bhi.w	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	f000 8085 	beq.w	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d87f      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d01a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0xa2>
 8004824:	2b70      	cmp	r3, #112	; 0x70
 8004826:	d87b      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d050      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x116>
 800482c:	2b60      	cmp	r3, #96	; 0x60
 800482e:	d877      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004830:	2b50      	cmp	r3, #80	; 0x50
 8004832:	d03c      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xf6>
 8004834:	2b50      	cmp	r3, #80	; 0x50
 8004836:	d873      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d058      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x136>
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d86f      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d064      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x156>
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d86b      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d060      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x156>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d867      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05c      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x156>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d05a      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004858:	e062      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6899      	ldr	r1, [r3, #8]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f000 fb2a 	bl	8004ec2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800487c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
      break;
 8004886:	e04e      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f000 fb13 	bl	8004ec2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048aa:	609a      	str	r2, [r3, #8]
      break;
 80048ac:	e03b      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 fa8a 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2150      	movs	r1, #80	; 0x50
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fae1 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 80048cc:	e02b      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 faa8 	bl	8004e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2160      	movs	r1, #96	; 0x60
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fad1 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 80048ec:	e01b      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 fa6a 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2140      	movs	r1, #64	; 0x40
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fac1 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 800490c:	e00b      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f000 fab8 	bl	8004e8e <TIM_ITRx_SetConfig>
        break;
 800491e:	e002      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004920:	bf00      	nop
 8004922:	e000      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004924:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <TIM_Base_SetConfig+0xe0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2e      	ldr	r2, [pc, #184]	; (8004a74 <TIM_Base_SetConfig+0xec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <TIM_Base_SetConfig+0xf0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <TIM_Base_SetConfig+0xe0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_Base_SetConfig+0x82>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_Base_SetConfig+0x82>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d00b      	beq.n	8004a0a <TIM_Base_SetConfig+0x82>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <TIM_Base_SetConfig+0xe8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0x82>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_Base_SetConfig+0xec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0x82>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <TIM_Base_SetConfig+0xf0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <TIM_Base_SetConfig+0xe0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0xc8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00

08004a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <TIM_OC1_SetConfig+0xd8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_OC1_SetConfig+0x64>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <TIM_OC1_SetConfig+0xdc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10c      	bne.n	8004afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0308 	bic.w	r3, r3, #8
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <TIM_OC1_SetConfig+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC1_SetConfig+0x8e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <TIM_OC1_SetConfig+0xdc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d111      	bne.n	8004b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400

08004b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0210 	bic.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 0320 	bic.w	r3, r3, #32
 8004ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <TIM_OC2_SetConfig+0xe0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC2_SetConfig+0x68>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <TIM_OC2_SetConfig+0xe4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10d      	bne.n	8004be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <TIM_OC2_SetConfig+0xe0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC2_SetConfig+0x94>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <TIM_OC2_SetConfig+0xe4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d113      	bne.n	8004c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	621a      	str	r2, [r3, #32]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40013400 	.word	0x40013400

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <TIM_OC3_SetConfig+0xe0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC3_SetConfig+0x66>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <TIM_OC3_SetConfig+0xe0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_OC3_SetConfig+0x92>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d113      	bne.n	8004cfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	621a      	str	r2, [r3, #32]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40013400 	.word	0x40013400

08004d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <TIM_OC4_SetConfig+0xa0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC4_SetConfig+0x68>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a10      	ldr	r2, [pc, #64]	; (8004dd0 <TIM_OC4_SetConfig+0xa4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d109      	bne.n	8004da8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40013400 	.word	0x40013400

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f023 0210 	bic.w	r2, r3, #16
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f043 0307 	orr.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	021a      	lsls	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e050      	b.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d018      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00

08004fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e03d      	b.n	8005070 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e03f      	b.n	8005130 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fc faa7 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2224      	movs	r2, #36	; 0x24
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f828 	bl	8005138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005106:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005116:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005172:	f023 030c 	bic.w	r3, r3, #12
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	430b      	orrs	r3, r1
 800517e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2c      	ldr	r2, [pc, #176]	; (800524c <UART_SetConfig+0x114>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051a0:	f7fd fb2c 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	e002      	b.n	80051ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fd fb14 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 80051ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	4a22      	ldr	r2, [pc, #136]	; (8005250 <UART_SetConfig+0x118>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	0119      	lsls	r1, r3, #4
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <UART_SetConfig+0x118>)
 80051e6:	fba3 0302 	umull	r0, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2064      	movs	r0, #100	; 0x64
 80051ee:	fb00 f303 	mul.w	r3, r0, r3
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	3332      	adds	r3, #50	; 0x32
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <UART_SetConfig+0x118>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005204:	4419      	add	r1, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fbb2 f2f3 	udiv	r2, r2, r3
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <UART_SetConfig+0x118>)
 800521e:	fba3 0302 	umull	r0, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2064      	movs	r0, #100	; 0x64
 8005226:	fb00 f303 	mul.w	r3, r0, r3
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a07      	ldr	r2, [pc, #28]	; (8005250 <UART_SetConfig+0x118>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	440a      	add	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40013800 	.word	0x40013800
 8005250:	51eb851f 	.word	0x51eb851f

08005254 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 001c 	add.w	r0, r7, #28
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800526a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800526c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800526e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005272:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005276:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800527a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800527e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800528e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr

080052a8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2203      	movs	r2, #3
 80052ec:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80052ee:	2002      	movs	r0, #2
 80052f0:	f7fc fbbe 	bl	8001a70 <HAL_Delay>
  
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0303 	and.w	r3, r3, #3
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005336:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800533c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005342:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005352:	f023 030f 	bic.w	r3, r3, #15
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	b2db      	uxtb	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3314      	adds	r3, #20
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4413      	add	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
}  
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053cc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80053d2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0

}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800540a:	2310      	movs	r3, #16
 800540c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800540e:	2340      	movs	r3, #64	; 0x40
 8005410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff78 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	2110      	movs	r1, #16
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa00 	bl	8005834 <SDMMC_GetCmdResp1>
 8005434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005436:	69fb      	ldr	r3, [r7, #28]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800544e:	2311      	movs	r3, #17
 8005450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800545a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff ff56 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	2111      	movs	r1, #17
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9de 	bl	8005834 <SDMMC_GetCmdResp1>
 8005478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005492:	2312      	movs	r3, #18
 8005494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800549e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff34 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80054b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b4:	2112      	movs	r1, #18
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9bc 	bl	8005834 <SDMMC_GetCmdResp1>
 80054bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054be:	69fb      	ldr	r3, [r7, #28]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80054d6:	2318      	movs	r3, #24
 80054d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff12 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	2118      	movs	r1, #24
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f99a 	bl	8005834 <SDMMC_GetCmdResp1>
 8005500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800551a:	2319      	movs	r3, #25
 800551c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800551e:	2340      	movs	r3, #64	; 0x40
 8005520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fef0 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	2119      	movs	r1, #25
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f978 	bl	8005834 <SDMMC_GetCmdResp1>
 8005544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800555c:	230c      	movs	r3, #12
 800555e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800556c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fecf 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <SDMMC_CmdStopTransfer+0x40>)
 800557c:	210c      	movs	r1, #12
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f958 	bl	8005834 <SDMMC_GetCmdResp1>
 8005584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005586:	69fb      	ldr	r3, [r7, #28]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	05f5e100 	.word	0x05f5e100

08005594 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055a4:	2307      	movs	r3, #7
 80055a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff feab 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	2107      	movs	r1, #7
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f933 	bl	8005834 <SDMMC_GetCmdResp1>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3728      	adds	r7, #40	; 0x28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fe8a 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8eb 	bl	80057e0 <SDMMC_GetCmdError>
 800560a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800561e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005624:	2308      	movs	r3, #8
 8005626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005628:	2340      	movs	r3, #64	; 0x40
 800562a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005634:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fe6b 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fade 	bl	8005c04 <SDMMC_GetCmdResp7>
 8005648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800564a:	69fb      	ldr	r3, [r7, #28]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005662:	2337      	movs	r3, #55	; 0x37
 8005664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800566e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fe4c 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	2137      	movs	r1, #55	; 0x37
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8d4 	bl	8005834 <SDMMC_GetCmdResp1>
 800568c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800568e:	69fb      	ldr	r3, [r7, #28]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80056ae:	2329      	movs	r3, #41	; 0x29
 80056b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff fe26 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9e7 	bl	8005aa0 <SDMMC_GetCmdResp3>
 80056d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b088      	sub	sp, #32
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80056ea:	2302      	movs	r3, #2
 80056ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80056ee:	23c0      	movs	r3, #192	; 0xc0
 80056f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056fc:	f107 0308 	add.w	r3, r7, #8
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fe08 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f981 	bl	8005a10 <SDMMC_GetCmdResp2>
 800570e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005710:	69fb      	ldr	r3, [r7, #28]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005728:	2309      	movs	r3, #9
 800572a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800572c:	23c0      	movs	r3, #192	; 0xc0
 800572e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fde9 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f962 	bl	8005a10 <SDMMC_GetCmdResp2>
 800574c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800574e:	69fb      	ldr	r3, [r7, #28]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005766:	2303      	movs	r3, #3
 8005768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fdca 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	2103      	movs	r1, #3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f9c5 	bl	8005b18 <SDMMC_GetCmdResp6>
 800578e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005790:	69fb      	ldr	r3, [r7, #28]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b088      	sub	sp, #32
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80057a8:	230d      	movs	r3, #13
 80057aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fda9 	bl	8005318 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	210d      	movs	r1, #13
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f831 	bl	8005834 <SDMMC_GetCmdResp1>
 80057d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057d4:	69fb      	ldr	r3, [r7, #28]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057e8:	4b10      	ldr	r3, [pc, #64]	; (800582c <SDMMC_GetCmdError+0x4c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a10      	ldr	r2, [pc, #64]	; (8005830 <SDMMC_GetCmdError+0x50>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0a5b      	lsrs	r3, r3, #9
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
 80057fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	60fa      	str	r2, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800580c:	e009      	b.n	8005822 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f1      	beq.n	80057fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	22c5      	movs	r2, #197	; 0xc5
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	20000000 	.word	0x20000000
 8005830:	10624dd3 	.word	0x10624dd3

08005834 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	460b      	mov	r3, r1
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005842:	4b70      	ldr	r3, [pc, #448]	; (8005a04 <SDMMC_GetCmdResp1+0x1d0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <SDMMC_GetCmdResp1+0x1d4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	0a5a      	lsrs	r2, r3, #9
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005864:	e0c9      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ef      	beq.n	8005856 <SDMMC_GetCmdResp1+0x22>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ea      	bne.n	8005856 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2204      	movs	r2, #4
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005892:	2304      	movs	r3, #4
 8005894:	e0b1      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0a6      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	22c5      	movs	r2, #197	; 0xc5
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff fd59 	bl	800536a <SDIO_GetCommandResponse>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d001      	beq.n	80058c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e099      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80058c6:	2100      	movs	r1, #0
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff fd5a 	bl	8005382 <SDIO_GetResponse>
 80058ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4b4e      	ldr	r3, [pc, #312]	; (8005a0c <SDMMC_GetCmdResp1+0x1d8>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80058da:	2300      	movs	r3, #0
 80058dc:	e08d      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da02      	bge.n	80058ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80058e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058e8:	e087      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	e080      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	e079      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005914:	e071      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005924:	e069      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005934:	e061      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005944:	e059      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005954:	e051      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005964:	e049      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005974:	e041      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005984:	e039      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005994:	e031      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80059a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059a4:	e029      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80059b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059b4:	e021      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80059c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059c4:	e019      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80059d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059d4:	e011      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80059e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059e4:	e009      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80059f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059f4:	e001      	b.n	80059fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80059f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000000 	.word	0x20000000
 8005a08:	10624dd3 	.word	0x10624dd3
 8005a0c:	fdffe008 	.word	0xfdffe008

08005a10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <SDMMC_GetCmdResp2+0x88>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <SDMMC_GetCmdResp2+0x8c>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0a5b      	lsrs	r3, r3, #9
 8005a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	60fa      	str	r2, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a3c:	e026      	b.n	8005a8c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0ef      	beq.n	8005a2e <SDMMC_GetCmdResp2+0x1e>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ea      	bne.n	8005a2e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2204      	movs	r2, #4
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	e00e      	b.n	8005a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e003      	b.n	8005a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	22c5      	movs	r2, #197	; 0xc5
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <SDMMC_GetCmdResp3+0x70>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <SDMMC_GetCmdResp3+0x74>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0a5b      	lsrs	r3, r3, #9
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005acc:	e01b      	b.n	8005b06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ef      	beq.n	8005abe <SDMMC_GetCmdResp3+0x1e>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1ea      	bne.n	8005abe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2204      	movs	r2, #4
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005afa:	2304      	movs	r3, #4
 8005afc:	e003      	b.n	8005b06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	22c5      	movs	r2, #197	; 0xc5
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	20000000 	.word	0x20000000
 8005b14:	10624dd3 	.word	0x10624dd3

08005b18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	460b      	mov	r3, r1
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b26:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <SDMMC_GetCmdResp6+0xe4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <SDMMC_GetCmdResp6+0xe8>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	1e5a      	subs	r2, r3, #1
 8005b40:	61fa      	str	r2, [r7, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b4a:	e052      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0ef      	beq.n	8005b3c <SDMMC_GetCmdResp6+0x24>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ea      	bne.n	8005b3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2204      	movs	r2, #4
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	e03a      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e02f      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fbe9 	bl	800536a <SDIO_GetCommandResponse>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d001      	beq.n	8005ba6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e025      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	22c5      	movs	r2, #197	; 0xc5
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005bac:	2100      	movs	r1, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fbe7 	bl	8005382 <SDIO_GetResponse>
 8005bb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e011      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bdc:	e009      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bec:	e001      	b.n	8005bf2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	10624dd3 	.word	0x10624dd3

08005c04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <SDMMC_GetCmdResp7+0x94>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <SDMMC_GetCmdResp7+0x98>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	0a5b      	lsrs	r3, r3, #9
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	60fa      	str	r2, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c30:	e02c      	b.n	8005c8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ef      	beq.n	8005c22 <SDMMC_GetCmdResp7+0x1e>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ea      	bne.n	8005c22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c5e:	2304      	movs	r3, #4
 8005c60:	e014      	b.n	8005c8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e009      	b.n	8005c8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
  
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	10624dd3 	.word	0x10624dd3

08005ca0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005ca4:	4904      	ldr	r1, [pc, #16]	; (8005cb8 <MX_FATFS_Init+0x18>)
 8005ca6:	4805      	ldr	r0, [pc, #20]	; (8005cbc <MX_FATFS_Init+0x1c>)
 8005ca8:	f000 f8d4 	bl	8005e54 <FATFS_LinkDriver>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <MX_FATFS_Init+0x20>)
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000374 	.word	0x20000374
 8005cbc:	0800a97c 	.word	0x0800a97c
 8005cc0:	20000370 	.word	0x20000370

08005cc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005cce:	f000 f86b 	bl	8005da8 <BSP_SD_IsDetected>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d001      	beq.n	8005cdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e005      	b.n	8005ce8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005cdc:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <BSP_SD_Init+0x2c>)
 8005cde:	f7fd fb17 	bl	8003310 <HAL_SD_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000210 	.word	0x20000210

08005cf4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	4806      	ldr	r0, [pc, #24]	; (8005d2c <BSP_SD_ReadBlocks+0x38>)
 8005d12:	f7fd fbab 	bl	800346c <HAL_SD_ReadBlocks>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000210 	.word	0x20000210

08005d30 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	4806      	ldr	r0, [pc, #24]	; (8005d68 <BSP_SD_WriteBlocks+0x38>)
 8005d4e:	f7fd fd6b 	bl	8003828 <HAL_SD_WriteBlocks>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000210 	.word	0x20000210

08005d6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d70:	4805      	ldr	r0, [pc, #20]	; (8005d88 <BSP_SD_GetCardState+0x1c>)
 8005d72:	f7fe f8ae 	bl	8003ed2 <HAL_SD_GetCardState>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000210 	.word	0x20000210

08005d8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <BSP_SD_GetCardInfo+0x18>)
 8005d98:	f7fe f870 	bl	8003e7c <HAL_SD_GetCardInfo>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000210 	.word	0x20000210

08005da8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005dae:	2301      	movs	r3, #1
 8005db0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	b2db      	uxtb	r3, r3
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005dd8:	7a5b      	ldrb	r3, [r3, #9]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d831      	bhi.n	8005e44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005de2:	7a5b      	ldrb	r3, [r3, #9]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005dea:	2100      	movs	r1, #0
 8005dec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005df0:	7a5b      	ldrb	r3, [r3, #9]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005e00:	7a5b      	ldrb	r3, [r3, #9]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	79fa      	ldrb	r2, [r7, #7]
 8005e0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005e10:	7a5b      	ldrb	r3, [r3, #9]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	b2d1      	uxtb	r1, r2
 8005e18:	4a0d      	ldr	r2, [pc, #52]	; (8005e50 <FATFS_LinkDriverEx+0x90>)
 8005e1a:	7251      	strb	r1, [r2, #9]
 8005e1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e1e:	7dbb      	ldrb	r3, [r7, #22]
 8005e20:	3330      	adds	r3, #48	; 0x30
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	223a      	movs	r2, #58	; 0x3a
 8005e2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3302      	adds	r3, #2
 8005e34:	222f      	movs	r2, #47	; 0x2f
 8005e36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	20000378 	.word	0x20000378

08005e54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffac 	bl	8005dc0 <FATFS_LinkDriverEx>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <SD_initialize+0x38>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8005e84:	f7ff ff1e 	bl	8005cc4 <BSP_SD_Init>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <SD_initialize+0x38>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <SD_initialize+0x38>)
 8005e9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <SD_initialize+0x38>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b2db      	uxtb	r3, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000009 	.word	0x20000009

08005eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <SD_status+0x38>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ec0:	f7ff ff54 	bl	8005d6c <BSP_SD_GetCardState>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <SD_status+0x38>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <SD_status+0x38>)
 8005ed8:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8005eda:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <SD_status+0x38>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20000009 	.word	0x20000009

08005eec <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <SD_read+0x54>)
 8005f02:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <SD_read+0x58>)
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68b8      	ldr	r0, [r7, #8]
 8005f0c:	f7ff fef2 	bl	8005cf4 <BSP_SD_ReadBlocks>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10e      	bne.n	8005f34 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f16:	e006      	b.n	8005f26 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	613a      	str	r2, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <SD_read+0x3a>
      {
        return RES_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e007      	b.n	8005f36 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f26:	f7ff ff21 	bl	8005d6c <BSP_SD_GetCardState>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f3      	bne.n	8005f18 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	000186a0 	.word	0x000186a0
 8005f44:	05f5e100 	.word	0x05f5e100

08005f48 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <SD_write+0x54>)
 8005f5e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8005f60:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <SD_write+0x58>)
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f7ff fee2 	bl	8005d30 <BSP_SD_WriteBlocks>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10e      	bne.n	8005f90 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f72:	e006      	b.n	8005f82 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	613a      	str	r2, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <SD_write+0x3a>
      {
        return RES_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e007      	b.n	8005f92 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f82:	f7ff fef3 	bl	8005d6c <BSP_SD_GetCardState>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f3      	bne.n	8005f74 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	000186a0 	.word	0x000186a0
 8005fa0:	05f5e100 	.word	0x05f5e100

08005fa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	603a      	str	r2, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <SD_ioctl+0xa8>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <SD_ioctl+0x28>
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e03b      	b.n	8006044 <SD_ioctl+0xa0>
  
  switch (cmd)
 8005fcc:	79bb      	ldrb	r3, [r7, #6]
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d833      	bhi.n	800603a <SD_ioctl+0x96>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <SD_ioctl+0x34>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006023 	.word	0x08006023
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005fee:	e027      	b.n	8006040 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ff0:	f107 030c 	add.w	r3, r7, #12
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fec9 	bl	8005d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006006:	e01b      	b.n	8006040 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff febd 	bl	8005d8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	b29a      	uxth	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006020:	e00e      	b.n	8006040 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006022:	f107 030c 	add.w	r3, r7, #12
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff feb0 	bl	8005d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800602c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006038:	e002      	b.n	8006040 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800603a:	2304      	movs	r3, #4
 800603c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8006040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006044:	4618      	mov	r0, r3
 8006046:	3730      	adds	r7, #48	; 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000009 	.word	0x20000009

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	; (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	2000000c 	.word	0x2000000c

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	2600      	movs	r6, #0
 8006060:	4d0c      	ldr	r5, [pc, #48]	; (8006094 <__libc_init_array+0x38>)
 8006062:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	f004 fc52 	bl	800a914 <_init>
 8006070:	2600      	movs	r6, #0
 8006072:	4d0a      	ldr	r5, [pc, #40]	; (800609c <__libc_init_array+0x40>)
 8006074:	4c0a      	ldr	r4, [pc, #40]	; (80060a0 <__libc_init_array+0x44>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	0800ae34 	.word	0x0800ae34
 8006098:	0800ae34 	.word	0x0800ae34
 800609c:	0800ae34 	.word	0x0800ae34
 80060a0:	0800ae38 	.word	0x0800ae38

080060a4 <memset>:
 80060a4:	4603      	mov	r3, r0
 80060a6:	4402      	add	r2, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <__cvt>:
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ba:	461f      	mov	r7, r3
 80060bc:	bfbb      	ittet	lt
 80060be:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80060c2:	461f      	movlt	r7, r3
 80060c4:	2300      	movge	r3, #0
 80060c6:	232d      	movlt	r3, #45	; 0x2d
 80060c8:	b088      	sub	sp, #32
 80060ca:	4614      	mov	r4, r2
 80060cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060d8:	f023 0820 	bic.w	r8, r3, #32
 80060dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060e0:	d005      	beq.n	80060ee <__cvt+0x3a>
 80060e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060e6:	d100      	bne.n	80060ea <__cvt+0x36>
 80060e8:	3501      	adds	r5, #1
 80060ea:	2302      	movs	r3, #2
 80060ec:	e000      	b.n	80060f0 <__cvt+0x3c>
 80060ee:	2303      	movs	r3, #3
 80060f0:	aa07      	add	r2, sp, #28
 80060f2:	9204      	str	r2, [sp, #16]
 80060f4:	aa06      	add	r2, sp, #24
 80060f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060fa:	e9cd 3500 	strd	r3, r5, [sp]
 80060fe:	4622      	mov	r2, r4
 8006100:	463b      	mov	r3, r7
 8006102:	f001 fd85 	bl	8007c10 <_dtoa_r>
 8006106:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800610a:	4606      	mov	r6, r0
 800610c:	d102      	bne.n	8006114 <__cvt+0x60>
 800610e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006110:	07db      	lsls	r3, r3, #31
 8006112:	d522      	bpl.n	800615a <__cvt+0xa6>
 8006114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006118:	eb06 0905 	add.w	r9, r6, r5
 800611c:	d110      	bne.n	8006140 <__cvt+0x8c>
 800611e:	7833      	ldrb	r3, [r6, #0]
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d10a      	bne.n	800613a <__cvt+0x86>
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	4620      	mov	r0, r4
 800612a:	4639      	mov	r1, r7
 800612c:	f7fa fca8 	bl	8000a80 <__aeabi_dcmpeq>
 8006130:	b918      	cbnz	r0, 800613a <__cvt+0x86>
 8006132:	f1c5 0501 	rsb	r5, r5, #1
 8006136:	f8ca 5000 	str.w	r5, [sl]
 800613a:	f8da 3000 	ldr.w	r3, [sl]
 800613e:	4499      	add	r9, r3
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4620      	mov	r0, r4
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa fc9a 	bl	8000a80 <__aeabi_dcmpeq>
 800614c:	b108      	cbz	r0, 8006152 <__cvt+0x9e>
 800614e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006152:	2230      	movs	r2, #48	; 0x30
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	454b      	cmp	r3, r9
 8006158:	d307      	bcc.n	800616a <__cvt+0xb6>
 800615a:	4630      	mov	r0, r6
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006160:	1b9b      	subs	r3, r3, r6
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	b008      	add	sp, #32
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	9107      	str	r1, [sp, #28]
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e7f0      	b.n	8006154 <__cvt+0xa0>

08006172 <__exponent>:
 8006172:	4603      	mov	r3, r0
 8006174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006176:	2900      	cmp	r1, #0
 8006178:	f803 2b02 	strb.w	r2, [r3], #2
 800617c:	bfb6      	itet	lt
 800617e:	222d      	movlt	r2, #45	; 0x2d
 8006180:	222b      	movge	r2, #43	; 0x2b
 8006182:	4249      	neglt	r1, r1
 8006184:	2909      	cmp	r1, #9
 8006186:	7042      	strb	r2, [r0, #1]
 8006188:	dd2b      	ble.n	80061e2 <__exponent+0x70>
 800618a:	f10d 0407 	add.w	r4, sp, #7
 800618e:	46a4      	mov	ip, r4
 8006190:	270a      	movs	r7, #10
 8006192:	fb91 f6f7 	sdiv	r6, r1, r7
 8006196:	460a      	mov	r2, r1
 8006198:	46a6      	mov	lr, r4
 800619a:	fb07 1516 	mls	r5, r7, r6, r1
 800619e:	2a63      	cmp	r2, #99	; 0x63
 80061a0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80061a4:	4631      	mov	r1, r6
 80061a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061ae:	dcf0      	bgt.n	8006192 <__exponent+0x20>
 80061b0:	3130      	adds	r1, #48	; 0x30
 80061b2:	f1ae 0502 	sub.w	r5, lr, #2
 80061b6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061ba:	4629      	mov	r1, r5
 80061bc:	1c44      	adds	r4, r0, #1
 80061be:	4561      	cmp	r1, ip
 80061c0:	d30a      	bcc.n	80061d8 <__exponent+0x66>
 80061c2:	f10d 0209 	add.w	r2, sp, #9
 80061c6:	eba2 020e 	sub.w	r2, r2, lr
 80061ca:	4565      	cmp	r5, ip
 80061cc:	bf88      	it	hi
 80061ce:	2200      	movhi	r2, #0
 80061d0:	4413      	add	r3, r2
 80061d2:	1a18      	subs	r0, r3, r0
 80061d4:	b003      	add	sp, #12
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061dc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061e0:	e7ed      	b.n	80061be <__exponent+0x4c>
 80061e2:	2330      	movs	r3, #48	; 0x30
 80061e4:	3130      	adds	r1, #48	; 0x30
 80061e6:	7083      	strb	r3, [r0, #2]
 80061e8:	70c1      	strb	r1, [r0, #3]
 80061ea:	1d03      	adds	r3, r0, #4
 80061ec:	e7f1      	b.n	80061d2 <__exponent+0x60>
	...

080061f0 <_printf_float>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	b091      	sub	sp, #68	; 0x44
 80061f6:	460c      	mov	r4, r1
 80061f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061fc:	4616      	mov	r6, r2
 80061fe:	461f      	mov	r7, r3
 8006200:	4605      	mov	r5, r0
 8006202:	f002 fe59 	bl	8008eb8 <_localeconv_r>
 8006206:	6803      	ldr	r3, [r0, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	f7fa f80c 	bl	8000228 <strlen>
 8006210:	2300      	movs	r3, #0
 8006212:	930e      	str	r3, [sp, #56]	; 0x38
 8006214:	f8d8 3000 	ldr.w	r3, [r8]
 8006218:	900a      	str	r0, [sp, #40]	; 0x28
 800621a:	3307      	adds	r3, #7
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	f103 0208 	add.w	r2, r3, #8
 8006224:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006228:	f8d4 b000 	ldr.w	fp, [r4]
 800622c:	f8c8 2000 	str.w	r2, [r8]
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006238:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800623c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006240:	930b      	str	r3, [sp, #44]	; 0x2c
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	4640      	mov	r0, r8
 8006248:	4b9c      	ldr	r3, [pc, #624]	; (80064bc <_printf_float+0x2cc>)
 800624a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800624c:	f7fa fc4a 	bl	8000ae4 <__aeabi_dcmpun>
 8006250:	bb70      	cbnz	r0, 80062b0 <_printf_float+0xc0>
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	4640      	mov	r0, r8
 8006258:	4b98      	ldr	r3, [pc, #608]	; (80064bc <_printf_float+0x2cc>)
 800625a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800625c:	f7fa fc24 	bl	8000aa8 <__aeabi_dcmple>
 8006260:	bb30      	cbnz	r0, 80062b0 <_printf_float+0xc0>
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	4640      	mov	r0, r8
 8006268:	4651      	mov	r1, sl
 800626a:	f7fa fc13 	bl	8000a94 <__aeabi_dcmplt>
 800626e:	b110      	cbz	r0, 8006276 <_printf_float+0x86>
 8006270:	232d      	movs	r3, #45	; 0x2d
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006276:	4b92      	ldr	r3, [pc, #584]	; (80064c0 <_printf_float+0x2d0>)
 8006278:	4892      	ldr	r0, [pc, #584]	; (80064c4 <_printf_float+0x2d4>)
 800627a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800627e:	bf94      	ite	ls
 8006280:	4698      	movls	r8, r3
 8006282:	4680      	movhi	r8, r0
 8006284:	2303      	movs	r3, #3
 8006286:	f04f 0a00 	mov.w	sl, #0
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	f02b 0304 	bic.w	r3, fp, #4
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	4633      	mov	r3, r6
 8006294:	4621      	mov	r1, r4
 8006296:	4628      	mov	r0, r5
 8006298:	9700      	str	r7, [sp, #0]
 800629a:	aa0f      	add	r2, sp, #60	; 0x3c
 800629c:	f000 f9d4 	bl	8006648 <_printf_common>
 80062a0:	3001      	adds	r0, #1
 80062a2:	f040 8090 	bne.w	80063c6 <_printf_float+0x1d6>
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	b011      	add	sp, #68	; 0x44
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b0:	4642      	mov	r2, r8
 80062b2:	4653      	mov	r3, sl
 80062b4:	4640      	mov	r0, r8
 80062b6:	4651      	mov	r1, sl
 80062b8:	f7fa fc14 	bl	8000ae4 <__aeabi_dcmpun>
 80062bc:	b148      	cbz	r0, 80062d2 <_printf_float+0xe2>
 80062be:	f1ba 0f00 	cmp.w	sl, #0
 80062c2:	bfb8      	it	lt
 80062c4:	232d      	movlt	r3, #45	; 0x2d
 80062c6:	4880      	ldr	r0, [pc, #512]	; (80064c8 <_printf_float+0x2d8>)
 80062c8:	bfb8      	it	lt
 80062ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ce:	4b7f      	ldr	r3, [pc, #508]	; (80064cc <_printf_float+0x2dc>)
 80062d0:	e7d3      	b.n	800627a <_printf_float+0x8a>
 80062d2:	6863      	ldr	r3, [r4, #4]
 80062d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	d142      	bne.n	8006362 <_printf_float+0x172>
 80062dc:	2306      	movs	r3, #6
 80062de:	6063      	str	r3, [r4, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	9206      	str	r2, [sp, #24]
 80062e4:	aa0e      	add	r2, sp, #56	; 0x38
 80062e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062ea:	aa0d      	add	r2, sp, #52	; 0x34
 80062ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062f0:	9203      	str	r2, [sp, #12]
 80062f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	4642      	mov	r2, r8
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4628      	mov	r0, r5
 8006304:	4653      	mov	r3, sl
 8006306:	910b      	str	r1, [sp, #44]	; 0x2c
 8006308:	f7ff fed4 	bl	80060b4 <__cvt>
 800630c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800630e:	4680      	mov	r8, r0
 8006310:	2947      	cmp	r1, #71	; 0x47
 8006312:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006314:	d108      	bne.n	8006328 <_printf_float+0x138>
 8006316:	1cc8      	adds	r0, r1, #3
 8006318:	db02      	blt.n	8006320 <_printf_float+0x130>
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	4299      	cmp	r1, r3
 800631e:	dd40      	ble.n	80063a2 <_printf_float+0x1b2>
 8006320:	f1a9 0902 	sub.w	r9, r9, #2
 8006324:	fa5f f989 	uxtb.w	r9, r9
 8006328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800632c:	d81f      	bhi.n	800636e <_printf_float+0x17e>
 800632e:	464a      	mov	r2, r9
 8006330:	3901      	subs	r1, #1
 8006332:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006336:	910d      	str	r1, [sp, #52]	; 0x34
 8006338:	f7ff ff1b 	bl	8006172 <__exponent>
 800633c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633e:	4682      	mov	sl, r0
 8006340:	1813      	adds	r3, r2, r0
 8006342:	2a01      	cmp	r2, #1
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	dc02      	bgt.n	800634e <_printf_float+0x15e>
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	07d2      	lsls	r2, r2, #31
 800634c:	d501      	bpl.n	8006352 <_printf_float+0x162>
 800634e:	3301      	adds	r3, #1
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006356:	2b00      	cmp	r3, #0
 8006358:	d09b      	beq.n	8006292 <_printf_float+0xa2>
 800635a:	232d      	movs	r3, #45	; 0x2d
 800635c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006360:	e797      	b.n	8006292 <_printf_float+0xa2>
 8006362:	2947      	cmp	r1, #71	; 0x47
 8006364:	d1bc      	bne.n	80062e0 <_printf_float+0xf0>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ba      	bne.n	80062e0 <_printf_float+0xf0>
 800636a:	2301      	movs	r3, #1
 800636c:	e7b7      	b.n	80062de <_printf_float+0xee>
 800636e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006372:	d118      	bne.n	80063a6 <_printf_float+0x1b6>
 8006374:	2900      	cmp	r1, #0
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	dd0b      	ble.n	8006392 <_printf_float+0x1a2>
 800637a:	6121      	str	r1, [r4, #16]
 800637c:	b913      	cbnz	r3, 8006384 <_printf_float+0x194>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	07d0      	lsls	r0, r2, #31
 8006382:	d502      	bpl.n	800638a <_printf_float+0x19a>
 8006384:	3301      	adds	r3, #1
 8006386:	440b      	add	r3, r1
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	f04f 0a00 	mov.w	sl, #0
 800638e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006390:	e7df      	b.n	8006352 <_printf_float+0x162>
 8006392:	b913      	cbnz	r3, 800639a <_printf_float+0x1aa>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	07d2      	lsls	r2, r2, #31
 8006398:	d501      	bpl.n	800639e <_printf_float+0x1ae>
 800639a:	3302      	adds	r3, #2
 800639c:	e7f4      	b.n	8006388 <_printf_float+0x198>
 800639e:	2301      	movs	r3, #1
 80063a0:	e7f2      	b.n	8006388 <_printf_float+0x198>
 80063a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a8:	4299      	cmp	r1, r3
 80063aa:	db05      	blt.n	80063b8 <_printf_float+0x1c8>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	6121      	str	r1, [r4, #16]
 80063b0:	07d8      	lsls	r0, r3, #31
 80063b2:	d5ea      	bpl.n	800638a <_printf_float+0x19a>
 80063b4:	1c4b      	adds	r3, r1, #1
 80063b6:	e7e7      	b.n	8006388 <_printf_float+0x198>
 80063b8:	2900      	cmp	r1, #0
 80063ba:	bfcc      	ite	gt
 80063bc:	2201      	movgt	r2, #1
 80063be:	f1c1 0202 	rsble	r2, r1, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	e7e0      	b.n	8006388 <_printf_float+0x198>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	055a      	lsls	r2, r3, #21
 80063ca:	d407      	bmi.n	80063dc <_printf_float+0x1ec>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	4642      	mov	r2, r8
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d12b      	bne.n	8006432 <_printf_float+0x242>
 80063da:	e764      	b.n	80062a6 <_printf_float+0xb6>
 80063dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063e0:	f240 80dd 	bls.w	800659e <_printf_float+0x3ae>
 80063e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	f7fa fb48 	bl	8000a80 <__aeabi_dcmpeq>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d033      	beq.n	800645c <_printf_float+0x26c>
 80063f4:	2301      	movs	r3, #1
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <_printf_float+0x2e0>)
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af51 	beq.w	80062a6 <_printf_float+0xb6>
 8006404:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006408:	429a      	cmp	r2, r3
 800640a:	db02      	blt.n	8006412 <_printf_float+0x222>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	07d8      	lsls	r0, r3, #31
 8006410:	d50f      	bpl.n	8006432 <_printf_float+0x242>
 8006412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	f43f af42 	beq.w	80062a6 <_printf_float+0xb6>
 8006422:	f04f 0800 	mov.w	r8, #0
 8006426:	f104 091a 	add.w	r9, r4, #26
 800642a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642c:	3b01      	subs	r3, #1
 800642e:	4543      	cmp	r3, r8
 8006430:	dc09      	bgt.n	8006446 <_printf_float+0x256>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	079b      	lsls	r3, r3, #30
 8006436:	f100 8102 	bmi.w	800663e <_printf_float+0x44e>
 800643a:	68e0      	ldr	r0, [r4, #12]
 800643c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800643e:	4298      	cmp	r0, r3
 8006440:	bfb8      	it	lt
 8006442:	4618      	movlt	r0, r3
 8006444:	e731      	b.n	80062aa <_printf_float+0xba>
 8006446:	2301      	movs	r3, #1
 8006448:	464a      	mov	r2, r9
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f af28 	beq.w	80062a6 <_printf_float+0xb6>
 8006456:	f108 0801 	add.w	r8, r8, #1
 800645a:	e7e6      	b.n	800642a <_printf_float+0x23a>
 800645c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc38      	bgt.n	80064d4 <_printf_float+0x2e4>
 8006462:	2301      	movs	r3, #1
 8006464:	4631      	mov	r1, r6
 8006466:	4628      	mov	r0, r5
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <_printf_float+0x2e0>)
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f af1a 	beq.w	80062a6 <_printf_float+0xb6>
 8006472:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006476:	4313      	orrs	r3, r2
 8006478:	d102      	bne.n	8006480 <_printf_float+0x290>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07d9      	lsls	r1, r3, #31
 800647e:	d5d8      	bpl.n	8006432 <_printf_float+0x242>
 8006480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af0b 	beq.w	80062a6 <_printf_float+0xb6>
 8006490:	f04f 0900 	mov.w	r9, #0
 8006494:	f104 0a1a 	add.w	sl, r4, #26
 8006498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800649a:	425b      	negs	r3, r3
 800649c:	454b      	cmp	r3, r9
 800649e:	dc01      	bgt.n	80064a4 <_printf_float+0x2b4>
 80064a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a2:	e794      	b.n	80063ce <_printf_float+0x1de>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4652      	mov	r2, sl
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f aef9 	beq.w	80062a6 <_printf_float+0xb6>
 80064b4:	f109 0901 	add.w	r9, r9, #1
 80064b8:	e7ee      	b.n	8006498 <_printf_float+0x2a8>
 80064ba:	bf00      	nop
 80064bc:	7fefffff 	.word	0x7fefffff
 80064c0:	0800a994 	.word	0x0800a994
 80064c4:	0800a998 	.word	0x0800a998
 80064c8:	0800a9a0 	.word	0x0800a9a0
 80064cc:	0800a99c 	.word	0x0800a99c
 80064d0:	0800a9a4 	.word	0x0800a9a4
 80064d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064d8:	429a      	cmp	r2, r3
 80064da:	bfa8      	it	ge
 80064dc:	461a      	movge	r2, r3
 80064de:	2a00      	cmp	r2, #0
 80064e0:	4691      	mov	r9, r2
 80064e2:	dc37      	bgt.n	8006554 <_printf_float+0x364>
 80064e4:	f04f 0b00 	mov.w	fp, #0
 80064e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064ec:	f104 021a 	add.w	r2, r4, #26
 80064f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064f4:	ebaa 0309 	sub.w	r3, sl, r9
 80064f8:	455b      	cmp	r3, fp
 80064fa:	dc33      	bgt.n	8006564 <_printf_float+0x374>
 80064fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006500:	429a      	cmp	r2, r3
 8006502:	db3b      	blt.n	800657c <_printf_float+0x38c>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	07da      	lsls	r2, r3, #31
 8006508:	d438      	bmi.n	800657c <_printf_float+0x38c>
 800650a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800650e:	eba3 020a 	sub.w	r2, r3, sl
 8006512:	eba3 0901 	sub.w	r9, r3, r1
 8006516:	4591      	cmp	r9, r2
 8006518:	bfa8      	it	ge
 800651a:	4691      	movge	r9, r2
 800651c:	f1b9 0f00 	cmp.w	r9, #0
 8006520:	dc34      	bgt.n	800658c <_printf_float+0x39c>
 8006522:	f04f 0800 	mov.w	r8, #0
 8006526:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800652a:	f104 0a1a 	add.w	sl, r4, #26
 800652e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	eba3 0309 	sub.w	r3, r3, r9
 8006538:	4543      	cmp	r3, r8
 800653a:	f77f af7a 	ble.w	8006432 <_printf_float+0x242>
 800653e:	2301      	movs	r3, #1
 8006540:	4652      	mov	r2, sl
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	f43f aeac 	beq.w	80062a6 <_printf_float+0xb6>
 800654e:	f108 0801 	add.w	r8, r8, #1
 8006552:	e7ec      	b.n	800652e <_printf_float+0x33e>
 8006554:	4613      	mov	r3, r2
 8006556:	4631      	mov	r1, r6
 8006558:	4642      	mov	r2, r8
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	d1c0      	bne.n	80064e4 <_printf_float+0x2f4>
 8006562:	e6a0      	b.n	80062a6 <_printf_float+0xb6>
 8006564:	2301      	movs	r3, #1
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	920b      	str	r2, [sp, #44]	; 0x2c
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f ae99 	beq.w	80062a6 <_printf_float+0xb6>
 8006574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006576:	f10b 0b01 	add.w	fp, fp, #1
 800657a:	e7b9      	b.n	80064f0 <_printf_float+0x300>
 800657c:	4631      	mov	r1, r6
 800657e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	d1bf      	bne.n	800650a <_printf_float+0x31a>
 800658a:	e68c      	b.n	80062a6 <_printf_float+0xb6>
 800658c:	464b      	mov	r3, r9
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	eb08 020a 	add.w	r2, r8, sl
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	d1c2      	bne.n	8006522 <_printf_float+0x332>
 800659c:	e683      	b.n	80062a6 <_printf_float+0xb6>
 800659e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a0:	2a01      	cmp	r2, #1
 80065a2:	dc01      	bgt.n	80065a8 <_printf_float+0x3b8>
 80065a4:	07db      	lsls	r3, r3, #31
 80065a6:	d537      	bpl.n	8006618 <_printf_float+0x428>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4642      	mov	r2, r8
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f ae77 	beq.w	80062a6 <_printf_float+0xb6>
 80065b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	f43f ae6f 	beq.w	80062a6 <_printf_float+0xb6>
 80065c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065cc:	2200      	movs	r2, #0
 80065ce:	2300      	movs	r3, #0
 80065d0:	f7fa fa56 	bl	8000a80 <__aeabi_dcmpeq>
 80065d4:	b9d8      	cbnz	r0, 800660e <_printf_float+0x41e>
 80065d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d8:	f108 0201 	add.w	r2, r8, #1
 80065dc:	3b01      	subs	r3, #1
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	d10e      	bne.n	8006606 <_printf_float+0x416>
 80065e8:	e65d      	b.n	80062a6 <_printf_float+0xb6>
 80065ea:	2301      	movs	r3, #1
 80065ec:	464a      	mov	r2, r9
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	f43f ae56 	beq.w	80062a6 <_printf_float+0xb6>
 80065fa:	f108 0801 	add.w	r8, r8, #1
 80065fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006600:	3b01      	subs	r3, #1
 8006602:	4543      	cmp	r3, r8
 8006604:	dcf1      	bgt.n	80065ea <_printf_float+0x3fa>
 8006606:	4653      	mov	r3, sl
 8006608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800660c:	e6e0      	b.n	80063d0 <_printf_float+0x1e0>
 800660e:	f04f 0800 	mov.w	r8, #0
 8006612:	f104 091a 	add.w	r9, r4, #26
 8006616:	e7f2      	b.n	80065fe <_printf_float+0x40e>
 8006618:	2301      	movs	r3, #1
 800661a:	4642      	mov	r2, r8
 800661c:	e7df      	b.n	80065de <_printf_float+0x3ee>
 800661e:	2301      	movs	r3, #1
 8006620:	464a      	mov	r2, r9
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f ae3c 	beq.w	80062a6 <_printf_float+0xb6>
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	68e3      	ldr	r3, [r4, #12]
 8006634:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006636:	1a5b      	subs	r3, r3, r1
 8006638:	4543      	cmp	r3, r8
 800663a:	dcf0      	bgt.n	800661e <_printf_float+0x42e>
 800663c:	e6fd      	b.n	800643a <_printf_float+0x24a>
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	f104 0919 	add.w	r9, r4, #25
 8006646:	e7f4      	b.n	8006632 <_printf_float+0x442>

08006648 <_printf_common>:
 8006648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800664c:	4616      	mov	r6, r2
 800664e:	4699      	mov	r9, r3
 8006650:	688a      	ldr	r2, [r1, #8]
 8006652:	690b      	ldr	r3, [r1, #16]
 8006654:	4607      	mov	r7, r0
 8006656:	4293      	cmp	r3, r2
 8006658:	bfb8      	it	lt
 800665a:	4613      	movlt	r3, r2
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006662:	460c      	mov	r4, r1
 8006664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006668:	b10a      	cbz	r2, 800666e <_printf_common+0x26>
 800666a:	3301      	adds	r3, #1
 800666c:	6033      	str	r3, [r6, #0]
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	0699      	lsls	r1, r3, #26
 8006672:	bf42      	ittt	mi
 8006674:	6833      	ldrmi	r3, [r6, #0]
 8006676:	3302      	addmi	r3, #2
 8006678:	6033      	strmi	r3, [r6, #0]
 800667a:	6825      	ldr	r5, [r4, #0]
 800667c:	f015 0506 	ands.w	r5, r5, #6
 8006680:	d106      	bne.n	8006690 <_printf_common+0x48>
 8006682:	f104 0a19 	add.w	sl, r4, #25
 8006686:	68e3      	ldr	r3, [r4, #12]
 8006688:	6832      	ldr	r2, [r6, #0]
 800668a:	1a9b      	subs	r3, r3, r2
 800668c:	42ab      	cmp	r3, r5
 800668e:	dc28      	bgt.n	80066e2 <_printf_common+0x9a>
 8006690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006694:	1e13      	subs	r3, r2, #0
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	bf18      	it	ne
 800669a:	2301      	movne	r3, #1
 800669c:	0692      	lsls	r2, r2, #26
 800669e:	d42d      	bmi.n	80066fc <_printf_common+0xb4>
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a8:	47c0      	blx	r8
 80066aa:	3001      	adds	r0, #1
 80066ac:	d020      	beq.n	80066f0 <_printf_common+0xa8>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	68e5      	ldr	r5, [r4, #12]
 80066b2:	f003 0306 	and.w	r3, r3, #6
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	bf18      	it	ne
 80066ba:	2500      	movne	r5, #0
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	f04f 0600 	mov.w	r6, #0
 80066c2:	68a3      	ldr	r3, [r4, #8]
 80066c4:	bf08      	it	eq
 80066c6:	1aad      	subeq	r5, r5, r2
 80066c8:	6922      	ldr	r2, [r4, #16]
 80066ca:	bf08      	it	eq
 80066cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bfc4      	itt	gt
 80066d4:	1a9b      	subgt	r3, r3, r2
 80066d6:	18ed      	addgt	r5, r5, r3
 80066d8:	341a      	adds	r4, #26
 80066da:	42b5      	cmp	r5, r6
 80066dc:	d11a      	bne.n	8006714 <_printf_common+0xcc>
 80066de:	2000      	movs	r0, #0
 80066e0:	e008      	b.n	80066f4 <_printf_common+0xac>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4649      	mov	r1, r9
 80066e8:	4638      	mov	r0, r7
 80066ea:	47c0      	blx	r8
 80066ec:	3001      	adds	r0, #1
 80066ee:	d103      	bne.n	80066f8 <_printf_common+0xb0>
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	3501      	adds	r5, #1
 80066fa:	e7c4      	b.n	8006686 <_printf_common+0x3e>
 80066fc:	2030      	movs	r0, #48	; 0x30
 80066fe:	18e1      	adds	r1, r4, r3
 8006700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800670a:	4422      	add	r2, r4
 800670c:	3302      	adds	r3, #2
 800670e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006712:	e7c5      	b.n	80066a0 <_printf_common+0x58>
 8006714:	2301      	movs	r3, #1
 8006716:	4622      	mov	r2, r4
 8006718:	4649      	mov	r1, r9
 800671a:	4638      	mov	r0, r7
 800671c:	47c0      	blx	r8
 800671e:	3001      	adds	r0, #1
 8006720:	d0e6      	beq.n	80066f0 <_printf_common+0xa8>
 8006722:	3601      	adds	r6, #1
 8006724:	e7d9      	b.n	80066da <_printf_common+0x92>
	...

08006728 <_printf_i>:
 8006728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	7e0f      	ldrb	r7, [r1, #24]
 800672e:	4691      	mov	r9, r2
 8006730:	2f78      	cmp	r7, #120	; 0x78
 8006732:	4680      	mov	r8, r0
 8006734:	460c      	mov	r4, r1
 8006736:	469a      	mov	sl, r3
 8006738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800673a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800673e:	d807      	bhi.n	8006750 <_printf_i+0x28>
 8006740:	2f62      	cmp	r7, #98	; 0x62
 8006742:	d80a      	bhi.n	800675a <_printf_i+0x32>
 8006744:	2f00      	cmp	r7, #0
 8006746:	f000 80d9 	beq.w	80068fc <_printf_i+0x1d4>
 800674a:	2f58      	cmp	r7, #88	; 0x58
 800674c:	f000 80a4 	beq.w	8006898 <_printf_i+0x170>
 8006750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006758:	e03a      	b.n	80067d0 <_printf_i+0xa8>
 800675a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800675e:	2b15      	cmp	r3, #21
 8006760:	d8f6      	bhi.n	8006750 <_printf_i+0x28>
 8006762:	a101      	add	r1, pc, #4	; (adr r1, 8006768 <_printf_i+0x40>)
 8006764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067d5 	.word	0x080067d5
 8006770:	08006751 	.word	0x08006751
 8006774:	08006751 	.word	0x08006751
 8006778:	08006751 	.word	0x08006751
 800677c:	08006751 	.word	0x08006751
 8006780:	080067d5 	.word	0x080067d5
 8006784:	08006751 	.word	0x08006751
 8006788:	08006751 	.word	0x08006751
 800678c:	08006751 	.word	0x08006751
 8006790:	08006751 	.word	0x08006751
 8006794:	080068e3 	.word	0x080068e3
 8006798:	08006805 	.word	0x08006805
 800679c:	080068c5 	.word	0x080068c5
 80067a0:	08006751 	.word	0x08006751
 80067a4:	08006751 	.word	0x08006751
 80067a8:	08006905 	.word	0x08006905
 80067ac:	08006751 	.word	0x08006751
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006751 	.word	0x08006751
 80067b8:	08006751 	.word	0x08006751
 80067bc:	080068cd 	.word	0x080068cd
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	602a      	str	r2, [r5, #0]
 80067c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0a4      	b.n	800691e <_printf_i+0x1f6>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	6829      	ldr	r1, [r5, #0]
 80067d8:	0606      	lsls	r6, r0, #24
 80067da:	f101 0304 	add.w	r3, r1, #4
 80067de:	d50a      	bpl.n	80067f6 <_printf_i+0xce>
 80067e0:	680e      	ldr	r6, [r1, #0]
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	2e00      	cmp	r6, #0
 80067e6:	da03      	bge.n	80067f0 <_printf_i+0xc8>
 80067e8:	232d      	movs	r3, #45	; 0x2d
 80067ea:	4276      	negs	r6, r6
 80067ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f0:	230a      	movs	r3, #10
 80067f2:	485e      	ldr	r0, [pc, #376]	; (800696c <_printf_i+0x244>)
 80067f4:	e019      	b.n	800682a <_printf_i+0x102>
 80067f6:	680e      	ldr	r6, [r1, #0]
 80067f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	bf18      	it	ne
 8006800:	b236      	sxthne	r6, r6
 8006802:	e7ef      	b.n	80067e4 <_printf_i+0xbc>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	6820      	ldr	r0, [r4, #0]
 8006808:	1d19      	adds	r1, r3, #4
 800680a:	6029      	str	r1, [r5, #0]
 800680c:	0601      	lsls	r1, r0, #24
 800680e:	d501      	bpl.n	8006814 <_printf_i+0xec>
 8006810:	681e      	ldr	r6, [r3, #0]
 8006812:	e002      	b.n	800681a <_printf_i+0xf2>
 8006814:	0646      	lsls	r6, r0, #25
 8006816:	d5fb      	bpl.n	8006810 <_printf_i+0xe8>
 8006818:	881e      	ldrh	r6, [r3, #0]
 800681a:	2f6f      	cmp	r7, #111	; 0x6f
 800681c:	bf0c      	ite	eq
 800681e:	2308      	moveq	r3, #8
 8006820:	230a      	movne	r3, #10
 8006822:	4852      	ldr	r0, [pc, #328]	; (800696c <_printf_i+0x244>)
 8006824:	2100      	movs	r1, #0
 8006826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800682a:	6865      	ldr	r5, [r4, #4]
 800682c:	2d00      	cmp	r5, #0
 800682e:	bfa8      	it	ge
 8006830:	6821      	ldrge	r1, [r4, #0]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	bfa4      	itt	ge
 8006836:	f021 0104 	bicge.w	r1, r1, #4
 800683a:	6021      	strge	r1, [r4, #0]
 800683c:	b90e      	cbnz	r6, 8006842 <_printf_i+0x11a>
 800683e:	2d00      	cmp	r5, #0
 8006840:	d04d      	beq.n	80068de <_printf_i+0x1b6>
 8006842:	4615      	mov	r5, r2
 8006844:	fbb6 f1f3 	udiv	r1, r6, r3
 8006848:	fb03 6711 	mls	r7, r3, r1, r6
 800684c:	5dc7      	ldrb	r7, [r0, r7]
 800684e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006852:	4637      	mov	r7, r6
 8006854:	42bb      	cmp	r3, r7
 8006856:	460e      	mov	r6, r1
 8006858:	d9f4      	bls.n	8006844 <_printf_i+0x11c>
 800685a:	2b08      	cmp	r3, #8
 800685c:	d10b      	bne.n	8006876 <_printf_i+0x14e>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	07de      	lsls	r6, r3, #31
 8006862:	d508      	bpl.n	8006876 <_printf_i+0x14e>
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	6861      	ldr	r1, [r4, #4]
 8006868:	4299      	cmp	r1, r3
 800686a:	bfde      	ittt	le
 800686c:	2330      	movle	r3, #48	; 0x30
 800686e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006872:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006876:	1b52      	subs	r2, r2, r5
 8006878:	6122      	str	r2, [r4, #16]
 800687a:	464b      	mov	r3, r9
 800687c:	4621      	mov	r1, r4
 800687e:	4640      	mov	r0, r8
 8006880:	f8cd a000 	str.w	sl, [sp]
 8006884:	aa03      	add	r2, sp, #12
 8006886:	f7ff fedf 	bl	8006648 <_printf_common>
 800688a:	3001      	adds	r0, #1
 800688c:	d14c      	bne.n	8006928 <_printf_i+0x200>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	b004      	add	sp, #16
 8006894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006898:	4834      	ldr	r0, [pc, #208]	; (800696c <_printf_i+0x244>)
 800689a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800689e:	6829      	ldr	r1, [r5, #0]
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80068a6:	6029      	str	r1, [r5, #0]
 80068a8:	061d      	lsls	r5, r3, #24
 80068aa:	d514      	bpl.n	80068d6 <_printf_i+0x1ae>
 80068ac:	07df      	lsls	r7, r3, #31
 80068ae:	bf44      	itt	mi
 80068b0:	f043 0320 	orrmi.w	r3, r3, #32
 80068b4:	6023      	strmi	r3, [r4, #0]
 80068b6:	b91e      	cbnz	r6, 80068c0 <_printf_i+0x198>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	2310      	movs	r3, #16
 80068c2:	e7af      	b.n	8006824 <_printf_i+0xfc>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f043 0320 	orr.w	r3, r3, #32
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	2378      	movs	r3, #120	; 0x78
 80068ce:	4828      	ldr	r0, [pc, #160]	; (8006970 <_printf_i+0x248>)
 80068d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068d4:	e7e3      	b.n	800689e <_printf_i+0x176>
 80068d6:	0659      	lsls	r1, r3, #25
 80068d8:	bf48      	it	mi
 80068da:	b2b6      	uxthmi	r6, r6
 80068dc:	e7e6      	b.n	80068ac <_printf_i+0x184>
 80068de:	4615      	mov	r5, r2
 80068e0:	e7bb      	b.n	800685a <_printf_i+0x132>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	6826      	ldr	r6, [r4, #0]
 80068e6:	1d18      	adds	r0, r3, #4
 80068e8:	6961      	ldr	r1, [r4, #20]
 80068ea:	6028      	str	r0, [r5, #0]
 80068ec:	0635      	lsls	r5, r6, #24
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	d501      	bpl.n	80068f6 <_printf_i+0x1ce>
 80068f2:	6019      	str	r1, [r3, #0]
 80068f4:	e002      	b.n	80068fc <_printf_i+0x1d4>
 80068f6:	0670      	lsls	r0, r6, #25
 80068f8:	d5fb      	bpl.n	80068f2 <_printf_i+0x1ca>
 80068fa:	8019      	strh	r1, [r3, #0]
 80068fc:	2300      	movs	r3, #0
 80068fe:	4615      	mov	r5, r2
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	e7ba      	b.n	800687a <_printf_i+0x152>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	2100      	movs	r1, #0
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	6862      	ldr	r2, [r4, #4]
 8006910:	4628      	mov	r0, r5
 8006912:	f002 faef 	bl	8008ef4 <memchr>
 8006916:	b108      	cbz	r0, 800691c <_printf_i+0x1f4>
 8006918:	1b40      	subs	r0, r0, r5
 800691a:	6060      	str	r0, [r4, #4]
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	2300      	movs	r3, #0
 8006922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006926:	e7a8      	b.n	800687a <_printf_i+0x152>
 8006928:	462a      	mov	r2, r5
 800692a:	4649      	mov	r1, r9
 800692c:	4640      	mov	r0, r8
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	47d0      	blx	sl
 8006932:	3001      	adds	r0, #1
 8006934:	d0ab      	beq.n	800688e <_printf_i+0x166>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	079b      	lsls	r3, r3, #30
 800693a:	d413      	bmi.n	8006964 <_printf_i+0x23c>
 800693c:	68e0      	ldr	r0, [r4, #12]
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	4298      	cmp	r0, r3
 8006942:	bfb8      	it	lt
 8006944:	4618      	movlt	r0, r3
 8006946:	e7a4      	b.n	8006892 <_printf_i+0x16a>
 8006948:	2301      	movs	r3, #1
 800694a:	4632      	mov	r2, r6
 800694c:	4649      	mov	r1, r9
 800694e:	4640      	mov	r0, r8
 8006950:	47d0      	blx	sl
 8006952:	3001      	adds	r0, #1
 8006954:	d09b      	beq.n	800688e <_printf_i+0x166>
 8006956:	3501      	adds	r5, #1
 8006958:	68e3      	ldr	r3, [r4, #12]
 800695a:	9903      	ldr	r1, [sp, #12]
 800695c:	1a5b      	subs	r3, r3, r1
 800695e:	42ab      	cmp	r3, r5
 8006960:	dcf2      	bgt.n	8006948 <_printf_i+0x220>
 8006962:	e7eb      	b.n	800693c <_printf_i+0x214>
 8006964:	2500      	movs	r5, #0
 8006966:	f104 0619 	add.w	r6, r4, #25
 800696a:	e7f5      	b.n	8006958 <_printf_i+0x230>
 800696c:	0800a9a6 	.word	0x0800a9a6
 8006970:	0800a9b7 	.word	0x0800a9b7

08006974 <_scanf_float>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	b087      	sub	sp, #28
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	688b      	ldr	r3, [r1, #8]
 800697e:	4617      	mov	r7, r2
 8006980:	1e5a      	subs	r2, r3, #1
 8006982:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006986:	bf85      	ittet	hi
 8006988:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800698c:	195b      	addhi	r3, r3, r5
 800698e:	2300      	movls	r3, #0
 8006990:	9302      	strhi	r3, [sp, #8]
 8006992:	bf88      	it	hi
 8006994:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006998:	468b      	mov	fp, r1
 800699a:	f04f 0500 	mov.w	r5, #0
 800699e:	bf8c      	ite	hi
 80069a0:	608b      	strhi	r3, [r1, #8]
 80069a2:	9302      	strls	r3, [sp, #8]
 80069a4:	680b      	ldr	r3, [r1, #0]
 80069a6:	4680      	mov	r8, r0
 80069a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80069ac:	f84b 3b1c 	str.w	r3, [fp], #28
 80069b0:	460c      	mov	r4, r1
 80069b2:	465e      	mov	r6, fp
 80069b4:	46aa      	mov	sl, r5
 80069b6:	46a9      	mov	r9, r5
 80069b8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069bc:	9501      	str	r5, [sp, #4]
 80069be:	68a2      	ldr	r2, [r4, #8]
 80069c0:	b152      	cbz	r2, 80069d8 <_scanf_float+0x64>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b4e      	cmp	r3, #78	; 0x4e
 80069c8:	d864      	bhi.n	8006a94 <_scanf_float+0x120>
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d83c      	bhi.n	8006a48 <_scanf_float+0xd4>
 80069ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069d2:	b2c8      	uxtb	r0, r1
 80069d4:	280e      	cmp	r0, #14
 80069d6:	d93a      	bls.n	8006a4e <_scanf_float+0xda>
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	d003      	beq.n	80069e6 <_scanf_float+0x72>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ea:	f1ba 0f01 	cmp.w	sl, #1
 80069ee:	f200 8113 	bhi.w	8006c18 <_scanf_float+0x2a4>
 80069f2:	455e      	cmp	r6, fp
 80069f4:	f200 8105 	bhi.w	8006c02 <_scanf_float+0x28e>
 80069f8:	2501      	movs	r5, #1
 80069fa:	4628      	mov	r0, r5
 80069fc:	b007      	add	sp, #28
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a06:	2a0d      	cmp	r2, #13
 8006a08:	d8e6      	bhi.n	80069d8 <_scanf_float+0x64>
 8006a0a:	a101      	add	r1, pc, #4	; (adr r1, 8006a10 <_scanf_float+0x9c>)
 8006a0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a10:	08006b4f 	.word	0x08006b4f
 8006a14:	080069d9 	.word	0x080069d9
 8006a18:	080069d9 	.word	0x080069d9
 8006a1c:	080069d9 	.word	0x080069d9
 8006a20:	08006baf 	.word	0x08006baf
 8006a24:	08006b87 	.word	0x08006b87
 8006a28:	080069d9 	.word	0x080069d9
 8006a2c:	080069d9 	.word	0x080069d9
 8006a30:	08006b5d 	.word	0x08006b5d
 8006a34:	080069d9 	.word	0x080069d9
 8006a38:	080069d9 	.word	0x080069d9
 8006a3c:	080069d9 	.word	0x080069d9
 8006a40:	080069d9 	.word	0x080069d9
 8006a44:	08006b15 	.word	0x08006b15
 8006a48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a4c:	e7db      	b.n	8006a06 <_scanf_float+0x92>
 8006a4e:	290e      	cmp	r1, #14
 8006a50:	d8c2      	bhi.n	80069d8 <_scanf_float+0x64>
 8006a52:	a001      	add	r0, pc, #4	; (adr r0, 8006a58 <_scanf_float+0xe4>)
 8006a54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a58:	08006b07 	.word	0x08006b07
 8006a5c:	080069d9 	.word	0x080069d9
 8006a60:	08006b07 	.word	0x08006b07
 8006a64:	08006b9b 	.word	0x08006b9b
 8006a68:	080069d9 	.word	0x080069d9
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006af1 	.word	0x08006af1
 8006a74:	08006af1 	.word	0x08006af1
 8006a78:	08006af1 	.word	0x08006af1
 8006a7c:	08006af1 	.word	0x08006af1
 8006a80:	08006af1 	.word	0x08006af1
 8006a84:	08006af1 	.word	0x08006af1
 8006a88:	08006af1 	.word	0x08006af1
 8006a8c:	08006af1 	.word	0x08006af1
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	2b6e      	cmp	r3, #110	; 0x6e
 8006a96:	d809      	bhi.n	8006aac <_scanf_float+0x138>
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d8b2      	bhi.n	8006a02 <_scanf_float+0x8e>
 8006a9c:	2b54      	cmp	r3, #84	; 0x54
 8006a9e:	d077      	beq.n	8006b90 <_scanf_float+0x21c>
 8006aa0:	2b59      	cmp	r3, #89	; 0x59
 8006aa2:	d199      	bne.n	80069d8 <_scanf_float+0x64>
 8006aa4:	2d07      	cmp	r5, #7
 8006aa6:	d197      	bne.n	80069d8 <_scanf_float+0x64>
 8006aa8:	2508      	movs	r5, #8
 8006aaa:	e029      	b.n	8006b00 <_scanf_float+0x18c>
 8006aac:	2b74      	cmp	r3, #116	; 0x74
 8006aae:	d06f      	beq.n	8006b90 <_scanf_float+0x21c>
 8006ab0:	2b79      	cmp	r3, #121	; 0x79
 8006ab2:	e7f6      	b.n	8006aa2 <_scanf_float+0x12e>
 8006ab4:	6821      	ldr	r1, [r4, #0]
 8006ab6:	05c8      	lsls	r0, r1, #23
 8006ab8:	d51a      	bpl.n	8006af0 <_scanf_float+0x17c>
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ac0:	6021      	str	r1, [r4, #0]
 8006ac2:	f109 0901 	add.w	r9, r9, #1
 8006ac6:	b11b      	cbz	r3, 8006ad0 <_scanf_float+0x15c>
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	3201      	adds	r2, #1
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	60a2      	str	r2, [r4, #8]
 8006ad0:	68a3      	ldr	r3, [r4, #8]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	60a3      	str	r3, [r4, #8]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	f340 8084 	ble.w	8006bf0 <_scanf_float+0x27c>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	3301      	adds	r3, #1
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	e766      	b.n	80069be <_scanf_float+0x4a>
 8006af0:	eb1a 0f05 	cmn.w	sl, r5
 8006af4:	f47f af70 	bne.w	80069d8 <_scanf_float+0x64>
 8006af8:	6822      	ldr	r2, [r4, #0]
 8006afa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	f806 3b01 	strb.w	r3, [r6], #1
 8006b04:	e7e4      	b.n	8006ad0 <_scanf_float+0x15c>
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	0610      	lsls	r0, r2, #24
 8006b0a:	f57f af65 	bpl.w	80069d8 <_scanf_float+0x64>
 8006b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b12:	e7f4      	b.n	8006afe <_scanf_float+0x18a>
 8006b14:	f1ba 0f00 	cmp.w	sl, #0
 8006b18:	d10e      	bne.n	8006b38 <_scanf_float+0x1c4>
 8006b1a:	f1b9 0f00 	cmp.w	r9, #0
 8006b1e:	d10e      	bne.n	8006b3e <_scanf_float+0x1ca>
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b2a:	d108      	bne.n	8006b3e <_scanf_float+0x1ca>
 8006b2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b30:	f04f 0a01 	mov.w	sl, #1
 8006b34:	6022      	str	r2, [r4, #0]
 8006b36:	e7e3      	b.n	8006b00 <_scanf_float+0x18c>
 8006b38:	f1ba 0f02 	cmp.w	sl, #2
 8006b3c:	d055      	beq.n	8006bea <_scanf_float+0x276>
 8006b3e:	2d01      	cmp	r5, #1
 8006b40:	d002      	beq.n	8006b48 <_scanf_float+0x1d4>
 8006b42:	2d04      	cmp	r5, #4
 8006b44:	f47f af48 	bne.w	80069d8 <_scanf_float+0x64>
 8006b48:	3501      	adds	r5, #1
 8006b4a:	b2ed      	uxtb	r5, r5
 8006b4c:	e7d8      	b.n	8006b00 <_scanf_float+0x18c>
 8006b4e:	f1ba 0f01 	cmp.w	sl, #1
 8006b52:	f47f af41 	bne.w	80069d8 <_scanf_float+0x64>
 8006b56:	f04f 0a02 	mov.w	sl, #2
 8006b5a:	e7d1      	b.n	8006b00 <_scanf_float+0x18c>
 8006b5c:	b97d      	cbnz	r5, 8006b7e <_scanf_float+0x20a>
 8006b5e:	f1b9 0f00 	cmp.w	r9, #0
 8006b62:	f47f af3c 	bne.w	80069de <_scanf_float+0x6a>
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b70:	f47f af39 	bne.w	80069e6 <_scanf_float+0x72>
 8006b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b78:	2501      	movs	r5, #1
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	e7c0      	b.n	8006b00 <_scanf_float+0x18c>
 8006b7e:	2d03      	cmp	r5, #3
 8006b80:	d0e2      	beq.n	8006b48 <_scanf_float+0x1d4>
 8006b82:	2d05      	cmp	r5, #5
 8006b84:	e7de      	b.n	8006b44 <_scanf_float+0x1d0>
 8006b86:	2d02      	cmp	r5, #2
 8006b88:	f47f af26 	bne.w	80069d8 <_scanf_float+0x64>
 8006b8c:	2503      	movs	r5, #3
 8006b8e:	e7b7      	b.n	8006b00 <_scanf_float+0x18c>
 8006b90:	2d06      	cmp	r5, #6
 8006b92:	f47f af21 	bne.w	80069d8 <_scanf_float+0x64>
 8006b96:	2507      	movs	r5, #7
 8006b98:	e7b2      	b.n	8006b00 <_scanf_float+0x18c>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	0591      	lsls	r1, r2, #22
 8006b9e:	f57f af1b 	bpl.w	80069d8 <_scanf_float+0x64>
 8006ba2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bac:	e7a8      	b.n	8006b00 <_scanf_float+0x18c>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006bb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006bb8:	d006      	beq.n	8006bc8 <_scanf_float+0x254>
 8006bba:	0550      	lsls	r0, r2, #21
 8006bbc:	f57f af0c 	bpl.w	80069d8 <_scanf_float+0x64>
 8006bc0:	f1b9 0f00 	cmp.w	r9, #0
 8006bc4:	f43f af0f 	beq.w	80069e6 <_scanf_float+0x72>
 8006bc8:	0591      	lsls	r1, r2, #22
 8006bca:	bf58      	it	pl
 8006bcc:	9901      	ldrpl	r1, [sp, #4]
 8006bce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bd2:	bf58      	it	pl
 8006bd4:	eba9 0101 	subpl.w	r1, r9, r1
 8006bd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bdc:	f04f 0900 	mov.w	r9, #0
 8006be0:	bf58      	it	pl
 8006be2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	e78a      	b.n	8006b00 <_scanf_float+0x18c>
 8006bea:	f04f 0a03 	mov.w	sl, #3
 8006bee:	e787      	b.n	8006b00 <_scanf_float+0x18c>
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bf8:	4798      	blx	r3
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f43f aedf 	beq.w	80069be <_scanf_float+0x4a>
 8006c00:	e6ea      	b.n	80069d8 <_scanf_float+0x64>
 8006c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c06:	463a      	mov	r2, r7
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c0e:	4798      	blx	r3
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	e6ec      	b.n	80069f2 <_scanf_float+0x7e>
 8006c18:	1e6b      	subs	r3, r5, #1
 8006c1a:	2b06      	cmp	r3, #6
 8006c1c:	d825      	bhi.n	8006c6a <_scanf_float+0x2f6>
 8006c1e:	2d02      	cmp	r5, #2
 8006c20:	d836      	bhi.n	8006c90 <_scanf_float+0x31c>
 8006c22:	455e      	cmp	r6, fp
 8006c24:	f67f aee8 	bls.w	80069f8 <_scanf_float+0x84>
 8006c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c34:	4798      	blx	r3
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	e7f1      	b.n	8006c22 <_scanf_float+0x2ae>
 8006c3e:	9802      	ldr	r0, [sp, #8]
 8006c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c48:	463a      	mov	r2, r7
 8006c4a:	9002      	str	r0, [sp, #8]
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4798      	blx	r3
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c5a:	fa5f fa8a 	uxtb.w	sl, sl
 8006c5e:	f1ba 0f02 	cmp.w	sl, #2
 8006c62:	d1ec      	bne.n	8006c3e <_scanf_float+0x2ca>
 8006c64:	3d03      	subs	r5, #3
 8006c66:	b2ed      	uxtb	r5, r5
 8006c68:	1b76      	subs	r6, r6, r5
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	05da      	lsls	r2, r3, #23
 8006c6e:	d52f      	bpl.n	8006cd0 <_scanf_float+0x35c>
 8006c70:	055b      	lsls	r3, r3, #21
 8006c72:	d510      	bpl.n	8006c96 <_scanf_float+0x322>
 8006c74:	455e      	cmp	r6, fp
 8006c76:	f67f aebf 	bls.w	80069f8 <_scanf_float+0x84>
 8006c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c7e:	463a      	mov	r2, r7
 8006c80:	4640      	mov	r0, r8
 8006c82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c86:	4798      	blx	r3
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	e7f1      	b.n	8006c74 <_scanf_float+0x300>
 8006c90:	46aa      	mov	sl, r5
 8006c92:	9602      	str	r6, [sp, #8]
 8006c94:	e7df      	b.n	8006c56 <_scanf_float+0x2e2>
 8006c96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	2965      	cmp	r1, #101	; 0x65
 8006c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ca2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	d00c      	beq.n	8006cc4 <_scanf_float+0x350>
 8006caa:	2945      	cmp	r1, #69	; 0x45
 8006cac:	d00a      	beq.n	8006cc4 <_scanf_float+0x350>
 8006cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb2:	463a      	mov	r2, r7
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4798      	blx	r3
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	1eb5      	subs	r5, r6, #2
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ccc:	4798      	blx	r3
 8006cce:	462e      	mov	r6, r5
 8006cd0:	6825      	ldr	r5, [r4, #0]
 8006cd2:	f015 0510 	ands.w	r5, r5, #16
 8006cd6:	d155      	bne.n	8006d84 <_scanf_float+0x410>
 8006cd8:	7035      	strb	r5, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce4:	d11b      	bne.n	8006d1e <_scanf_float+0x3aa>
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	454b      	cmp	r3, r9
 8006cea:	eba3 0209 	sub.w	r2, r3, r9
 8006cee:	d123      	bne.n	8006d38 <_scanf_float+0x3c4>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	f000 fe7b 	bl	80079f0 <_strtod_r>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	f012 0f02 	tst.w	r2, #2
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	d021      	beq.n	8006d4e <_scanf_float+0x3da>
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	9903      	ldr	r1, [sp, #12]
 8006d0e:	600a      	str	r2, [r1, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	e9c3 6700 	strd	r6, r7, [r3]
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	60e3      	str	r3, [r4, #12]
 8006d1c:	e66d      	b.n	80069fa <_scanf_float+0x86>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0e5      	beq.n	8006cf0 <_scanf_float+0x37c>
 8006d24:	9905      	ldr	r1, [sp, #20]
 8006d26:	230a      	movs	r3, #10
 8006d28:	462a      	mov	r2, r5
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	3101      	adds	r1, #1
 8006d2e:	f000 fee1 	bl	8007af4 <_strtol_r>
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	9e05      	ldr	r6, [sp, #20]
 8006d36:	1ac2      	subs	r2, r0, r3
 8006d38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d3c:	429e      	cmp	r6, r3
 8006d3e:	bf28      	it	cs
 8006d40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d44:	4630      	mov	r0, r6
 8006d46:	4910      	ldr	r1, [pc, #64]	; (8006d88 <_scanf_float+0x414>)
 8006d48:	f000 f826 	bl	8006d98 <siprintf>
 8006d4c:	e7d0      	b.n	8006cf0 <_scanf_float+0x37c>
 8006d4e:	f012 0f04 	tst.w	r2, #4
 8006d52:	f103 0204 	add.w	r2, r3, #4
 8006d56:	d1d9      	bne.n	8006d0c <_scanf_float+0x398>
 8006d58:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006d5c:	f8cc 2000 	str.w	r2, [ip]
 8006d60:	f8d3 8000 	ldr.w	r8, [r3]
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	f7f9 febc 	bl	8000ae4 <__aeabi_dcmpun>
 8006d6c:	b128      	cbz	r0, 8006d7a <_scanf_float+0x406>
 8006d6e:	4807      	ldr	r0, [pc, #28]	; (8006d8c <_scanf_float+0x418>)
 8006d70:	f000 f80e 	bl	8006d90 <nanf>
 8006d74:	f8c8 0000 	str.w	r0, [r8]
 8006d78:	e7cd      	b.n	8006d16 <_scanf_float+0x3a2>
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 ff0f 	bl	8000ba0 <__aeabi_d2f>
 8006d82:	e7f7      	b.n	8006d74 <_scanf_float+0x400>
 8006d84:	2500      	movs	r5, #0
 8006d86:	e638      	b.n	80069fa <_scanf_float+0x86>
 8006d88:	0800a9c8 	.word	0x0800a9c8
 8006d8c:	0800add0 	.word	0x0800add0

08006d90 <nanf>:
 8006d90:	4800      	ldr	r0, [pc, #0]	; (8006d94 <nanf+0x4>)
 8006d92:	4770      	bx	lr
 8006d94:	7fc00000 	.word	0x7fc00000

08006d98 <siprintf>:
 8006d98:	b40e      	push	{r1, r2, r3}
 8006d9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d9e:	b500      	push	{lr}
 8006da0:	b09c      	sub	sp, #112	; 0x70
 8006da2:	ab1d      	add	r3, sp, #116	; 0x74
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	9006      	str	r0, [sp, #24]
 8006da8:	9107      	str	r1, [sp, #28]
 8006daa:	9104      	str	r1, [sp, #16]
 8006dac:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <siprintf+0x38>)
 8006dae:	4909      	ldr	r1, [pc, #36]	; (8006dd4 <siprintf+0x3c>)
 8006db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	a902      	add	r1, sp, #8
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	f002 feba 	bl	8009b34 <_svfiprintf_r>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	b01c      	add	sp, #112	; 0x70
 8006dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dcc:	b003      	add	sp, #12
 8006dce:	4770      	bx	lr
 8006dd0:	2000000c 	.word	0x2000000c
 8006dd4:	ffff0208 	.word	0xffff0208

08006dd8 <sulp>:
 8006dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	460f      	mov	r7, r1
 8006dde:	4690      	mov	r8, r2
 8006de0:	f002 fc14 	bl	800960c <__ulp>
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d011      	beq.n	8006e12 <sulp+0x3a>
 8006dee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006df2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd0b      	ble.n	8006e12 <sulp+0x3a>
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	051b      	lsls	r3, r3, #20
 8006dfe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	f7f9 fbd1 	bl	80005b0 <__aeabi_dmul>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1a:	0000      	movs	r0, r0
 8006e1c:	0000      	movs	r0, r0
	...

08006e20 <_strtod_l>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	469b      	mov	fp, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	b09f      	sub	sp, #124	; 0x7c
 8006e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e2c:	4b9e      	ldr	r3, [pc, #632]	; (80070a8 <_strtod_l+0x288>)
 8006e2e:	4682      	mov	sl, r0
 8006e30:	681f      	ldr	r7, [r3, #0]
 8006e32:	460e      	mov	r6, r1
 8006e34:	4638      	mov	r0, r7
 8006e36:	9215      	str	r2, [sp, #84]	; 0x54
 8006e38:	f7f9 f9f6 	bl	8000228 <strlen>
 8006e3c:	f04f 0800 	mov.w	r8, #0
 8006e40:	4604      	mov	r4, r0
 8006e42:	f04f 0900 	mov.w	r9, #0
 8006e46:	9619      	str	r6, [sp, #100]	; 0x64
 8006e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e4e:	d04c      	beq.n	8006eea <_strtod_l+0xca>
 8006e50:	d83a      	bhi.n	8006ec8 <_strtod_l+0xa8>
 8006e52:	2a0d      	cmp	r2, #13
 8006e54:	d833      	bhi.n	8006ebe <_strtod_l+0x9e>
 8006e56:	2a08      	cmp	r2, #8
 8006e58:	d833      	bhi.n	8006ec2 <_strtod_l+0xa2>
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	d03d      	beq.n	8006eda <_strtod_l+0xba>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	930a      	str	r3, [sp, #40]	; 0x28
 8006e62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006e64:	782b      	ldrb	r3, [r5, #0]
 8006e66:	2b30      	cmp	r3, #48	; 0x30
 8006e68:	f040 80aa 	bne.w	8006fc0 <_strtod_l+0x1a0>
 8006e6c:	786b      	ldrb	r3, [r5, #1]
 8006e6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e72:	2b58      	cmp	r3, #88	; 0x58
 8006e74:	d166      	bne.n	8006f44 <_strtod_l+0x124>
 8006e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e78:	4650      	mov	r0, sl
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	ab1a      	add	r3, sp, #104	; 0x68
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	4a8a      	ldr	r2, [pc, #552]	; (80070ac <_strtod_l+0x28c>)
 8006e82:	f8cd b008 	str.w	fp, [sp, #8]
 8006e86:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e88:	a919      	add	r1, sp, #100	; 0x64
 8006e8a:	f001 fd17 	bl	80088bc <__gethex>
 8006e8e:	f010 0607 	ands.w	r6, r0, #7
 8006e92:	4604      	mov	r4, r0
 8006e94:	d005      	beq.n	8006ea2 <_strtod_l+0x82>
 8006e96:	2e06      	cmp	r6, #6
 8006e98:	d129      	bne.n	8006eee <_strtod_l+0xce>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	9519      	str	r5, [sp, #100]	; 0x64
 8006ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 858a 	bne.w	80079be <_strtod_l+0xb9e>
 8006eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eac:	b1d3      	cbz	r3, 8006ee4 <_strtod_l+0xc4>
 8006eae:	4642      	mov	r2, r8
 8006eb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	b01f      	add	sp, #124	; 0x7c
 8006eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebe:	2a20      	cmp	r2, #32
 8006ec0:	d1cd      	bne.n	8006e5e <_strtod_l+0x3e>
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	9319      	str	r3, [sp, #100]	; 0x64
 8006ec6:	e7bf      	b.n	8006e48 <_strtod_l+0x28>
 8006ec8:	2a2d      	cmp	r2, #45	; 0x2d
 8006eca:	d1c8      	bne.n	8006e5e <_strtod_l+0x3e>
 8006ecc:	2201      	movs	r2, #1
 8006ece:	920a      	str	r2, [sp, #40]	; 0x28
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	9219      	str	r2, [sp, #100]	; 0x64
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1c3      	bne.n	8006e62 <_strtod_l+0x42>
 8006eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006edc:	9619      	str	r6, [sp, #100]	; 0x64
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 856b 	bne.w	80079ba <_strtod_l+0xb9a>
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	e7e4      	b.n	8006eb4 <_strtod_l+0x94>
 8006eea:	2200      	movs	r2, #0
 8006eec:	e7ef      	b.n	8006ece <_strtod_l+0xae>
 8006eee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ef0:	b13a      	cbz	r2, 8006f02 <_strtod_l+0xe2>
 8006ef2:	2135      	movs	r1, #53	; 0x35
 8006ef4:	a81c      	add	r0, sp, #112	; 0x70
 8006ef6:	f002 fc8d 	bl	8009814 <__copybits>
 8006efa:	4650      	mov	r0, sl
 8006efc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006efe:	f002 f855 	bl	8008fac <_Bfree>
 8006f02:	3e01      	subs	r6, #1
 8006f04:	2e04      	cmp	r6, #4
 8006f06:	d806      	bhi.n	8006f16 <_strtod_l+0xf6>
 8006f08:	e8df f006 	tbb	[pc, r6]
 8006f0c:	1714030a 	.word	0x1714030a
 8006f10:	0a          	.byte	0x0a
 8006f11:	00          	.byte	0x00
 8006f12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006f16:	0721      	lsls	r1, r4, #28
 8006f18:	d5c3      	bpl.n	8006ea2 <_strtod_l+0x82>
 8006f1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006f1e:	e7c0      	b.n	8006ea2 <_strtod_l+0x82>
 8006f20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f32:	e7f0      	b.n	8006f16 <_strtod_l+0xf6>
 8006f34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80070b0 <_strtod_l+0x290>
 8006f38:	e7ed      	b.n	8006f16 <_strtod_l+0xf6>
 8006f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f3e:	f04f 38ff 	mov.w	r8, #4294967295
 8006f42:	e7e8      	b.n	8006f16 <_strtod_l+0xf6>
 8006f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	9219      	str	r2, [sp, #100]	; 0x64
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b30      	cmp	r3, #48	; 0x30
 8006f4e:	d0f9      	beq.n	8006f44 <_strtod_l+0x124>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0a6      	beq.n	8006ea2 <_strtod_l+0x82>
 8006f54:	2301      	movs	r3, #1
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	9308      	str	r3, [sp, #32]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	469b      	mov	fp, r3
 8006f62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006f66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f68:	7805      	ldrb	r5, [r0, #0]
 8006f6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	2909      	cmp	r1, #9
 8006f72:	d927      	bls.n	8006fc4 <_strtod_l+0x1a4>
 8006f74:	4622      	mov	r2, r4
 8006f76:	4639      	mov	r1, r7
 8006f78:	f002 fef2 	bl	8009d60 <strncmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d033      	beq.n	8006fe8 <_strtod_l+0x1c8>
 8006f80:	2000      	movs	r0, #0
 8006f82:	462a      	mov	r2, r5
 8006f84:	465c      	mov	r4, fp
 8006f86:	4603      	mov	r3, r0
 8006f88:	9004      	str	r0, [sp, #16]
 8006f8a:	2a65      	cmp	r2, #101	; 0x65
 8006f8c:	d001      	beq.n	8006f92 <_strtod_l+0x172>
 8006f8e:	2a45      	cmp	r2, #69	; 0x45
 8006f90:	d114      	bne.n	8006fbc <_strtod_l+0x19c>
 8006f92:	b91c      	cbnz	r4, 8006f9c <_strtod_l+0x17c>
 8006f94:	9a07      	ldr	r2, [sp, #28]
 8006f96:	4302      	orrs	r2, r0
 8006f98:	d09f      	beq.n	8006eda <_strtod_l+0xba>
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f9e:	1c72      	adds	r2, r6, #1
 8006fa0:	9219      	str	r2, [sp, #100]	; 0x64
 8006fa2:	7872      	ldrb	r2, [r6, #1]
 8006fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8006fa6:	d079      	beq.n	800709c <_strtod_l+0x27c>
 8006fa8:	2a2d      	cmp	r2, #45	; 0x2d
 8006faa:	f000 8083 	beq.w	80070b4 <_strtod_l+0x294>
 8006fae:	2700      	movs	r7, #0
 8006fb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fb4:	2909      	cmp	r1, #9
 8006fb6:	f240 8083 	bls.w	80070c0 <_strtod_l+0x2a0>
 8006fba:	9619      	str	r6, [sp, #100]	; 0x64
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	e09f      	b.n	8007100 <_strtod_l+0x2e0>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e7c8      	b.n	8006f56 <_strtod_l+0x136>
 8006fc4:	f1bb 0f08 	cmp.w	fp, #8
 8006fc8:	bfd5      	itete	le
 8006fca:	9906      	ldrle	r1, [sp, #24]
 8006fcc:	9905      	ldrgt	r1, [sp, #20]
 8006fce:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fd6:	f100 0001 	add.w	r0, r0, #1
 8006fda:	bfd4      	ite	le
 8006fdc:	9306      	strle	r3, [sp, #24]
 8006fde:	9305      	strgt	r3, [sp, #20]
 8006fe0:	f10b 0b01 	add.w	fp, fp, #1
 8006fe4:	9019      	str	r0, [sp, #100]	; 0x64
 8006fe6:	e7be      	b.n	8006f66 <_strtod_l+0x146>
 8006fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fea:	191a      	adds	r2, r3, r4
 8006fec:	9219      	str	r2, [sp, #100]	; 0x64
 8006fee:	5d1a      	ldrb	r2, [r3, r4]
 8006ff0:	f1bb 0f00 	cmp.w	fp, #0
 8006ff4:	d036      	beq.n	8007064 <_strtod_l+0x244>
 8006ff6:	465c      	mov	r4, fp
 8006ff8:	9004      	str	r0, [sp, #16]
 8006ffa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d912      	bls.n	8007028 <_strtod_l+0x208>
 8007002:	2301      	movs	r3, #1
 8007004:	e7c1      	b.n	8006f8a <_strtod_l+0x16a>
 8007006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007008:	3001      	adds	r0, #1
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	9219      	str	r2, [sp, #100]	; 0x64
 800700e:	785a      	ldrb	r2, [r3, #1]
 8007010:	2a30      	cmp	r2, #48	; 0x30
 8007012:	d0f8      	beq.n	8007006 <_strtod_l+0x1e6>
 8007014:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007018:	2b08      	cmp	r3, #8
 800701a:	f200 84d5 	bhi.w	80079c8 <_strtod_l+0xba8>
 800701e:	9004      	str	r0, [sp, #16]
 8007020:	2000      	movs	r0, #0
 8007022:	4604      	mov	r4, r0
 8007024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007026:	9308      	str	r3, [sp, #32]
 8007028:	3a30      	subs	r2, #48	; 0x30
 800702a:	f100 0301 	add.w	r3, r0, #1
 800702e:	d013      	beq.n	8007058 <_strtod_l+0x238>
 8007030:	9904      	ldr	r1, [sp, #16]
 8007032:	1905      	adds	r5, r0, r4
 8007034:	4419      	add	r1, r3
 8007036:	9104      	str	r1, [sp, #16]
 8007038:	4623      	mov	r3, r4
 800703a:	210a      	movs	r1, #10
 800703c:	42ab      	cmp	r3, r5
 800703e:	d113      	bne.n	8007068 <_strtod_l+0x248>
 8007040:	1823      	adds	r3, r4, r0
 8007042:	2b08      	cmp	r3, #8
 8007044:	f104 0401 	add.w	r4, r4, #1
 8007048:	4404      	add	r4, r0
 800704a:	dc1b      	bgt.n	8007084 <_strtod_l+0x264>
 800704c:	230a      	movs	r3, #10
 800704e:	9906      	ldr	r1, [sp, #24]
 8007050:	fb03 2301 	mla	r3, r3, r1, r2
 8007054:	9306      	str	r3, [sp, #24]
 8007056:	2300      	movs	r3, #0
 8007058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800705a:	4618      	mov	r0, r3
 800705c:	1c51      	adds	r1, r2, #1
 800705e:	9119      	str	r1, [sp, #100]	; 0x64
 8007060:	7852      	ldrb	r2, [r2, #1]
 8007062:	e7ca      	b.n	8006ffa <_strtod_l+0x1da>
 8007064:	4658      	mov	r0, fp
 8007066:	e7d3      	b.n	8007010 <_strtod_l+0x1f0>
 8007068:	2b08      	cmp	r3, #8
 800706a:	dc04      	bgt.n	8007076 <_strtod_l+0x256>
 800706c:	9f06      	ldr	r7, [sp, #24]
 800706e:	434f      	muls	r7, r1
 8007070:	9706      	str	r7, [sp, #24]
 8007072:	3301      	adds	r3, #1
 8007074:	e7e2      	b.n	800703c <_strtod_l+0x21c>
 8007076:	1c5f      	adds	r7, r3, #1
 8007078:	2f10      	cmp	r7, #16
 800707a:	bfde      	ittt	le
 800707c:	9f05      	ldrle	r7, [sp, #20]
 800707e:	434f      	mulle	r7, r1
 8007080:	9705      	strle	r7, [sp, #20]
 8007082:	e7f6      	b.n	8007072 <_strtod_l+0x252>
 8007084:	2c10      	cmp	r4, #16
 8007086:	bfdf      	itttt	le
 8007088:	230a      	movle	r3, #10
 800708a:	9905      	ldrle	r1, [sp, #20]
 800708c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007090:	9305      	strle	r3, [sp, #20]
 8007092:	e7e0      	b.n	8007056 <_strtod_l+0x236>
 8007094:	2300      	movs	r3, #0
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	2301      	movs	r3, #1
 800709a:	e77b      	b.n	8006f94 <_strtod_l+0x174>
 800709c:	2700      	movs	r7, #0
 800709e:	1cb2      	adds	r2, r6, #2
 80070a0:	9219      	str	r2, [sp, #100]	; 0x64
 80070a2:	78b2      	ldrb	r2, [r6, #2]
 80070a4:	e784      	b.n	8006fb0 <_strtod_l+0x190>
 80070a6:	bf00      	nop
 80070a8:	0800ac18 	.word	0x0800ac18
 80070ac:	0800a9d0 	.word	0x0800a9d0
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	2701      	movs	r7, #1
 80070b6:	e7f2      	b.n	800709e <_strtod_l+0x27e>
 80070b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070ba:	1c51      	adds	r1, r2, #1
 80070bc:	9119      	str	r1, [sp, #100]	; 0x64
 80070be:	7852      	ldrb	r2, [r2, #1]
 80070c0:	2a30      	cmp	r2, #48	; 0x30
 80070c2:	d0f9      	beq.n	80070b8 <_strtod_l+0x298>
 80070c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070c8:	2908      	cmp	r1, #8
 80070ca:	f63f af77 	bhi.w	8006fbc <_strtod_l+0x19c>
 80070ce:	f04f 0e0a 	mov.w	lr, #10
 80070d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80070d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070d8:	9209      	str	r2, [sp, #36]	; 0x24
 80070da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070dc:	1c51      	adds	r1, r2, #1
 80070de:	9119      	str	r1, [sp, #100]	; 0x64
 80070e0:	7852      	ldrb	r2, [r2, #1]
 80070e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80070e6:	2d09      	cmp	r5, #9
 80070e8:	d935      	bls.n	8007156 <_strtod_l+0x336>
 80070ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070ec:	1b49      	subs	r1, r1, r5
 80070ee:	2908      	cmp	r1, #8
 80070f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80070f4:	dc02      	bgt.n	80070fc <_strtod_l+0x2dc>
 80070f6:	4565      	cmp	r5, ip
 80070f8:	bfa8      	it	ge
 80070fa:	4665      	movge	r5, ip
 80070fc:	b107      	cbz	r7, 8007100 <_strtod_l+0x2e0>
 80070fe:	426d      	negs	r5, r5
 8007100:	2c00      	cmp	r4, #0
 8007102:	d14c      	bne.n	800719e <_strtod_l+0x37e>
 8007104:	9907      	ldr	r1, [sp, #28]
 8007106:	4301      	orrs	r1, r0
 8007108:	f47f aecb 	bne.w	8006ea2 <_strtod_l+0x82>
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f aee4 	bne.w	8006eda <_strtod_l+0xba>
 8007112:	2a69      	cmp	r2, #105	; 0x69
 8007114:	d026      	beq.n	8007164 <_strtod_l+0x344>
 8007116:	dc23      	bgt.n	8007160 <_strtod_l+0x340>
 8007118:	2a49      	cmp	r2, #73	; 0x49
 800711a:	d023      	beq.n	8007164 <_strtod_l+0x344>
 800711c:	2a4e      	cmp	r2, #78	; 0x4e
 800711e:	f47f aedc 	bne.w	8006eda <_strtod_l+0xba>
 8007122:	499d      	ldr	r1, [pc, #628]	; (8007398 <_strtod_l+0x578>)
 8007124:	a819      	add	r0, sp, #100	; 0x64
 8007126:	f001 fe17 	bl	8008d58 <__match>
 800712a:	2800      	cmp	r0, #0
 800712c:	f43f aed5 	beq.w	8006eda <_strtod_l+0xba>
 8007130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b28      	cmp	r3, #40	; 0x28
 8007136:	d12c      	bne.n	8007192 <_strtod_l+0x372>
 8007138:	4998      	ldr	r1, [pc, #608]	; (800739c <_strtod_l+0x57c>)
 800713a:	aa1c      	add	r2, sp, #112	; 0x70
 800713c:	a819      	add	r0, sp, #100	; 0x64
 800713e:	f001 fe1f 	bl	8008d80 <__hexnan>
 8007142:	2805      	cmp	r0, #5
 8007144:	d125      	bne.n	8007192 <_strtod_l+0x372>
 8007146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007148:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800714c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007150:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007154:	e6a5      	b.n	8006ea2 <_strtod_l+0x82>
 8007156:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800715a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800715e:	e7bc      	b.n	80070da <_strtod_l+0x2ba>
 8007160:	2a6e      	cmp	r2, #110	; 0x6e
 8007162:	e7dc      	b.n	800711e <_strtod_l+0x2fe>
 8007164:	498e      	ldr	r1, [pc, #568]	; (80073a0 <_strtod_l+0x580>)
 8007166:	a819      	add	r0, sp, #100	; 0x64
 8007168:	f001 fdf6 	bl	8008d58 <__match>
 800716c:	2800      	cmp	r0, #0
 800716e:	f43f aeb4 	beq.w	8006eda <_strtod_l+0xba>
 8007172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007174:	498b      	ldr	r1, [pc, #556]	; (80073a4 <_strtod_l+0x584>)
 8007176:	3b01      	subs	r3, #1
 8007178:	a819      	add	r0, sp, #100	; 0x64
 800717a:	9319      	str	r3, [sp, #100]	; 0x64
 800717c:	f001 fdec 	bl	8008d58 <__match>
 8007180:	b910      	cbnz	r0, 8007188 <_strtod_l+0x368>
 8007182:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007184:	3301      	adds	r3, #1
 8007186:	9319      	str	r3, [sp, #100]	; 0x64
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80073a8 <_strtod_l+0x588>
 8007190:	e687      	b.n	8006ea2 <_strtod_l+0x82>
 8007192:	4886      	ldr	r0, [pc, #536]	; (80073ac <_strtod_l+0x58c>)
 8007194:	f002 fdce 	bl	8009d34 <nan>
 8007198:	4680      	mov	r8, r0
 800719a:	4689      	mov	r9, r1
 800719c:	e681      	b.n	8006ea2 <_strtod_l+0x82>
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	f1bb 0f00 	cmp.w	fp, #0
 80071a4:	bf08      	it	eq
 80071a6:	46a3      	moveq	fp, r4
 80071a8:	1aeb      	subs	r3, r5, r3
 80071aa:	2c10      	cmp	r4, #16
 80071ac:	9806      	ldr	r0, [sp, #24]
 80071ae:	4626      	mov	r6, r4
 80071b0:	9307      	str	r3, [sp, #28]
 80071b2:	bfa8      	it	ge
 80071b4:	2610      	movge	r6, #16
 80071b6:	f7f9 f981 	bl	80004bc <__aeabi_ui2d>
 80071ba:	2c09      	cmp	r4, #9
 80071bc:	4680      	mov	r8, r0
 80071be:	4689      	mov	r9, r1
 80071c0:	dd13      	ble.n	80071ea <_strtod_l+0x3ca>
 80071c2:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <_strtod_l+0x590>)
 80071c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071cc:	f7f9 f9f0 	bl	80005b0 <__aeabi_dmul>
 80071d0:	4680      	mov	r8, r0
 80071d2:	9805      	ldr	r0, [sp, #20]
 80071d4:	4689      	mov	r9, r1
 80071d6:	f7f9 f971 	bl	80004bc <__aeabi_ui2d>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4640      	mov	r0, r8
 80071e0:	4649      	mov	r1, r9
 80071e2:	f7f9 f82f 	bl	8000244 <__adddf3>
 80071e6:	4680      	mov	r8, r0
 80071e8:	4689      	mov	r9, r1
 80071ea:	2c0f      	cmp	r4, #15
 80071ec:	dc36      	bgt.n	800725c <_strtod_l+0x43c>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f43f ae56 	beq.w	8006ea2 <_strtod_l+0x82>
 80071f6:	dd22      	ble.n	800723e <_strtod_l+0x41e>
 80071f8:	2b16      	cmp	r3, #22
 80071fa:	dc09      	bgt.n	8007210 <_strtod_l+0x3f0>
 80071fc:	496c      	ldr	r1, [pc, #432]	; (80073b0 <_strtod_l+0x590>)
 80071fe:	4642      	mov	r2, r8
 8007200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007204:	464b      	mov	r3, r9
 8007206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800720a:	f7f9 f9d1 	bl	80005b0 <__aeabi_dmul>
 800720e:	e7c3      	b.n	8007198 <_strtod_l+0x378>
 8007210:	9a07      	ldr	r2, [sp, #28]
 8007212:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007216:	4293      	cmp	r3, r2
 8007218:	db20      	blt.n	800725c <_strtod_l+0x43c>
 800721a:	4d65      	ldr	r5, [pc, #404]	; (80073b0 <_strtod_l+0x590>)
 800721c:	f1c4 040f 	rsb	r4, r4, #15
 8007220:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007224:	4642      	mov	r2, r8
 8007226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722a:	464b      	mov	r3, r9
 800722c:	f7f9 f9c0 	bl	80005b0 <__aeabi_dmul>
 8007230:	9b07      	ldr	r3, [sp, #28]
 8007232:	1b1c      	subs	r4, r3, r4
 8007234:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800723c:	e7e5      	b.n	800720a <_strtod_l+0x3ea>
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	3316      	adds	r3, #22
 8007242:	db0b      	blt.n	800725c <_strtod_l+0x43c>
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	4640      	mov	r0, r8
 8007248:	1b5d      	subs	r5, r3, r5
 800724a:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <_strtod_l+0x590>)
 800724c:	4649      	mov	r1, r9
 800724e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007252:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007256:	f7f9 fad5 	bl	8000804 <__aeabi_ddiv>
 800725a:	e79d      	b.n	8007198 <_strtod_l+0x378>
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	1ba6      	subs	r6, r4, r6
 8007260:	441e      	add	r6, r3
 8007262:	2e00      	cmp	r6, #0
 8007264:	dd74      	ble.n	8007350 <_strtod_l+0x530>
 8007266:	f016 030f 	ands.w	r3, r6, #15
 800726a:	d00a      	beq.n	8007282 <_strtod_l+0x462>
 800726c:	4950      	ldr	r1, [pc, #320]	; (80073b0 <_strtod_l+0x590>)
 800726e:	4642      	mov	r2, r8
 8007270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007278:	464b      	mov	r3, r9
 800727a:	f7f9 f999 	bl	80005b0 <__aeabi_dmul>
 800727e:	4680      	mov	r8, r0
 8007280:	4689      	mov	r9, r1
 8007282:	f036 060f 	bics.w	r6, r6, #15
 8007286:	d052      	beq.n	800732e <_strtod_l+0x50e>
 8007288:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800728c:	dd27      	ble.n	80072de <_strtod_l+0x4be>
 800728e:	f04f 0b00 	mov.w	fp, #0
 8007292:	f8cd b010 	str.w	fp, [sp, #16]
 8007296:	f8cd b020 	str.w	fp, [sp, #32]
 800729a:	f8cd b018 	str.w	fp, [sp, #24]
 800729e:	2322      	movs	r3, #34	; 0x22
 80072a0:	f04f 0800 	mov.w	r8, #0
 80072a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80073a8 <_strtod_l+0x588>
 80072a8:	f8ca 3000 	str.w	r3, [sl]
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f43f adf7 	beq.w	8006ea2 <_strtod_l+0x82>
 80072b4:	4650      	mov	r0, sl
 80072b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072b8:	f001 fe78 	bl	8008fac <_Bfree>
 80072bc:	4650      	mov	r0, sl
 80072be:	9906      	ldr	r1, [sp, #24]
 80072c0:	f001 fe74 	bl	8008fac <_Bfree>
 80072c4:	4650      	mov	r0, sl
 80072c6:	9904      	ldr	r1, [sp, #16]
 80072c8:	f001 fe70 	bl	8008fac <_Bfree>
 80072cc:	4650      	mov	r0, sl
 80072ce:	9908      	ldr	r1, [sp, #32]
 80072d0:	f001 fe6c 	bl	8008fac <_Bfree>
 80072d4:	4659      	mov	r1, fp
 80072d6:	4650      	mov	r0, sl
 80072d8:	f001 fe68 	bl	8008fac <_Bfree>
 80072dc:	e5e1      	b.n	8006ea2 <_strtod_l+0x82>
 80072de:	4b35      	ldr	r3, [pc, #212]	; (80073b4 <_strtod_l+0x594>)
 80072e0:	4640      	mov	r0, r8
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	2300      	movs	r3, #0
 80072e6:	4649      	mov	r1, r9
 80072e8:	461f      	mov	r7, r3
 80072ea:	1136      	asrs	r6, r6, #4
 80072ec:	2e01      	cmp	r6, #1
 80072ee:	dc21      	bgt.n	8007334 <_strtod_l+0x514>
 80072f0:	b10b      	cbz	r3, 80072f6 <_strtod_l+0x4d6>
 80072f2:	4680      	mov	r8, r0
 80072f4:	4689      	mov	r9, r1
 80072f6:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <_strtod_l+0x594>)
 80072f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007300:	4642      	mov	r2, r8
 8007302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007306:	464b      	mov	r3, r9
 8007308:	f7f9 f952 	bl	80005b0 <__aeabi_dmul>
 800730c:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <_strtod_l+0x588>)
 800730e:	460a      	mov	r2, r1
 8007310:	400b      	ands	r3, r1
 8007312:	4929      	ldr	r1, [pc, #164]	; (80073b8 <_strtod_l+0x598>)
 8007314:	4680      	mov	r8, r0
 8007316:	428b      	cmp	r3, r1
 8007318:	d8b9      	bhi.n	800728e <_strtod_l+0x46e>
 800731a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800731e:	428b      	cmp	r3, r1
 8007320:	bf86      	itte	hi
 8007322:	f04f 38ff 	movhi.w	r8, #4294967295
 8007326:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80073bc <_strtod_l+0x59c>
 800732a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800732e:	2300      	movs	r3, #0
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	e07f      	b.n	8007434 <_strtod_l+0x614>
 8007334:	07f2      	lsls	r2, r6, #31
 8007336:	d505      	bpl.n	8007344 <_strtod_l+0x524>
 8007338:	9b05      	ldr	r3, [sp, #20]
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f9 f937 	bl	80005b0 <__aeabi_dmul>
 8007342:	2301      	movs	r3, #1
 8007344:	9a05      	ldr	r2, [sp, #20]
 8007346:	3701      	adds	r7, #1
 8007348:	3208      	adds	r2, #8
 800734a:	1076      	asrs	r6, r6, #1
 800734c:	9205      	str	r2, [sp, #20]
 800734e:	e7cd      	b.n	80072ec <_strtod_l+0x4cc>
 8007350:	d0ed      	beq.n	800732e <_strtod_l+0x50e>
 8007352:	4276      	negs	r6, r6
 8007354:	f016 020f 	ands.w	r2, r6, #15
 8007358:	d00a      	beq.n	8007370 <_strtod_l+0x550>
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <_strtod_l+0x590>)
 800735c:	4640      	mov	r0, r8
 800735e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007362:	4649      	mov	r1, r9
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f9 fa4c 	bl	8000804 <__aeabi_ddiv>
 800736c:	4680      	mov	r8, r0
 800736e:	4689      	mov	r9, r1
 8007370:	1136      	asrs	r6, r6, #4
 8007372:	d0dc      	beq.n	800732e <_strtod_l+0x50e>
 8007374:	2e1f      	cmp	r6, #31
 8007376:	dd23      	ble.n	80073c0 <_strtod_l+0x5a0>
 8007378:	f04f 0b00 	mov.w	fp, #0
 800737c:	f8cd b010 	str.w	fp, [sp, #16]
 8007380:	f8cd b020 	str.w	fp, [sp, #32]
 8007384:	f8cd b018 	str.w	fp, [sp, #24]
 8007388:	2322      	movs	r3, #34	; 0x22
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	f8ca 3000 	str.w	r3, [sl]
 8007396:	e789      	b.n	80072ac <_strtod_l+0x48c>
 8007398:	0800a9a1 	.word	0x0800a9a1
 800739c:	0800a9e4 	.word	0x0800a9e4
 80073a0:	0800a999 	.word	0x0800a999
 80073a4:	0800ab24 	.word	0x0800ab24
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	0800add0 	.word	0x0800add0
 80073b0:	0800acb0 	.word	0x0800acb0
 80073b4:	0800ac88 	.word	0x0800ac88
 80073b8:	7ca00000 	.word	0x7ca00000
 80073bc:	7fefffff 	.word	0x7fefffff
 80073c0:	f016 0310 	ands.w	r3, r6, #16
 80073c4:	bf18      	it	ne
 80073c6:	236a      	movne	r3, #106	; 0x6a
 80073c8:	4640      	mov	r0, r8
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	4649      	mov	r1, r9
 80073ce:	2300      	movs	r3, #0
 80073d0:	4fb0      	ldr	r7, [pc, #704]	; (8007694 <_strtod_l+0x874>)
 80073d2:	07f2      	lsls	r2, r6, #31
 80073d4:	d504      	bpl.n	80073e0 <_strtod_l+0x5c0>
 80073d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073da:	f7f9 f8e9 	bl	80005b0 <__aeabi_dmul>
 80073de:	2301      	movs	r3, #1
 80073e0:	1076      	asrs	r6, r6, #1
 80073e2:	f107 0708 	add.w	r7, r7, #8
 80073e6:	d1f4      	bne.n	80073d2 <_strtod_l+0x5b2>
 80073e8:	b10b      	cbz	r3, 80073ee <_strtod_l+0x5ce>
 80073ea:	4680      	mov	r8, r0
 80073ec:	4689      	mov	r9, r1
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	b1c3      	cbz	r3, 8007424 <_strtod_l+0x604>
 80073f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	4649      	mov	r1, r9
 80073fe:	dd11      	ble.n	8007424 <_strtod_l+0x604>
 8007400:	2b1f      	cmp	r3, #31
 8007402:	f340 8127 	ble.w	8007654 <_strtod_l+0x834>
 8007406:	2b34      	cmp	r3, #52	; 0x34
 8007408:	bfd8      	it	le
 800740a:	f04f 33ff 	movle.w	r3, #4294967295
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	bfcf      	iteee	gt
 8007414:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800741c:	fa03 f202 	lslle.w	r2, r3, r2
 8007420:	ea02 0901 	andle.w	r9, r2, r1
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	4640      	mov	r0, r8
 800742a:	4649      	mov	r1, r9
 800742c:	f7f9 fb28 	bl	8000a80 <__aeabi_dcmpeq>
 8007430:	2800      	cmp	r0, #0
 8007432:	d1a1      	bne.n	8007378 <_strtod_l+0x558>
 8007434:	9b06      	ldr	r3, [sp, #24]
 8007436:	465a      	mov	r2, fp
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	4650      	mov	r0, sl
 800743c:	4623      	mov	r3, r4
 800743e:	9908      	ldr	r1, [sp, #32]
 8007440:	f001 fe1c 	bl	800907c <__s2b>
 8007444:	9008      	str	r0, [sp, #32]
 8007446:	2800      	cmp	r0, #0
 8007448:	f43f af21 	beq.w	800728e <_strtod_l+0x46e>
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	f04f 0b00 	mov.w	fp, #0
 8007452:	1b5d      	subs	r5, r3, r5
 8007454:	9b07      	ldr	r3, [sp, #28]
 8007456:	f8cd b010 	str.w	fp, [sp, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	bfb4      	ite	lt
 800745e:	462b      	movlt	r3, r5
 8007460:	2300      	movge	r3, #0
 8007462:	930e      	str	r3, [sp, #56]	; 0x38
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800746a:	9314      	str	r3, [sp, #80]	; 0x50
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	4650      	mov	r0, sl
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	f001 fd5b 	bl	8008f2c <_Balloc>
 8007476:	9006      	str	r0, [sp, #24]
 8007478:	2800      	cmp	r0, #0
 800747a:	f43f af10 	beq.w	800729e <_strtod_l+0x47e>
 800747e:	9b08      	ldr	r3, [sp, #32]
 8007480:	300c      	adds	r0, #12
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	f103 010c 	add.w	r1, r3, #12
 8007488:	3202      	adds	r2, #2
 800748a:	0092      	lsls	r2, r2, #2
 800748c:	f001 fd40 	bl	8008f10 <memcpy>
 8007490:	ab1c      	add	r3, sp, #112	; 0x70
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	ab1b      	add	r3, sp, #108	; 0x6c
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	4650      	mov	r0, sl
 800749e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80074a2:	f002 f92d 	bl	8009700 <__d2b>
 80074a6:	901a      	str	r0, [sp, #104]	; 0x68
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f43f aef8 	beq.w	800729e <_strtod_l+0x47e>
 80074ae:	2101      	movs	r1, #1
 80074b0:	4650      	mov	r0, sl
 80074b2:	f001 fe7b 	bl	80091ac <__i2b>
 80074b6:	4603      	mov	r3, r0
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aeef 	beq.w	800729e <_strtod_l+0x47e>
 80074c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80074c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074c4:	2d00      	cmp	r5, #0
 80074c6:	bfab      	itete	ge
 80074c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80074ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80074cc:	18ee      	addge	r6, r5, r3
 80074ce:	1b5c      	sublt	r4, r3, r5
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	bfa8      	it	ge
 80074d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80074d6:	eba5 0503 	sub.w	r5, r5, r3
 80074da:	4415      	add	r5, r2
 80074dc:	4b6e      	ldr	r3, [pc, #440]	; (8007698 <_strtod_l+0x878>)
 80074de:	f105 35ff 	add.w	r5, r5, #4294967295
 80074e2:	bfb8      	it	lt
 80074e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80074e6:	429d      	cmp	r5, r3
 80074e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074ec:	f280 80c4 	bge.w	8007678 <_strtod_l+0x858>
 80074f0:	1b5b      	subs	r3, r3, r5
 80074f2:	2b1f      	cmp	r3, #31
 80074f4:	f04f 0701 	mov.w	r7, #1
 80074f8:	eba2 0203 	sub.w	r2, r2, r3
 80074fc:	f300 80b1 	bgt.w	8007662 <_strtod_l+0x842>
 8007500:	2500      	movs	r5, #0
 8007502:	fa07 f303 	lsl.w	r3, r7, r3
 8007506:	930f      	str	r3, [sp, #60]	; 0x3c
 8007508:	18b7      	adds	r7, r6, r2
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	42be      	cmp	r6, r7
 800750e:	4414      	add	r4, r2
 8007510:	441c      	add	r4, r3
 8007512:	4633      	mov	r3, r6
 8007514:	bfa8      	it	ge
 8007516:	463b      	movge	r3, r7
 8007518:	42a3      	cmp	r3, r4
 800751a:	bfa8      	it	ge
 800751c:	4623      	movge	r3, r4
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfc2      	ittt	gt
 8007522:	1aff      	subgt	r7, r7, r3
 8007524:	1ae4      	subgt	r4, r4, r3
 8007526:	1af6      	subgt	r6, r6, r3
 8007528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	dd17      	ble.n	800755e <_strtod_l+0x73e>
 800752e:	461a      	mov	r2, r3
 8007530:	4650      	mov	r0, sl
 8007532:	9904      	ldr	r1, [sp, #16]
 8007534:	f001 fef8 	bl	8009328 <__pow5mult>
 8007538:	9004      	str	r0, [sp, #16]
 800753a:	2800      	cmp	r0, #0
 800753c:	f43f aeaf 	beq.w	800729e <_strtod_l+0x47e>
 8007540:	4601      	mov	r1, r0
 8007542:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007544:	4650      	mov	r0, sl
 8007546:	f001 fe47 	bl	80091d8 <__multiply>
 800754a:	9009      	str	r0, [sp, #36]	; 0x24
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f aea6 	beq.w	800729e <_strtod_l+0x47e>
 8007552:	4650      	mov	r0, sl
 8007554:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007556:	f001 fd29 	bl	8008fac <_Bfree>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	931a      	str	r3, [sp, #104]	; 0x68
 800755e:	2f00      	cmp	r7, #0
 8007560:	f300 808e 	bgt.w	8007680 <_strtod_l+0x860>
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	dd08      	ble.n	800757c <_strtod_l+0x75c>
 800756a:	4650      	mov	r0, sl
 800756c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800756e:	9906      	ldr	r1, [sp, #24]
 8007570:	f001 feda 	bl	8009328 <__pow5mult>
 8007574:	9006      	str	r0, [sp, #24]
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f ae91 	beq.w	800729e <_strtod_l+0x47e>
 800757c:	2c00      	cmp	r4, #0
 800757e:	dd08      	ble.n	8007592 <_strtod_l+0x772>
 8007580:	4622      	mov	r2, r4
 8007582:	4650      	mov	r0, sl
 8007584:	9906      	ldr	r1, [sp, #24]
 8007586:	f001 ff29 	bl	80093dc <__lshift>
 800758a:	9006      	str	r0, [sp, #24]
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f ae86 	beq.w	800729e <_strtod_l+0x47e>
 8007592:	2e00      	cmp	r6, #0
 8007594:	dd08      	ble.n	80075a8 <_strtod_l+0x788>
 8007596:	4632      	mov	r2, r6
 8007598:	4650      	mov	r0, sl
 800759a:	9904      	ldr	r1, [sp, #16]
 800759c:	f001 ff1e 	bl	80093dc <__lshift>
 80075a0:	9004      	str	r0, [sp, #16]
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f43f ae7b 	beq.w	800729e <_strtod_l+0x47e>
 80075a8:	4650      	mov	r0, sl
 80075aa:	9a06      	ldr	r2, [sp, #24]
 80075ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075ae:	f001 ffa1 	bl	80094f4 <__mdiff>
 80075b2:	4683      	mov	fp, r0
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f43f ae72 	beq.w	800729e <_strtod_l+0x47e>
 80075ba:	2400      	movs	r4, #0
 80075bc:	68c3      	ldr	r3, [r0, #12]
 80075be:	9904      	ldr	r1, [sp, #16]
 80075c0:	60c4      	str	r4, [r0, #12]
 80075c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c4:	f001 ff7a 	bl	80094bc <__mcmp>
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	da6b      	bge.n	80076a4 <_strtod_l+0x884>
 80075cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ce:	ea53 0308 	orrs.w	r3, r3, r8
 80075d2:	f040 8091 	bne.w	80076f8 <_strtod_l+0x8d8>
 80075d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 808c 	bne.w	80076f8 <_strtod_l+0x8d8>
 80075e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075e4:	0d1b      	lsrs	r3, r3, #20
 80075e6:	051b      	lsls	r3, r3, #20
 80075e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075ec:	f240 8084 	bls.w	80076f8 <_strtod_l+0x8d8>
 80075f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80075f4:	b91b      	cbnz	r3, 80075fe <_strtod_l+0x7de>
 80075f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	dd7c      	ble.n	80076f8 <_strtod_l+0x8d8>
 80075fe:	4659      	mov	r1, fp
 8007600:	2201      	movs	r2, #1
 8007602:	4650      	mov	r0, sl
 8007604:	f001 feea 	bl	80093dc <__lshift>
 8007608:	9904      	ldr	r1, [sp, #16]
 800760a:	4683      	mov	fp, r0
 800760c:	f001 ff56 	bl	80094bc <__mcmp>
 8007610:	2800      	cmp	r0, #0
 8007612:	dd71      	ble.n	80076f8 <_strtod_l+0x8d8>
 8007614:	9905      	ldr	r1, [sp, #20]
 8007616:	464b      	mov	r3, r9
 8007618:	4a20      	ldr	r2, [pc, #128]	; (800769c <_strtod_l+0x87c>)
 800761a:	2900      	cmp	r1, #0
 800761c:	f000 808c 	beq.w	8007738 <_strtod_l+0x918>
 8007620:	ea02 0109 	and.w	r1, r2, r9
 8007624:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007628:	f300 8086 	bgt.w	8007738 <_strtod_l+0x918>
 800762c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007630:	f77f aeaa 	ble.w	8007388 <_strtod_l+0x568>
 8007634:	4640      	mov	r0, r8
 8007636:	4649      	mov	r1, r9
 8007638:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <_strtod_l+0x880>)
 800763a:	2200      	movs	r2, #0
 800763c:	f7f8 ffb8 	bl	80005b0 <__aeabi_dmul>
 8007640:	460b      	mov	r3, r1
 8007642:	4303      	orrs	r3, r0
 8007644:	bf08      	it	eq
 8007646:	2322      	moveq	r3, #34	; 0x22
 8007648:	4680      	mov	r8, r0
 800764a:	4689      	mov	r9, r1
 800764c:	bf08      	it	eq
 800764e:	f8ca 3000 	streq.w	r3, [sl]
 8007652:	e62f      	b.n	80072b4 <_strtod_l+0x494>
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	ea03 0808 	and.w	r8, r3, r8
 8007660:	e6e0      	b.n	8007424 <_strtod_l+0x604>
 8007662:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007666:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800766a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800766e:	35e2      	adds	r5, #226	; 0xe2
 8007670:	fa07 f505 	lsl.w	r5, r7, r5
 8007674:	970f      	str	r7, [sp, #60]	; 0x3c
 8007676:	e747      	b.n	8007508 <_strtod_l+0x6e8>
 8007678:	2301      	movs	r3, #1
 800767a:	2500      	movs	r5, #0
 800767c:	930f      	str	r3, [sp, #60]	; 0x3c
 800767e:	e743      	b.n	8007508 <_strtod_l+0x6e8>
 8007680:	463a      	mov	r2, r7
 8007682:	4650      	mov	r0, sl
 8007684:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007686:	f001 fea9 	bl	80093dc <__lshift>
 800768a:	901a      	str	r0, [sp, #104]	; 0x68
 800768c:	2800      	cmp	r0, #0
 800768e:	f47f af69 	bne.w	8007564 <_strtod_l+0x744>
 8007692:	e604      	b.n	800729e <_strtod_l+0x47e>
 8007694:	0800a9f8 	.word	0x0800a9f8
 8007698:	fffffc02 	.word	0xfffffc02
 800769c:	7ff00000 	.word	0x7ff00000
 80076a0:	39500000 	.word	0x39500000
 80076a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076a8:	d165      	bne.n	8007776 <_strtod_l+0x956>
 80076aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076b0:	b35a      	cbz	r2, 800770a <_strtod_l+0x8ea>
 80076b2:	4a99      	ldr	r2, [pc, #612]	; (8007918 <_strtod_l+0xaf8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d12b      	bne.n	8007710 <_strtod_l+0x8f0>
 80076b8:	9b05      	ldr	r3, [sp, #20]
 80076ba:	4641      	mov	r1, r8
 80076bc:	b303      	cbz	r3, 8007700 <_strtod_l+0x8e0>
 80076be:	464a      	mov	r2, r9
 80076c0:	4b96      	ldr	r3, [pc, #600]	; (800791c <_strtod_l+0xafc>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076c8:	f04f 32ff 	mov.w	r2, #4294967295
 80076cc:	d81b      	bhi.n	8007706 <_strtod_l+0x8e6>
 80076ce:	0d1b      	lsrs	r3, r3, #20
 80076d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	4299      	cmp	r1, r3
 80076da:	d119      	bne.n	8007710 <_strtod_l+0x8f0>
 80076dc:	4b90      	ldr	r3, [pc, #576]	; (8007920 <_strtod_l+0xb00>)
 80076de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d102      	bne.n	80076ea <_strtod_l+0x8ca>
 80076e4:	3101      	adds	r1, #1
 80076e6:	f43f adda 	beq.w	800729e <_strtod_l+0x47e>
 80076ea:	f04f 0800 	mov.w	r8, #0
 80076ee:	4b8b      	ldr	r3, [pc, #556]	; (800791c <_strtod_l+0xafc>)
 80076f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f2:	401a      	ands	r2, r3
 80076f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d19a      	bne.n	8007634 <_strtod_l+0x814>
 80076fe:	e5d9      	b.n	80072b4 <_strtod_l+0x494>
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	e7e8      	b.n	80076d8 <_strtod_l+0x8b8>
 8007706:	4613      	mov	r3, r2
 8007708:	e7e6      	b.n	80076d8 <_strtod_l+0x8b8>
 800770a:	ea53 0308 	orrs.w	r3, r3, r8
 800770e:	d081      	beq.n	8007614 <_strtod_l+0x7f4>
 8007710:	b1e5      	cbz	r5, 800774c <_strtod_l+0x92c>
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	421d      	tst	r5, r3
 8007716:	d0ef      	beq.n	80076f8 <_strtod_l+0x8d8>
 8007718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	9a05      	ldr	r2, [sp, #20]
 8007720:	b1c3      	cbz	r3, 8007754 <_strtod_l+0x934>
 8007722:	f7ff fb59 	bl	8006dd8 <sulp>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800772e:	f7f8 fd89 	bl	8000244 <__adddf3>
 8007732:	4680      	mov	r8, r0
 8007734:	4689      	mov	r9, r1
 8007736:	e7df      	b.n	80076f8 <_strtod_l+0x8d8>
 8007738:	4013      	ands	r3, r2
 800773a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800773e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007742:	f04f 38ff 	mov.w	r8, #4294967295
 8007746:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800774a:	e7d5      	b.n	80076f8 <_strtod_l+0x8d8>
 800774c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774e:	ea13 0f08 	tst.w	r3, r8
 8007752:	e7e0      	b.n	8007716 <_strtod_l+0x8f6>
 8007754:	f7ff fb40 	bl	8006dd8 <sulp>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007760:	f7f8 fd6e 	bl	8000240 <__aeabi_dsub>
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4680      	mov	r8, r0
 800776a:	4689      	mov	r9, r1
 800776c:	f7f9 f988 	bl	8000a80 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d0c1      	beq.n	80076f8 <_strtod_l+0x8d8>
 8007774:	e608      	b.n	8007388 <_strtod_l+0x568>
 8007776:	4658      	mov	r0, fp
 8007778:	9904      	ldr	r1, [sp, #16]
 800777a:	f002 f81d 	bl	80097b8 <__ratio>
 800777e:	2200      	movs	r2, #0
 8007780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007784:	4606      	mov	r6, r0
 8007786:	460f      	mov	r7, r1
 8007788:	f7f9 f98e 	bl	8000aa8 <__aeabi_dcmple>
 800778c:	2800      	cmp	r0, #0
 800778e:	d070      	beq.n	8007872 <_strtod_l+0xa52>
 8007790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d042      	beq.n	800781c <_strtod_l+0x9fc>
 8007796:	2600      	movs	r6, #0
 8007798:	4f62      	ldr	r7, [pc, #392]	; (8007924 <_strtod_l+0xb04>)
 800779a:	4d62      	ldr	r5, [pc, #392]	; (8007924 <_strtod_l+0xb04>)
 800779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	0d1b      	lsrs	r3, r3, #20
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077aa:	4b5f      	ldr	r3, [pc, #380]	; (8007928 <_strtod_l+0xb08>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	f040 80c3 	bne.w	8007938 <_strtod_l+0xb18>
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	4640      	mov	r0, r8
 80077b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80077ba:	4649      	mov	r1, r9
 80077bc:	f001 ff26 	bl	800960c <__ulp>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 fef2 	bl	80005b0 <__aeabi_dmul>
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	f7f8 fd38 	bl	8000244 <__adddf3>
 80077d4:	460b      	mov	r3, r1
 80077d6:	4951      	ldr	r1, [pc, #324]	; (800791c <_strtod_l+0xafc>)
 80077d8:	4a54      	ldr	r2, [pc, #336]	; (800792c <_strtod_l+0xb0c>)
 80077da:	4019      	ands	r1, r3
 80077dc:	4291      	cmp	r1, r2
 80077de:	4680      	mov	r8, r0
 80077e0:	d95d      	bls.n	800789e <_strtod_l+0xa7e>
 80077e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077e4:	4b4e      	ldr	r3, [pc, #312]	; (8007920 <_strtod_l+0xb00>)
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d103      	bne.n	80077f2 <_strtod_l+0x9d2>
 80077ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ec:	3301      	adds	r3, #1
 80077ee:	f43f ad56 	beq.w	800729e <_strtod_l+0x47e>
 80077f2:	f04f 38ff 	mov.w	r8, #4294967295
 80077f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007920 <_strtod_l+0xb00>
 80077fa:	4650      	mov	r0, sl
 80077fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077fe:	f001 fbd5 	bl	8008fac <_Bfree>
 8007802:	4650      	mov	r0, sl
 8007804:	9906      	ldr	r1, [sp, #24]
 8007806:	f001 fbd1 	bl	8008fac <_Bfree>
 800780a:	4650      	mov	r0, sl
 800780c:	9904      	ldr	r1, [sp, #16]
 800780e:	f001 fbcd 	bl	8008fac <_Bfree>
 8007812:	4659      	mov	r1, fp
 8007814:	4650      	mov	r0, sl
 8007816:	f001 fbc9 	bl	8008fac <_Bfree>
 800781a:	e627      	b.n	800746c <_strtod_l+0x64c>
 800781c:	f1b8 0f00 	cmp.w	r8, #0
 8007820:	d119      	bne.n	8007856 <_strtod_l+0xa36>
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007828:	b9e3      	cbnz	r3, 8007864 <_strtod_l+0xa44>
 800782a:	2200      	movs	r2, #0
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <_strtod_l+0xb04>)
 8007832:	f7f9 f92f 	bl	8000a94 <__aeabi_dcmplt>
 8007836:	b9c8      	cbnz	r0, 800786c <_strtod_l+0xa4c>
 8007838:	2200      	movs	r2, #0
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	4b3c      	ldr	r3, [pc, #240]	; (8007930 <_strtod_l+0xb10>)
 8007840:	f7f8 feb6 	bl	80005b0 <__aeabi_dmul>
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800784c:	9416      	str	r4, [sp, #88]	; 0x58
 800784e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007850:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007854:	e7a2      	b.n	800779c <_strtod_l+0x97c>
 8007856:	f1b8 0f01 	cmp.w	r8, #1
 800785a:	d103      	bne.n	8007864 <_strtod_l+0xa44>
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	f43f ad92 	beq.w	8007388 <_strtod_l+0x568>
 8007864:	2600      	movs	r6, #0
 8007866:	2400      	movs	r4, #0
 8007868:	4f32      	ldr	r7, [pc, #200]	; (8007934 <_strtod_l+0xb14>)
 800786a:	e796      	b.n	800779a <_strtod_l+0x97a>
 800786c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800786e:	4d30      	ldr	r5, [pc, #192]	; (8007930 <_strtod_l+0xb10>)
 8007870:	e7ea      	b.n	8007848 <_strtod_l+0xa28>
 8007872:	4b2f      	ldr	r3, [pc, #188]	; (8007930 <_strtod_l+0xb10>)
 8007874:	2200      	movs	r2, #0
 8007876:	4630      	mov	r0, r6
 8007878:	4639      	mov	r1, r7
 800787a:	f7f8 fe99 	bl	80005b0 <__aeabi_dmul>
 800787e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	b933      	cbnz	r3, 8007894 <_strtod_l+0xa74>
 8007886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788a:	9010      	str	r0, [sp, #64]	; 0x40
 800788c:	9311      	str	r3, [sp, #68]	; 0x44
 800788e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007892:	e783      	b.n	800779c <_strtod_l+0x97c>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800789c:	e7f7      	b.n	800788e <_strtod_l+0xa6e>
 800789e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80078a2:	9b05      	ldr	r3, [sp, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1a8      	bne.n	80077fa <_strtod_l+0x9da>
 80078a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ae:	0d1b      	lsrs	r3, r3, #20
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d1a1      	bne.n	80077fa <_strtod_l+0x9da>
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	f7f9 f9c1 	bl	8000c40 <__aeabi_d2lz>
 80078be:	f7f8 fe49 	bl	8000554 <__aeabi_l2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fcb9 	bl	8000240 <__aeabi_dsub>
 80078ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078d4:	ea43 0308 	orr.w	r3, r3, r8
 80078d8:	4313      	orrs	r3, r2
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	d066      	beq.n	80079ae <_strtod_l+0xb8e>
 80078e0:	a309      	add	r3, pc, #36	; (adr r3, 8007908 <_strtod_l+0xae8>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f9 f8d5 	bl	8000a94 <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f47f ace2 	bne.w	80072b4 <_strtod_l+0x494>
 80078f0:	a307      	add	r3, pc, #28	; (adr r3, 8007910 <_strtod_l+0xaf0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f9 f8e9 	bl	8000ad0 <__aeabi_dcmpgt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af7b 	beq.w	80077fa <_strtod_l+0x9da>
 8007904:	e4d6      	b.n	80072b4 <_strtod_l+0x494>
 8007906:	bf00      	nop
 8007908:	94a03595 	.word	0x94a03595
 800790c:	3fdfffff 	.word	0x3fdfffff
 8007910:	35afe535 	.word	0x35afe535
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	000fffff 	.word	0x000fffff
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	7fefffff 	.word	0x7fefffff
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	7fe00000 	.word	0x7fe00000
 800792c:	7c9fffff 	.word	0x7c9fffff
 8007930:	3fe00000 	.word	0x3fe00000
 8007934:	bff00000 	.word	0xbff00000
 8007938:	9b05      	ldr	r3, [sp, #20]
 800793a:	b313      	cbz	r3, 8007982 <_strtod_l+0xb62>
 800793c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007942:	d81e      	bhi.n	8007982 <_strtod_l+0xb62>
 8007944:	a326      	add	r3, pc, #152	; (adr r3, 80079e0 <_strtod_l+0xbc0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f9 f8ab 	bl	8000aa8 <__aeabi_dcmple>
 8007952:	b190      	cbz	r0, 800797a <_strtod_l+0xb5a>
 8007954:	4629      	mov	r1, r5
 8007956:	4620      	mov	r0, r4
 8007958:	f7f9 f902 	bl	8000b60 <__aeabi_d2uiz>
 800795c:	2801      	cmp	r0, #1
 800795e:	bf38      	it	cc
 8007960:	2001      	movcc	r0, #1
 8007962:	f7f8 fdab 	bl	80004bc <__aeabi_ui2d>
 8007966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	b9d3      	cbnz	r3, 80079a4 <_strtod_l+0xb84>
 800796e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007972:	9012      	str	r0, [sp, #72]	; 0x48
 8007974:	9313      	str	r3, [sp, #76]	; 0x4c
 8007976:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800797a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800797c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007980:	1a9f      	subs	r7, r3, r2
 8007982:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007986:	f001 fe41 	bl	800960c <__ulp>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fe0d 	bl	80005b0 <__aeabi_dmul>
 8007996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800799a:	f7f8 fc53 	bl	8000244 <__adddf3>
 800799e:	4680      	mov	r8, r0
 80079a0:	4689      	mov	r9, r1
 80079a2:	e77e      	b.n	80078a2 <_strtod_l+0xa82>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80079ac:	e7e3      	b.n	8007976 <_strtod_l+0xb56>
 80079ae:	a30e      	add	r3, pc, #56	; (adr r3, 80079e8 <_strtod_l+0xbc8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f9 f86e 	bl	8000a94 <__aeabi_dcmplt>
 80079b8:	e7a1      	b.n	80078fe <_strtod_l+0xade>
 80079ba:	2300      	movs	r3, #0
 80079bc:	930a      	str	r3, [sp, #40]	; 0x28
 80079be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	f7ff ba71 	b.w	8006eaa <_strtod_l+0x8a>
 80079c8:	2a65      	cmp	r2, #101	; 0x65
 80079ca:	f43f ab63 	beq.w	8007094 <_strtod_l+0x274>
 80079ce:	2a45      	cmp	r2, #69	; 0x45
 80079d0:	f43f ab60 	beq.w	8007094 <_strtod_l+0x274>
 80079d4:	2301      	movs	r3, #1
 80079d6:	f7ff bb95 	b.w	8007104 <_strtod_l+0x2e4>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	; (80079f8 <_strtod_r+0x8>)
 80079f2:	f7ff ba15 	b.w	8006e20 <_strtod_l>
 80079f6:	bf00      	nop
 80079f8:	20000074 	.word	0x20000074

080079fc <_strtol_l.constprop.0>:
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	4680      	mov	r8, r0
 8007a04:	d001      	beq.n	8007a0a <_strtol_l.constprop.0+0xe>
 8007a06:	2b24      	cmp	r3, #36	; 0x24
 8007a08:	d906      	bls.n	8007a18 <_strtol_l.constprop.0+0x1c>
 8007a0a:	f7fe fb21 	bl	8006050 <__errno>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	4f35      	ldr	r7, [pc, #212]	; (8007af0 <_strtol_l.constprop.0+0xf4>)
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a22:	5de6      	ldrb	r6, [r4, r7]
 8007a24:	f016 0608 	ands.w	r6, r6, #8
 8007a28:	d1f8      	bne.n	8007a1c <_strtol_l.constprop.0+0x20>
 8007a2a:	2c2d      	cmp	r4, #45	; 0x2d
 8007a2c:	d12f      	bne.n	8007a8e <_strtol_l.constprop.0+0x92>
 8007a2e:	2601      	movs	r6, #1
 8007a30:	782c      	ldrb	r4, [r5, #0]
 8007a32:	1c85      	adds	r5, r0, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d057      	beq.n	8007ae8 <_strtol_l.constprop.0+0xec>
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d109      	bne.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007a3c:	2c30      	cmp	r4, #48	; 0x30
 8007a3e:	d107      	bne.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007a40:	7828      	ldrb	r0, [r5, #0]
 8007a42:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007a46:	2858      	cmp	r0, #88	; 0x58
 8007a48:	d149      	bne.n	8007ade <_strtol_l.constprop.0+0xe2>
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	786c      	ldrb	r4, [r5, #1]
 8007a4e:	3502      	adds	r5, #2
 8007a50:	2700      	movs	r7, #0
 8007a52:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007a56:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007a5a:	fbbe f9f3 	udiv	r9, lr, r3
 8007a5e:	4638      	mov	r0, r7
 8007a60:	fb03 ea19 	mls	sl, r3, r9, lr
 8007a64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a68:	f1bc 0f09 	cmp.w	ip, #9
 8007a6c:	d814      	bhi.n	8007a98 <_strtol_l.constprop.0+0x9c>
 8007a6e:	4664      	mov	r4, ip
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	dd22      	ble.n	8007aba <_strtol_l.constprop.0+0xbe>
 8007a74:	2f00      	cmp	r7, #0
 8007a76:	db1d      	blt.n	8007ab4 <_strtol_l.constprop.0+0xb8>
 8007a78:	4581      	cmp	r9, r0
 8007a7a:	d31b      	bcc.n	8007ab4 <_strtol_l.constprop.0+0xb8>
 8007a7c:	d101      	bne.n	8007a82 <_strtol_l.constprop.0+0x86>
 8007a7e:	45a2      	cmp	sl, r4
 8007a80:	db18      	blt.n	8007ab4 <_strtol_l.constprop.0+0xb8>
 8007a82:	2701      	movs	r7, #1
 8007a84:	fb00 4003 	mla	r0, r0, r3, r4
 8007a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a8c:	e7ea      	b.n	8007a64 <_strtol_l.constprop.0+0x68>
 8007a8e:	2c2b      	cmp	r4, #43	; 0x2b
 8007a90:	bf04      	itt	eq
 8007a92:	782c      	ldrbeq	r4, [r5, #0]
 8007a94:	1c85      	addeq	r5, r0, #2
 8007a96:	e7cd      	b.n	8007a34 <_strtol_l.constprop.0+0x38>
 8007a98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a9c:	f1bc 0f19 	cmp.w	ip, #25
 8007aa0:	d801      	bhi.n	8007aa6 <_strtol_l.constprop.0+0xaa>
 8007aa2:	3c37      	subs	r4, #55	; 0x37
 8007aa4:	e7e4      	b.n	8007a70 <_strtol_l.constprop.0+0x74>
 8007aa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007aaa:	f1bc 0f19 	cmp.w	ip, #25
 8007aae:	d804      	bhi.n	8007aba <_strtol_l.constprop.0+0xbe>
 8007ab0:	3c57      	subs	r4, #87	; 0x57
 8007ab2:	e7dd      	b.n	8007a70 <_strtol_l.constprop.0+0x74>
 8007ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ab8:	e7e6      	b.n	8007a88 <_strtol_l.constprop.0+0x8c>
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	da07      	bge.n	8007ace <_strtol_l.constprop.0+0xd2>
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	4670      	mov	r0, lr
 8007ac2:	f8c8 3000 	str.w	r3, [r8]
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d0a4      	beq.n	8007a14 <_strtol_l.constprop.0+0x18>
 8007aca:	1e69      	subs	r1, r5, #1
 8007acc:	e005      	b.n	8007ada <_strtol_l.constprop.0+0xde>
 8007ace:	b106      	cbz	r6, 8007ad2 <_strtol_l.constprop.0+0xd6>
 8007ad0:	4240      	negs	r0, r0
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	d09e      	beq.n	8007a14 <_strtol_l.constprop.0+0x18>
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	d1f7      	bne.n	8007aca <_strtol_l.constprop.0+0xce>
 8007ada:	6011      	str	r1, [r2, #0]
 8007adc:	e79a      	b.n	8007a14 <_strtol_l.constprop.0+0x18>
 8007ade:	2430      	movs	r4, #48	; 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1b5      	bne.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	e7b3      	b.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007ae8:	2c30      	cmp	r4, #48	; 0x30
 8007aea:	d0a9      	beq.n	8007a40 <_strtol_l.constprop.0+0x44>
 8007aec:	230a      	movs	r3, #10
 8007aee:	e7af      	b.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007af0:	0800aa21 	.word	0x0800aa21

08007af4 <_strtol_r>:
 8007af4:	f7ff bf82 	b.w	80079fc <_strtol_l.constprop.0>

08007af8 <quorem>:
 8007af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	6903      	ldr	r3, [r0, #16]
 8007afe:	690c      	ldr	r4, [r1, #16]
 8007b00:	4607      	mov	r7, r0
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	f2c0 8082 	blt.w	8007c0c <quorem+0x114>
 8007b08:	3c01      	subs	r4, #1
 8007b0a:	f100 0514 	add.w	r5, r0, #20
 8007b0e:	f101 0814 	add.w	r8, r1, #20
 8007b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b20:	3301      	adds	r3, #1
 8007b22:	429a      	cmp	r2, r3
 8007b24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b30:	d331      	bcc.n	8007b96 <quorem+0x9e>
 8007b32:	f04f 0e00 	mov.w	lr, #0
 8007b36:	4640      	mov	r0, r8
 8007b38:	46ac      	mov	ip, r5
 8007b3a:	46f2      	mov	sl, lr
 8007b3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b40:	b293      	uxth	r3, r2
 8007b42:	fb06 e303 	mla	r3, r6, r3, lr
 8007b46:	0c12      	lsrs	r2, r2, #16
 8007b48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	fb06 e202 	mla	r2, r6, r2, lr
 8007b52:	ebaa 0303 	sub.w	r3, sl, r3
 8007b56:	f8dc a000 	ldr.w	sl, [ip]
 8007b5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b5e:	fa1f fa8a 	uxth.w	sl, sl
 8007b62:	4453      	add	r3, sl
 8007b64:	f8dc a000 	ldr.w	sl, [ip]
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b78:	4581      	cmp	r9, r0
 8007b7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b82:	d2db      	bcs.n	8007b3c <quorem+0x44>
 8007b84:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b88:	b92b      	cbnz	r3, 8007b96 <quorem+0x9e>
 8007b8a:	9b01      	ldr	r3, [sp, #4]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	429d      	cmp	r5, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	d32f      	bcc.n	8007bf4 <quorem+0xfc>
 8007b94:	613c      	str	r4, [r7, #16]
 8007b96:	4638      	mov	r0, r7
 8007b98:	f001 fc90 	bl	80094bc <__mcmp>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	db25      	blt.n	8007bec <quorem+0xf4>
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f04f 0c00 	mov.w	ip, #0
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007bac:	f8d0 e000 	ldr.w	lr, [r0]
 8007bb0:	b28b      	uxth	r3, r1
 8007bb2:	ebac 0303 	sub.w	r3, ip, r3
 8007bb6:	fa1f f28e 	uxth.w	r2, lr
 8007bba:	4413      	add	r3, r2
 8007bbc:	0c0a      	lsrs	r2, r1, #16
 8007bbe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bcc:	45c1      	cmp	r9, r8
 8007bce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bd2:	f840 3b04 	str.w	r3, [r0], #4
 8007bd6:	d2e7      	bcs.n	8007ba8 <quorem+0xb0>
 8007bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007be0:	b922      	cbnz	r2, 8007bec <quorem+0xf4>
 8007be2:	3b04      	subs	r3, #4
 8007be4:	429d      	cmp	r5, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	d30a      	bcc.n	8007c00 <quorem+0x108>
 8007bea:	613c      	str	r4, [r7, #16]
 8007bec:	4630      	mov	r0, r6
 8007bee:	b003      	add	sp, #12
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	d1cb      	bne.n	8007b94 <quorem+0x9c>
 8007bfc:	3c01      	subs	r4, #1
 8007bfe:	e7c6      	b.n	8007b8e <quorem+0x96>
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	3b04      	subs	r3, #4
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	d1f0      	bne.n	8007bea <quorem+0xf2>
 8007c08:	3c01      	subs	r4, #1
 8007c0a:	e7eb      	b.n	8007be4 <quorem+0xec>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7ee      	b.n	8007bee <quorem+0xf6>

08007c10 <_dtoa_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	461f      	mov	r7, r3
 8007c18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c1a:	b099      	sub	sp, #100	; 0x64
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c26:	b974      	cbnz	r4, 8007c46 <_dtoa_r+0x36>
 8007c28:	2010      	movs	r0, #16
 8007c2a:	f001 f949 	bl	8008ec0 <malloc>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6268      	str	r0, [r5, #36]	; 0x24
 8007c32:	b920      	cbnz	r0, 8007c3e <_dtoa_r+0x2e>
 8007c34:	21ea      	movs	r1, #234	; 0xea
 8007c36:	4ba8      	ldr	r3, [pc, #672]	; (8007ed8 <_dtoa_r+0x2c8>)
 8007c38:	48a8      	ldr	r0, [pc, #672]	; (8007edc <_dtoa_r+0x2cc>)
 8007c3a:	f002 f8b3 	bl	8009da4 <__assert_func>
 8007c3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c42:	6004      	str	r4, [r0, #0]
 8007c44:	60c4      	str	r4, [r0, #12]
 8007c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	b151      	cbz	r1, 8007c62 <_dtoa_r+0x52>
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4093      	lsls	r3, r2
 8007c52:	604a      	str	r2, [r1, #4]
 8007c54:	608b      	str	r3, [r1, #8]
 8007c56:	4628      	mov	r0, r5
 8007c58:	f001 f9a8 	bl	8008fac <_Bfree>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	1e3b      	subs	r3, r7, #0
 8007c64:	bfaf      	iteee	ge
 8007c66:	2300      	movge	r3, #0
 8007c68:	2201      	movlt	r2, #1
 8007c6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c6e:	9305      	strlt	r3, [sp, #20]
 8007c70:	bfa8      	it	ge
 8007c72:	f8c8 3000 	strge.w	r3, [r8]
 8007c76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007c7a:	4b99      	ldr	r3, [pc, #612]	; (8007ee0 <_dtoa_r+0x2d0>)
 8007c7c:	bfb8      	it	lt
 8007c7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007c82:	ea33 0309 	bics.w	r3, r3, r9
 8007c86:	d119      	bne.n	8007cbc <_dtoa_r+0xac>
 8007c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c94:	4333      	orrs	r3, r6
 8007c96:	f000 857f 	beq.w	8008798 <_dtoa_r+0xb88>
 8007c9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c9c:	b953      	cbnz	r3, 8007cb4 <_dtoa_r+0xa4>
 8007c9e:	4b91      	ldr	r3, [pc, #580]	; (8007ee4 <_dtoa_r+0x2d4>)
 8007ca0:	e022      	b.n	8007ce8 <_dtoa_r+0xd8>
 8007ca2:	4b91      	ldr	r3, [pc, #580]	; (8007ee8 <_dtoa_r+0x2d8>)
 8007ca4:	9303      	str	r3, [sp, #12]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	9803      	ldr	r0, [sp, #12]
 8007cae:	b019      	add	sp, #100	; 0x64
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	4b8b      	ldr	r3, [pc, #556]	; (8007ee4 <_dtoa_r+0x2d4>)
 8007cb6:	9303      	str	r3, [sp, #12]
 8007cb8:	3303      	adds	r3, #3
 8007cba:	e7f5      	b.n	8007ca8 <_dtoa_r+0x98>
 8007cbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f7f8 fed8 	bl	8000a80 <__aeabi_dcmpeq>
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	b158      	cbz	r0, 8007cec <_dtoa_r+0xdc>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8558 	beq.w	8008792 <_dtoa_r+0xb82>
 8007ce2:	4882      	ldr	r0, [pc, #520]	; (8007eec <_dtoa_r+0x2dc>)
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	1e43      	subs	r3, r0, #1
 8007ce8:	9303      	str	r3, [sp, #12]
 8007cea:	e7df      	b.n	8007cac <_dtoa_r+0x9c>
 8007cec:	ab16      	add	r3, sp, #88	; 0x58
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	ab17      	add	r3, sp, #92	; 0x5c
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cfa:	f001 fd01 	bl	8009700 <__d2b>
 8007cfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d02:	4683      	mov	fp, r0
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	d07f      	beq.n	8007e08 <_dtoa_r+0x1f8>
 8007d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d22:	2200      	movs	r2, #0
 8007d24:	4b72      	ldr	r3, [pc, #456]	; (8007ef0 <_dtoa_r+0x2e0>)
 8007d26:	f7f8 fa8b 	bl	8000240 <__aeabi_dsub>
 8007d2a:	a365      	add	r3, pc, #404	; (adr r3, 8007ec0 <_dtoa_r+0x2b0>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f7f8 fc3e 	bl	80005b0 <__aeabi_dmul>
 8007d34:	a364      	add	r3, pc, #400	; (adr r3, 8007ec8 <_dtoa_r+0x2b8>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fa83 	bl	8000244 <__adddf3>
 8007d3e:	4606      	mov	r6, r0
 8007d40:	4620      	mov	r0, r4
 8007d42:	460f      	mov	r7, r1
 8007d44:	f7f8 fbca 	bl	80004dc <__aeabi_i2d>
 8007d48:	a361      	add	r3, pc, #388	; (adr r3, 8007ed0 <_dtoa_r+0x2c0>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fc2f 	bl	80005b0 <__aeabi_dmul>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4630      	mov	r0, r6
 8007d58:	4639      	mov	r1, r7
 8007d5a:	f7f8 fa73 	bl	8000244 <__adddf3>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	f7f8 fed5 	bl	8000b10 <__aeabi_d2iz>
 8007d66:	2200      	movs	r2, #0
 8007d68:	4682      	mov	sl, r0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	4639      	mov	r1, r7
 8007d70:	f7f8 fe90 	bl	8000a94 <__aeabi_dcmplt>
 8007d74:	b148      	cbz	r0, 8007d8a <_dtoa_r+0x17a>
 8007d76:	4650      	mov	r0, sl
 8007d78:	f7f8 fbb0 	bl	80004dc <__aeabi_i2d>
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	f7f8 fe7e 	bl	8000a80 <__aeabi_dcmpeq>
 8007d84:	b908      	cbnz	r0, 8007d8a <_dtoa_r+0x17a>
 8007d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d8a:	f1ba 0f16 	cmp.w	sl, #22
 8007d8e:	d858      	bhi.n	8007e42 <_dtoa_r+0x232>
 8007d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d94:	4b57      	ldr	r3, [pc, #348]	; (8007ef4 <_dtoa_r+0x2e4>)
 8007d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fe79 	bl	8000a94 <__aeabi_dcmplt>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d04f      	beq.n	8007e46 <_dtoa_r+0x236>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007db0:	1b1c      	subs	r4, r3, r4
 8007db2:	1e63      	subs	r3, r4, #1
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	bf49      	itett	mi
 8007db8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007dbc:	2300      	movpl	r3, #0
 8007dbe:	9306      	strmi	r3, [sp, #24]
 8007dc0:	2300      	movmi	r3, #0
 8007dc2:	bf54      	ite	pl
 8007dc4:	9306      	strpl	r3, [sp, #24]
 8007dc6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	db3d      	blt.n	8007e4a <_dtoa_r+0x23a>
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007dd4:	4453      	add	r3, sl
 8007dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd8:	2300      	movs	r3, #0
 8007dda:	930a      	str	r3, [sp, #40]	; 0x28
 8007ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	f200 808c 	bhi.w	8007efc <_dtoa_r+0x2ec>
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	bfc4      	itt	gt
 8007de8:	3b04      	subgt	r3, #4
 8007dea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dee:	bfc8      	it	gt
 8007df0:	2400      	movgt	r4, #0
 8007df2:	f1a3 0302 	sub.w	r3, r3, #2
 8007df6:	bfd8      	it	le
 8007df8:	2401      	movle	r4, #1
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	f200 808a 	bhi.w	8007f14 <_dtoa_r+0x304>
 8007e00:	e8df f003 	tbb	[pc, r3]
 8007e04:	5b4d4f2d 	.word	0x5b4d4f2d
 8007e08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e0c:	441c      	add	r4, r3
 8007e0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	bfc3      	ittte	gt
 8007e16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e1a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e1e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e22:	f1c3 0320 	rsble	r3, r3, #32
 8007e26:	bfc6      	itte	gt
 8007e28:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e2c:	4318      	orrgt	r0, r3
 8007e2e:	fa06 f003 	lslle.w	r0, r6, r3
 8007e32:	f7f8 fb43 	bl	80004bc <__aeabi_ui2d>
 8007e36:	2301      	movs	r3, #1
 8007e38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e3c:	3c01      	subs	r4, #1
 8007e3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e40:	e76f      	b.n	8007d22 <_dtoa_r+0x112>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e7b2      	b.n	8007dac <_dtoa_r+0x19c>
 8007e46:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e48:	e7b1      	b.n	8007dae <_dtoa_r+0x19e>
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	eba3 030a 	sub.w	r3, r3, sl
 8007e50:	9306      	str	r3, [sp, #24]
 8007e52:	f1ca 0300 	rsb	r3, sl, #0
 8007e56:	930a      	str	r3, [sp, #40]	; 0x28
 8007e58:	2300      	movs	r3, #0
 8007e5a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5c:	e7be      	b.n	8007ddc <_dtoa_r+0x1cc>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dc58      	bgt.n	8007f1a <_dtoa_r+0x30a>
 8007e68:	f04f 0901 	mov.w	r9, #1
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e72:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007e76:	2200      	movs	r2, #0
 8007e78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e7a:	6042      	str	r2, [r0, #4]
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	f102 0614 	add.w	r6, r2, #20
 8007e82:	429e      	cmp	r6, r3
 8007e84:	6841      	ldr	r1, [r0, #4]
 8007e86:	d94e      	bls.n	8007f26 <_dtoa_r+0x316>
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f001 f84f 	bl	8008f2c <_Balloc>
 8007e8e:	9003      	str	r0, [sp, #12]
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d14c      	bne.n	8007f2e <_dtoa_r+0x31e>
 8007e94:	4602      	mov	r2, r0
 8007e96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e9a:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <_dtoa_r+0x2e8>)
 8007e9c:	e6cc      	b.n	8007c38 <_dtoa_r+0x28>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e7de      	b.n	8007e60 <_dtoa_r+0x250>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ea6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ea8:	eb0a 0903 	add.w	r9, sl, r3
 8007eac:	f109 0301 	add.w	r3, r9, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	9308      	str	r3, [sp, #32]
 8007eb4:	bfb8      	it	lt
 8007eb6:	2301      	movlt	r3, #1
 8007eb8:	e7dd      	b.n	8007e76 <_dtoa_r+0x266>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7f2      	b.n	8007ea4 <_dtoa_r+0x294>
 8007ebe:	bf00      	nop
 8007ec0:	636f4361 	.word	0x636f4361
 8007ec4:	3fd287a7 	.word	0x3fd287a7
 8007ec8:	8b60c8b3 	.word	0x8b60c8b3
 8007ecc:	3fc68a28 	.word	0x3fc68a28
 8007ed0:	509f79fb 	.word	0x509f79fb
 8007ed4:	3fd34413 	.word	0x3fd34413
 8007ed8:	0800ab2e 	.word	0x0800ab2e
 8007edc:	0800ab45 	.word	0x0800ab45
 8007ee0:	7ff00000 	.word	0x7ff00000
 8007ee4:	0800ab2a 	.word	0x0800ab2a
 8007ee8:	0800ab21 	.word	0x0800ab21
 8007eec:	0800a9a5 	.word	0x0800a9a5
 8007ef0:	3ff80000 	.word	0x3ff80000
 8007ef4:	0800acb0 	.word	0x0800acb0
 8007ef8:	0800aba0 	.word	0x0800aba0
 8007efc:	2401      	movs	r4, #1
 8007efe:	2300      	movs	r3, #0
 8007f00:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f02:	9322      	str	r3, [sp, #136]	; 0x88
 8007f04:	f04f 39ff 	mov.w	r9, #4294967295
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2312      	movs	r3, #18
 8007f0c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f10:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f12:	e7b0      	b.n	8007e76 <_dtoa_r+0x266>
 8007f14:	2301      	movs	r3, #1
 8007f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f18:	e7f4      	b.n	8007f04 <_dtoa_r+0x2f4>
 8007f1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f24:	e7a7      	b.n	8007e76 <_dtoa_r+0x266>
 8007f26:	3101      	adds	r1, #1
 8007f28:	6041      	str	r1, [r0, #4]
 8007f2a:	0052      	lsls	r2, r2, #1
 8007f2c:	e7a7      	b.n	8007e7e <_dtoa_r+0x26e>
 8007f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f30:	9a03      	ldr	r2, [sp, #12]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	2b0e      	cmp	r3, #14
 8007f38:	f200 80a8 	bhi.w	800808c <_dtoa_r+0x47c>
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	f000 80a5 	beq.w	800808c <_dtoa_r+0x47c>
 8007f42:	f1ba 0f00 	cmp.w	sl, #0
 8007f46:	dd34      	ble.n	8007fb2 <_dtoa_r+0x3a2>
 8007f48:	4a9a      	ldr	r2, [pc, #616]	; (80081b4 <_dtoa_r+0x5a4>)
 8007f4a:	f00a 030f 	and.w	r3, sl, #15
 8007f4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f52:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007f62:	d016      	beq.n	8007f92 <_dtoa_r+0x382>
 8007f64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f68:	4b93      	ldr	r3, [pc, #588]	; (80081b8 <_dtoa_r+0x5a8>)
 8007f6a:	2703      	movs	r7, #3
 8007f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f70:	f7f8 fc48 	bl	8000804 <__aeabi_ddiv>
 8007f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f78:	f004 040f 	and.w	r4, r4, #15
 8007f7c:	4e8e      	ldr	r6, [pc, #568]	; (80081b8 <_dtoa_r+0x5a8>)
 8007f7e:	b954      	cbnz	r4, 8007f96 <_dtoa_r+0x386>
 8007f80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f88:	f7f8 fc3c 	bl	8000804 <__aeabi_ddiv>
 8007f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f90:	e029      	b.n	8007fe6 <_dtoa_r+0x3d6>
 8007f92:	2702      	movs	r7, #2
 8007f94:	e7f2      	b.n	8007f7c <_dtoa_r+0x36c>
 8007f96:	07e1      	lsls	r1, r4, #31
 8007f98:	d508      	bpl.n	8007fac <_dtoa_r+0x39c>
 8007f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fa2:	f7f8 fb05 	bl	80005b0 <__aeabi_dmul>
 8007fa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007faa:	3701      	adds	r7, #1
 8007fac:	1064      	asrs	r4, r4, #1
 8007fae:	3608      	adds	r6, #8
 8007fb0:	e7e5      	b.n	8007f7e <_dtoa_r+0x36e>
 8007fb2:	f000 80a5 	beq.w	8008100 <_dtoa_r+0x4f0>
 8007fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fba:	f1ca 0400 	rsb	r4, sl, #0
 8007fbe:	4b7d      	ldr	r3, [pc, #500]	; (80081b4 <_dtoa_r+0x5a4>)
 8007fc0:	f004 020f 	and.w	r2, r4, #15
 8007fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 faf0 	bl	80005b0 <__aeabi_dmul>
 8007fd0:	2702      	movs	r7, #2
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fd8:	4e77      	ldr	r6, [pc, #476]	; (80081b8 <_dtoa_r+0x5a8>)
 8007fda:	1124      	asrs	r4, r4, #4
 8007fdc:	2c00      	cmp	r4, #0
 8007fde:	f040 8084 	bne.w	80080ea <_dtoa_r+0x4da>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1d2      	bne.n	8007f8c <_dtoa_r+0x37c>
 8007fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 808b 	beq.w	8008104 <_dtoa_r+0x4f4>
 8007fee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ff2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	; (80081bc <_dtoa_r+0x5ac>)
 8007ffe:	f7f8 fd49 	bl	8000a94 <__aeabi_dcmplt>
 8008002:	2800      	cmp	r0, #0
 8008004:	d07e      	beq.n	8008104 <_dtoa_r+0x4f4>
 8008006:	9b08      	ldr	r3, [sp, #32]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d07b      	beq.n	8008104 <_dtoa_r+0x4f4>
 800800c:	f1b9 0f00 	cmp.w	r9, #0
 8008010:	dd38      	ble.n	8008084 <_dtoa_r+0x474>
 8008012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	4b69      	ldr	r3, [pc, #420]	; (80081c0 <_dtoa_r+0x5b0>)
 800801a:	f7f8 fac9 	bl	80005b0 <__aeabi_dmul>
 800801e:	464c      	mov	r4, r9
 8008020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008024:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008028:	3701      	adds	r7, #1
 800802a:	4638      	mov	r0, r7
 800802c:	f7f8 fa56 	bl	80004dc <__aeabi_i2d>
 8008030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008034:	f7f8 fabc 	bl	80005b0 <__aeabi_dmul>
 8008038:	2200      	movs	r2, #0
 800803a:	4b62      	ldr	r3, [pc, #392]	; (80081c4 <_dtoa_r+0x5b4>)
 800803c:	f7f8 f902 	bl	8000244 <__adddf3>
 8008040:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008044:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008048:	9611      	str	r6, [sp, #68]	; 0x44
 800804a:	2c00      	cmp	r4, #0
 800804c:	d15d      	bne.n	800810a <_dtoa_r+0x4fa>
 800804e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008052:	2200      	movs	r2, #0
 8008054:	4b5c      	ldr	r3, [pc, #368]	; (80081c8 <_dtoa_r+0x5b8>)
 8008056:	f7f8 f8f3 	bl	8000240 <__aeabi_dsub>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008062:	4633      	mov	r3, r6
 8008064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008066:	f7f8 fd33 	bl	8000ad0 <__aeabi_dcmpgt>
 800806a:	2800      	cmp	r0, #0
 800806c:	f040 829c 	bne.w	80085a8 <_dtoa_r+0x998>
 8008070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008076:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800807a:	f7f8 fd0b 	bl	8000a94 <__aeabi_dcmplt>
 800807e:	2800      	cmp	r0, #0
 8008080:	f040 8290 	bne.w	80085a4 <_dtoa_r+0x994>
 8008084:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008088:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800808c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800808e:	2b00      	cmp	r3, #0
 8008090:	f2c0 8152 	blt.w	8008338 <_dtoa_r+0x728>
 8008094:	f1ba 0f0e 	cmp.w	sl, #14
 8008098:	f300 814e 	bgt.w	8008338 <_dtoa_r+0x728>
 800809c:	4b45      	ldr	r3, [pc, #276]	; (80081b4 <_dtoa_r+0x5a4>)
 800809e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80080aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f280 80db 	bge.w	8008268 <_dtoa_r+0x658>
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f300 80d7 	bgt.w	8008268 <_dtoa_r+0x658>
 80080ba:	f040 8272 	bne.w	80085a2 <_dtoa_r+0x992>
 80080be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c2:	2200      	movs	r2, #0
 80080c4:	4b40      	ldr	r3, [pc, #256]	; (80081c8 <_dtoa_r+0x5b8>)
 80080c6:	f7f8 fa73 	bl	80005b0 <__aeabi_dmul>
 80080ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ce:	f7f8 fcf5 	bl	8000abc <__aeabi_dcmpge>
 80080d2:	9c08      	ldr	r4, [sp, #32]
 80080d4:	4626      	mov	r6, r4
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f040 8248 	bne.w	800856c <_dtoa_r+0x95c>
 80080dc:	2331      	movs	r3, #49	; 0x31
 80080de:	9f03      	ldr	r7, [sp, #12]
 80080e0:	f10a 0a01 	add.w	sl, sl, #1
 80080e4:	f807 3b01 	strb.w	r3, [r7], #1
 80080e8:	e244      	b.n	8008574 <_dtoa_r+0x964>
 80080ea:	07e2      	lsls	r2, r4, #31
 80080ec:	d505      	bpl.n	80080fa <_dtoa_r+0x4ea>
 80080ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080f2:	f7f8 fa5d 	bl	80005b0 <__aeabi_dmul>
 80080f6:	2301      	movs	r3, #1
 80080f8:	3701      	adds	r7, #1
 80080fa:	1064      	asrs	r4, r4, #1
 80080fc:	3608      	adds	r6, #8
 80080fe:	e76d      	b.n	8007fdc <_dtoa_r+0x3cc>
 8008100:	2702      	movs	r7, #2
 8008102:	e770      	b.n	8007fe6 <_dtoa_r+0x3d6>
 8008104:	46d0      	mov	r8, sl
 8008106:	9c08      	ldr	r4, [sp, #32]
 8008108:	e78f      	b.n	800802a <_dtoa_r+0x41a>
 800810a:	9903      	ldr	r1, [sp, #12]
 800810c:	4b29      	ldr	r3, [pc, #164]	; (80081b4 <_dtoa_r+0x5a4>)
 800810e:	4421      	add	r1, r4
 8008110:	9112      	str	r1, [sp, #72]	; 0x48
 8008112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008118:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800811c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008120:	2900      	cmp	r1, #0
 8008122:	d055      	beq.n	80081d0 <_dtoa_r+0x5c0>
 8008124:	2000      	movs	r0, #0
 8008126:	4929      	ldr	r1, [pc, #164]	; (80081cc <_dtoa_r+0x5bc>)
 8008128:	f7f8 fb6c 	bl	8000804 <__aeabi_ddiv>
 800812c:	463b      	mov	r3, r7
 800812e:	4632      	mov	r2, r6
 8008130:	f7f8 f886 	bl	8000240 <__aeabi_dsub>
 8008134:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008138:	9f03      	ldr	r7, [sp, #12]
 800813a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813e:	f7f8 fce7 	bl	8000b10 <__aeabi_d2iz>
 8008142:	4604      	mov	r4, r0
 8008144:	f7f8 f9ca 	bl	80004dc <__aeabi_i2d>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008150:	f7f8 f876 	bl	8000240 <__aeabi_dsub>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	3430      	adds	r4, #48	; 0x30
 800815a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800815e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008162:	f807 4b01 	strb.w	r4, [r7], #1
 8008166:	f7f8 fc95 	bl	8000a94 <__aeabi_dcmplt>
 800816a:	2800      	cmp	r0, #0
 800816c:	d174      	bne.n	8008258 <_dtoa_r+0x648>
 800816e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008172:	2000      	movs	r0, #0
 8008174:	4911      	ldr	r1, [pc, #68]	; (80081bc <_dtoa_r+0x5ac>)
 8008176:	f7f8 f863 	bl	8000240 <__aeabi_dsub>
 800817a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800817e:	f7f8 fc89 	bl	8000a94 <__aeabi_dcmplt>
 8008182:	2800      	cmp	r0, #0
 8008184:	f040 80b7 	bne.w	80082f6 <_dtoa_r+0x6e6>
 8008188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818a:	429f      	cmp	r7, r3
 800818c:	f43f af7a 	beq.w	8008084 <_dtoa_r+0x474>
 8008190:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008194:	2200      	movs	r2, #0
 8008196:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <_dtoa_r+0x5b0>)
 8008198:	f7f8 fa0a 	bl	80005b0 <__aeabi_dmul>
 800819c:	2200      	movs	r2, #0
 800819e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <_dtoa_r+0x5b0>)
 80081a8:	f7f8 fa02 	bl	80005b0 <__aeabi_dmul>
 80081ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b0:	e7c3      	b.n	800813a <_dtoa_r+0x52a>
 80081b2:	bf00      	nop
 80081b4:	0800acb0 	.word	0x0800acb0
 80081b8:	0800ac88 	.word	0x0800ac88
 80081bc:	3ff00000 	.word	0x3ff00000
 80081c0:	40240000 	.word	0x40240000
 80081c4:	401c0000 	.word	0x401c0000
 80081c8:	40140000 	.word	0x40140000
 80081cc:	3fe00000 	.word	0x3fe00000
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 f9ec 	bl	80005b0 <__aeabi_dmul>
 80081d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081de:	9c03      	ldr	r4, [sp, #12]
 80081e0:	9314      	str	r3, [sp, #80]	; 0x50
 80081e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e6:	f7f8 fc93 	bl	8000b10 <__aeabi_d2iz>
 80081ea:	9015      	str	r0, [sp, #84]	; 0x54
 80081ec:	f7f8 f976 	bl	80004dc <__aeabi_i2d>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f8:	f7f8 f822 	bl	8000240 <__aeabi_dsub>
 80081fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fe:	4606      	mov	r6, r0
 8008200:	3330      	adds	r3, #48	; 0x30
 8008202:	f804 3b01 	strb.w	r3, [r4], #1
 8008206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008208:	460f      	mov	r7, r1
 800820a:	429c      	cmp	r4, r3
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	d124      	bne.n	800825c <_dtoa_r+0x64c>
 8008212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008216:	4bb0      	ldr	r3, [pc, #704]	; (80084d8 <_dtoa_r+0x8c8>)
 8008218:	f7f8 f814 	bl	8000244 <__adddf3>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc54 	bl	8000ad0 <__aeabi_dcmpgt>
 8008228:	2800      	cmp	r0, #0
 800822a:	d163      	bne.n	80082f4 <_dtoa_r+0x6e4>
 800822c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008230:	2000      	movs	r0, #0
 8008232:	49a9      	ldr	r1, [pc, #676]	; (80084d8 <_dtoa_r+0x8c8>)
 8008234:	f7f8 f804 	bl	8000240 <__aeabi_dsub>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 fc28 	bl	8000a94 <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	f43f af1d 	beq.w	8008084 <_dtoa_r+0x474>
 800824a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800824c:	1e7b      	subs	r3, r7, #1
 800824e:	9314      	str	r3, [sp, #80]	; 0x50
 8008250:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008254:	2b30      	cmp	r3, #48	; 0x30
 8008256:	d0f8      	beq.n	800824a <_dtoa_r+0x63a>
 8008258:	46c2      	mov	sl, r8
 800825a:	e03b      	b.n	80082d4 <_dtoa_r+0x6c4>
 800825c:	4b9f      	ldr	r3, [pc, #636]	; (80084dc <_dtoa_r+0x8cc>)
 800825e:	f7f8 f9a7 	bl	80005b0 <__aeabi_dmul>
 8008262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008266:	e7bc      	b.n	80081e2 <_dtoa_r+0x5d2>
 8008268:	9f03      	ldr	r7, [sp, #12]
 800826a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800826e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f8 fac5 	bl	8000804 <__aeabi_ddiv>
 800827a:	f7f8 fc49 	bl	8000b10 <__aeabi_d2iz>
 800827e:	4604      	mov	r4, r0
 8008280:	f7f8 f92c 	bl	80004dc <__aeabi_i2d>
 8008284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008288:	f7f8 f992 	bl	80005b0 <__aeabi_dmul>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f7 ffd4 	bl	8000240 <__aeabi_dsub>
 8008298:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800829c:	f807 6b01 	strb.w	r6, [r7], #1
 80082a0:	9e03      	ldr	r6, [sp, #12]
 80082a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80082a6:	1bbe      	subs	r6, r7, r6
 80082a8:	45b4      	cmp	ip, r6
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	d136      	bne.n	800831e <_dtoa_r+0x70e>
 80082b0:	f7f7 ffc8 	bl	8000244 <__adddf3>
 80082b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b8:	4680      	mov	r8, r0
 80082ba:	4689      	mov	r9, r1
 80082bc:	f7f8 fc08 	bl	8000ad0 <__aeabi_dcmpgt>
 80082c0:	bb58      	cbnz	r0, 800831a <_dtoa_r+0x70a>
 80082c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	f7f8 fbd9 	bl	8000a80 <__aeabi_dcmpeq>
 80082ce:	b108      	cbz	r0, 80082d4 <_dtoa_r+0x6c4>
 80082d0:	07e1      	lsls	r1, r4, #31
 80082d2:	d422      	bmi.n	800831a <_dtoa_r+0x70a>
 80082d4:	4628      	mov	r0, r5
 80082d6:	4659      	mov	r1, fp
 80082d8:	f000 fe68 	bl	8008fac <_Bfree>
 80082dc:	2300      	movs	r3, #0
 80082de:	703b      	strb	r3, [r7, #0]
 80082e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082e2:	f10a 0001 	add.w	r0, sl, #1
 80082e6:	6018      	str	r0, [r3, #0]
 80082e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f43f acde 	beq.w	8007cac <_dtoa_r+0x9c>
 80082f0:	601f      	str	r7, [r3, #0]
 80082f2:	e4db      	b.n	8007cac <_dtoa_r+0x9c>
 80082f4:	4627      	mov	r7, r4
 80082f6:	463b      	mov	r3, r7
 80082f8:	461f      	mov	r7, r3
 80082fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fe:	2a39      	cmp	r2, #57	; 0x39
 8008300:	d107      	bne.n	8008312 <_dtoa_r+0x702>
 8008302:	9a03      	ldr	r2, [sp, #12]
 8008304:	429a      	cmp	r2, r3
 8008306:	d1f7      	bne.n	80082f8 <_dtoa_r+0x6e8>
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	9903      	ldr	r1, [sp, #12]
 800830c:	f108 0801 	add.w	r8, r8, #1
 8008310:	700a      	strb	r2, [r1, #0]
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	3201      	adds	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	e79e      	b.n	8008258 <_dtoa_r+0x648>
 800831a:	46d0      	mov	r8, sl
 800831c:	e7eb      	b.n	80082f6 <_dtoa_r+0x6e6>
 800831e:	2200      	movs	r2, #0
 8008320:	4b6e      	ldr	r3, [pc, #440]	; (80084dc <_dtoa_r+0x8cc>)
 8008322:	f7f8 f945 	bl	80005b0 <__aeabi_dmul>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4680      	mov	r8, r0
 800832c:	4689      	mov	r9, r1
 800832e:	f7f8 fba7 	bl	8000a80 <__aeabi_dcmpeq>
 8008332:	2800      	cmp	r0, #0
 8008334:	d09b      	beq.n	800826e <_dtoa_r+0x65e>
 8008336:	e7cd      	b.n	80082d4 <_dtoa_r+0x6c4>
 8008338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800833a:	2a00      	cmp	r2, #0
 800833c:	f000 80d0 	beq.w	80084e0 <_dtoa_r+0x8d0>
 8008340:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008342:	2a01      	cmp	r2, #1
 8008344:	f300 80ae 	bgt.w	80084a4 <_dtoa_r+0x894>
 8008348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800834a:	2a00      	cmp	r2, #0
 800834c:	f000 80a6 	beq.w	800849c <_dtoa_r+0x88c>
 8008350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008354:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008356:	9f06      	ldr	r7, [sp, #24]
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	2101      	movs	r1, #1
 800835c:	441a      	add	r2, r3
 800835e:	9206      	str	r2, [sp, #24]
 8008360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008362:	4628      	mov	r0, r5
 8008364:	441a      	add	r2, r3
 8008366:	9209      	str	r2, [sp, #36]	; 0x24
 8008368:	f000 ff20 	bl	80091ac <__i2b>
 800836c:	4606      	mov	r6, r0
 800836e:	2f00      	cmp	r7, #0
 8008370:	dd0c      	ble.n	800838c <_dtoa_r+0x77c>
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	dd09      	ble.n	800838c <_dtoa_r+0x77c>
 8008378:	42bb      	cmp	r3, r7
 800837a:	bfa8      	it	ge
 800837c:	463b      	movge	r3, r7
 800837e:	9a06      	ldr	r2, [sp, #24]
 8008380:	1aff      	subs	r7, r7, r3
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	9206      	str	r2, [sp, #24]
 8008386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	9309      	str	r3, [sp, #36]	; 0x24
 800838c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838e:	b1f3      	cbz	r3, 80083ce <_dtoa_r+0x7be>
 8008390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 80a8 	beq.w	80084e8 <_dtoa_r+0x8d8>
 8008398:	2c00      	cmp	r4, #0
 800839a:	dd10      	ble.n	80083be <_dtoa_r+0x7ae>
 800839c:	4631      	mov	r1, r6
 800839e:	4622      	mov	r2, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 ffc1 	bl	8009328 <__pow5mult>
 80083a6:	465a      	mov	r2, fp
 80083a8:	4601      	mov	r1, r0
 80083aa:	4606      	mov	r6, r0
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 ff13 	bl	80091d8 <__multiply>
 80083b2:	4680      	mov	r8, r0
 80083b4:	4659      	mov	r1, fp
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 fdf8 	bl	8008fac <_Bfree>
 80083bc:	46c3      	mov	fp, r8
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	1b1a      	subs	r2, r3, r4
 80083c2:	d004      	beq.n	80083ce <_dtoa_r+0x7be>
 80083c4:	4659      	mov	r1, fp
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 ffae 	bl	8009328 <__pow5mult>
 80083cc:	4683      	mov	fp, r0
 80083ce:	2101      	movs	r1, #1
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 feeb 	bl	80091ac <__i2b>
 80083d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d8:	4604      	mov	r4, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f340 8086 	ble.w	80084ec <_dtoa_r+0x8dc>
 80083e0:	461a      	mov	r2, r3
 80083e2:	4601      	mov	r1, r0
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 ff9f 	bl	8009328 <__pow5mult>
 80083ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ec:	4604      	mov	r4, r0
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	dd7f      	ble.n	80084f2 <_dtoa_r+0x8e2>
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083fc:	6918      	ldr	r0, [r3, #16]
 80083fe:	f000 fe87 	bl	8009110 <__hi0bits>
 8008402:	f1c0 0020 	rsb	r0, r0, #32
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	4418      	add	r0, r3
 800840a:	f010 001f 	ands.w	r0, r0, #31
 800840e:	f000 8092 	beq.w	8008536 <_dtoa_r+0x926>
 8008412:	f1c0 0320 	rsb	r3, r0, #32
 8008416:	2b04      	cmp	r3, #4
 8008418:	f340 808a 	ble.w	8008530 <_dtoa_r+0x920>
 800841c:	f1c0 001c 	rsb	r0, r0, #28
 8008420:	9b06      	ldr	r3, [sp, #24]
 8008422:	4407      	add	r7, r0
 8008424:	4403      	add	r3, r0
 8008426:	9306      	str	r3, [sp, #24]
 8008428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842a:	4403      	add	r3, r0
 800842c:	9309      	str	r3, [sp, #36]	; 0x24
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	dd05      	ble.n	8008440 <_dtoa_r+0x830>
 8008434:	4659      	mov	r1, fp
 8008436:	461a      	mov	r2, r3
 8008438:	4628      	mov	r0, r5
 800843a:	f000 ffcf 	bl	80093dc <__lshift>
 800843e:	4683      	mov	fp, r0
 8008440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	dd05      	ble.n	8008452 <_dtoa_r+0x842>
 8008446:	4621      	mov	r1, r4
 8008448:	461a      	mov	r2, r3
 800844a:	4628      	mov	r0, r5
 800844c:	f000 ffc6 	bl	80093dc <__lshift>
 8008450:	4604      	mov	r4, r0
 8008452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d070      	beq.n	800853a <_dtoa_r+0x92a>
 8008458:	4621      	mov	r1, r4
 800845a:	4658      	mov	r0, fp
 800845c:	f001 f82e 	bl	80094bc <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	da6a      	bge.n	800853a <_dtoa_r+0x92a>
 8008464:	2300      	movs	r3, #0
 8008466:	4659      	mov	r1, fp
 8008468:	220a      	movs	r2, #10
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fdc0 	bl	8008ff0 <__multadd>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	4683      	mov	fp, r0
 8008474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8194 	beq.w	80087a6 <_dtoa_r+0xb96>
 800847e:	4631      	mov	r1, r6
 8008480:	2300      	movs	r3, #0
 8008482:	220a      	movs	r2, #10
 8008484:	4628      	mov	r0, r5
 8008486:	f000 fdb3 	bl	8008ff0 <__multadd>
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	4606      	mov	r6, r0
 8008490:	f300 8093 	bgt.w	80085ba <_dtoa_r+0x9aa>
 8008494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008496:	2b02      	cmp	r3, #2
 8008498:	dc57      	bgt.n	800854a <_dtoa_r+0x93a>
 800849a:	e08e      	b.n	80085ba <_dtoa_r+0x9aa>
 800849c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800849e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084a2:	e757      	b.n	8008354 <_dtoa_r+0x744>
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	1e5c      	subs	r4, r3, #1
 80084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	bfb7      	itett	lt
 80084ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084b0:	1b1c      	subge	r4, r3, r4
 80084b2:	1ae2      	sublt	r2, r4, r3
 80084b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084b6:	bfbe      	ittt	lt
 80084b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80084ba:	189b      	addlt	r3, r3, r2
 80084bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084be:	9b08      	ldr	r3, [sp, #32]
 80084c0:	bfb8      	it	lt
 80084c2:	2400      	movlt	r4, #0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfbb      	ittet	lt
 80084c8:	9b06      	ldrlt	r3, [sp, #24]
 80084ca:	9a08      	ldrlt	r2, [sp, #32]
 80084cc:	9f06      	ldrge	r7, [sp, #24]
 80084ce:	1a9f      	sublt	r7, r3, r2
 80084d0:	bfac      	ite	ge
 80084d2:	9b08      	ldrge	r3, [sp, #32]
 80084d4:	2300      	movlt	r3, #0
 80084d6:	e73f      	b.n	8008358 <_dtoa_r+0x748>
 80084d8:	3fe00000 	.word	0x3fe00000
 80084dc:	40240000 	.word	0x40240000
 80084e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084e2:	9f06      	ldr	r7, [sp, #24]
 80084e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80084e6:	e742      	b.n	800836e <_dtoa_r+0x75e>
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	e76b      	b.n	80083c4 <_dtoa_r+0x7b4>
 80084ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	dc19      	bgt.n	8008526 <_dtoa_r+0x916>
 80084f2:	9b04      	ldr	r3, [sp, #16]
 80084f4:	b9bb      	cbnz	r3, 8008526 <_dtoa_r+0x916>
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084fc:	b99b      	cbnz	r3, 8008526 <_dtoa_r+0x916>
 80084fe:	9b05      	ldr	r3, [sp, #20]
 8008500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008504:	0d1b      	lsrs	r3, r3, #20
 8008506:	051b      	lsls	r3, r3, #20
 8008508:	b183      	cbz	r3, 800852c <_dtoa_r+0x91c>
 800850a:	f04f 0801 	mov.w	r8, #1
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	3301      	adds	r3, #1
 8008512:	9306      	str	r3, [sp, #24]
 8008514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008516:	3301      	adds	r3, #1
 8008518:	9309      	str	r3, [sp, #36]	; 0x24
 800851a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af6a 	bne.w	80083f6 <_dtoa_r+0x7e6>
 8008522:	2001      	movs	r0, #1
 8008524:	e76f      	b.n	8008406 <_dtoa_r+0x7f6>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	e7f6      	b.n	800851a <_dtoa_r+0x90a>
 800852c:	4698      	mov	r8, r3
 800852e:	e7f4      	b.n	800851a <_dtoa_r+0x90a>
 8008530:	f43f af7d 	beq.w	800842e <_dtoa_r+0x81e>
 8008534:	4618      	mov	r0, r3
 8008536:	301c      	adds	r0, #28
 8008538:	e772      	b.n	8008420 <_dtoa_r+0x810>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc36      	bgt.n	80085ae <_dtoa_r+0x99e>
 8008540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008542:	2b02      	cmp	r3, #2
 8008544:	dd33      	ble.n	80085ae <_dtoa_r+0x99e>
 8008546:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800854a:	f1b9 0f00 	cmp.w	r9, #0
 800854e:	d10d      	bne.n	800856c <_dtoa_r+0x95c>
 8008550:	4621      	mov	r1, r4
 8008552:	464b      	mov	r3, r9
 8008554:	2205      	movs	r2, #5
 8008556:	4628      	mov	r0, r5
 8008558:	f000 fd4a 	bl	8008ff0 <__multadd>
 800855c:	4601      	mov	r1, r0
 800855e:	4604      	mov	r4, r0
 8008560:	4658      	mov	r0, fp
 8008562:	f000 ffab 	bl	80094bc <__mcmp>
 8008566:	2800      	cmp	r0, #0
 8008568:	f73f adb8 	bgt.w	80080dc <_dtoa_r+0x4cc>
 800856c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800856e:	9f03      	ldr	r7, [sp, #12]
 8008570:	ea6f 0a03 	mvn.w	sl, r3
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fd16 	bl	8008fac <_Bfree>
 8008580:	2e00      	cmp	r6, #0
 8008582:	f43f aea7 	beq.w	80082d4 <_dtoa_r+0x6c4>
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	d005      	beq.n	8008598 <_dtoa_r+0x988>
 800858c:	45b0      	cmp	r8, r6
 800858e:	d003      	beq.n	8008598 <_dtoa_r+0x988>
 8008590:	4641      	mov	r1, r8
 8008592:	4628      	mov	r0, r5
 8008594:	f000 fd0a 	bl	8008fac <_Bfree>
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	f000 fd06 	bl	8008fac <_Bfree>
 80085a0:	e698      	b.n	80082d4 <_dtoa_r+0x6c4>
 80085a2:	2400      	movs	r4, #0
 80085a4:	4626      	mov	r6, r4
 80085a6:	e7e1      	b.n	800856c <_dtoa_r+0x95c>
 80085a8:	46c2      	mov	sl, r8
 80085aa:	4626      	mov	r6, r4
 80085ac:	e596      	b.n	80080dc <_dtoa_r+0x4cc>
 80085ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 80fd 	beq.w	80087b4 <_dtoa_r+0xba4>
 80085ba:	2f00      	cmp	r7, #0
 80085bc:	dd05      	ble.n	80085ca <_dtoa_r+0x9ba>
 80085be:	4631      	mov	r1, r6
 80085c0:	463a      	mov	r2, r7
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 ff0a 	bl	80093dc <__lshift>
 80085c8:	4606      	mov	r6, r0
 80085ca:	f1b8 0f00 	cmp.w	r8, #0
 80085ce:	d05c      	beq.n	800868a <_dtoa_r+0xa7a>
 80085d0:	4628      	mov	r0, r5
 80085d2:	6871      	ldr	r1, [r6, #4]
 80085d4:	f000 fcaa 	bl	8008f2c <_Balloc>
 80085d8:	4607      	mov	r7, r0
 80085da:	b928      	cbnz	r0, 80085e8 <_dtoa_r+0x9d8>
 80085dc:	4602      	mov	r2, r0
 80085de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085e2:	4b7f      	ldr	r3, [pc, #508]	; (80087e0 <_dtoa_r+0xbd0>)
 80085e4:	f7ff bb28 	b.w	8007c38 <_dtoa_r+0x28>
 80085e8:	6932      	ldr	r2, [r6, #16]
 80085ea:	f106 010c 	add.w	r1, r6, #12
 80085ee:	3202      	adds	r2, #2
 80085f0:	0092      	lsls	r2, r2, #2
 80085f2:	300c      	adds	r0, #12
 80085f4:	f000 fc8c 	bl	8008f10 <memcpy>
 80085f8:	2201      	movs	r2, #1
 80085fa:	4639      	mov	r1, r7
 80085fc:	4628      	mov	r0, r5
 80085fe:	f000 feed 	bl	80093dc <__lshift>
 8008602:	46b0      	mov	r8, r6
 8008604:	4606      	mov	r6, r0
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	3301      	adds	r3, #1
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	444b      	add	r3, r9
 8008610:	930a      	str	r3, [sp, #40]	; 0x28
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	4621      	mov	r1, r4
 800861e:	3b01      	subs	r3, #1
 8008620:	4658      	mov	r0, fp
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	f7ff fa68 	bl	8007af8 <quorem>
 8008628:	4603      	mov	r3, r0
 800862a:	4641      	mov	r1, r8
 800862c:	3330      	adds	r3, #48	; 0x30
 800862e:	9006      	str	r0, [sp, #24]
 8008630:	4658      	mov	r0, fp
 8008632:	930b      	str	r3, [sp, #44]	; 0x2c
 8008634:	f000 ff42 	bl	80094bc <__mcmp>
 8008638:	4632      	mov	r2, r6
 800863a:	4681      	mov	r9, r0
 800863c:	4621      	mov	r1, r4
 800863e:	4628      	mov	r0, r5
 8008640:	f000 ff58 	bl	80094f4 <__mdiff>
 8008644:	68c2      	ldr	r2, [r0, #12]
 8008646:	4607      	mov	r7, r0
 8008648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864a:	bb02      	cbnz	r2, 800868e <_dtoa_r+0xa7e>
 800864c:	4601      	mov	r1, r0
 800864e:	4658      	mov	r0, fp
 8008650:	f000 ff34 	bl	80094bc <__mcmp>
 8008654:	4602      	mov	r2, r0
 8008656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008658:	4639      	mov	r1, r7
 800865a:	4628      	mov	r0, r5
 800865c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008660:	f000 fca4 	bl	8008fac <_Bfree>
 8008664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008668:	9f08      	ldr	r7, [sp, #32]
 800866a:	ea43 0102 	orr.w	r1, r3, r2
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	430b      	orrs	r3, r1
 8008672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008674:	d10d      	bne.n	8008692 <_dtoa_r+0xa82>
 8008676:	2b39      	cmp	r3, #57	; 0x39
 8008678:	d029      	beq.n	80086ce <_dtoa_r+0xabe>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	dd01      	ble.n	8008684 <_dtoa_r+0xa74>
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	3331      	adds	r3, #49	; 0x31
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	7013      	strb	r3, [r2, #0]
 8008688:	e776      	b.n	8008578 <_dtoa_r+0x968>
 800868a:	4630      	mov	r0, r6
 800868c:	e7b9      	b.n	8008602 <_dtoa_r+0x9f2>
 800868e:	2201      	movs	r2, #1
 8008690:	e7e2      	b.n	8008658 <_dtoa_r+0xa48>
 8008692:	f1b9 0f00 	cmp.w	r9, #0
 8008696:	db06      	blt.n	80086a6 <_dtoa_r+0xa96>
 8008698:	9922      	ldr	r1, [sp, #136]	; 0x88
 800869a:	ea41 0909 	orr.w	r9, r1, r9
 800869e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a0:	ea59 0101 	orrs.w	r1, r9, r1
 80086a4:	d120      	bne.n	80086e8 <_dtoa_r+0xad8>
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	ddec      	ble.n	8008684 <_dtoa_r+0xa74>
 80086aa:	4659      	mov	r1, fp
 80086ac:	2201      	movs	r2, #1
 80086ae:	4628      	mov	r0, r5
 80086b0:	9308      	str	r3, [sp, #32]
 80086b2:	f000 fe93 	bl	80093dc <__lshift>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4683      	mov	fp, r0
 80086ba:	f000 feff 	bl	80094bc <__mcmp>
 80086be:	2800      	cmp	r0, #0
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	dc02      	bgt.n	80086ca <_dtoa_r+0xaba>
 80086c4:	d1de      	bne.n	8008684 <_dtoa_r+0xa74>
 80086c6:	07da      	lsls	r2, r3, #31
 80086c8:	d5dc      	bpl.n	8008684 <_dtoa_r+0xa74>
 80086ca:	2b39      	cmp	r3, #57	; 0x39
 80086cc:	d1d8      	bne.n	8008680 <_dtoa_r+0xa70>
 80086ce:	2339      	movs	r3, #57	; 0x39
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	7013      	strb	r3, [r2, #0]
 80086d4:	463b      	mov	r3, r7
 80086d6:	461f      	mov	r7, r3
 80086d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80086dc:	3b01      	subs	r3, #1
 80086de:	2a39      	cmp	r2, #57	; 0x39
 80086e0:	d050      	beq.n	8008784 <_dtoa_r+0xb74>
 80086e2:	3201      	adds	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	e747      	b.n	8008578 <_dtoa_r+0x968>
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	dd03      	ble.n	80086f4 <_dtoa_r+0xae4>
 80086ec:	2b39      	cmp	r3, #57	; 0x39
 80086ee:	d0ee      	beq.n	80086ce <_dtoa_r+0xabe>
 80086f0:	3301      	adds	r3, #1
 80086f2:	e7c7      	b.n	8008684 <_dtoa_r+0xa74>
 80086f4:	9a08      	ldr	r2, [sp, #32]
 80086f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086fc:	428a      	cmp	r2, r1
 80086fe:	d02a      	beq.n	8008756 <_dtoa_r+0xb46>
 8008700:	4659      	mov	r1, fp
 8008702:	2300      	movs	r3, #0
 8008704:	220a      	movs	r2, #10
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fc72 	bl	8008ff0 <__multadd>
 800870c:	45b0      	cmp	r8, r6
 800870e:	4683      	mov	fp, r0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	f04f 020a 	mov.w	r2, #10
 8008718:	4641      	mov	r1, r8
 800871a:	4628      	mov	r0, r5
 800871c:	d107      	bne.n	800872e <_dtoa_r+0xb1e>
 800871e:	f000 fc67 	bl	8008ff0 <__multadd>
 8008722:	4680      	mov	r8, r0
 8008724:	4606      	mov	r6, r0
 8008726:	9b08      	ldr	r3, [sp, #32]
 8008728:	3301      	adds	r3, #1
 800872a:	9308      	str	r3, [sp, #32]
 800872c:	e775      	b.n	800861a <_dtoa_r+0xa0a>
 800872e:	f000 fc5f 	bl	8008ff0 <__multadd>
 8008732:	4631      	mov	r1, r6
 8008734:	4680      	mov	r8, r0
 8008736:	2300      	movs	r3, #0
 8008738:	220a      	movs	r2, #10
 800873a:	4628      	mov	r0, r5
 800873c:	f000 fc58 	bl	8008ff0 <__multadd>
 8008740:	4606      	mov	r6, r0
 8008742:	e7f0      	b.n	8008726 <_dtoa_r+0xb16>
 8008744:	f1b9 0f00 	cmp.w	r9, #0
 8008748:	bfcc      	ite	gt
 800874a:	464f      	movgt	r7, r9
 800874c:	2701      	movle	r7, #1
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	9a03      	ldr	r2, [sp, #12]
 8008754:	4417      	add	r7, r2
 8008756:	4659      	mov	r1, fp
 8008758:	2201      	movs	r2, #1
 800875a:	4628      	mov	r0, r5
 800875c:	9308      	str	r3, [sp, #32]
 800875e:	f000 fe3d 	bl	80093dc <__lshift>
 8008762:	4621      	mov	r1, r4
 8008764:	4683      	mov	fp, r0
 8008766:	f000 fea9 	bl	80094bc <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	dcb2      	bgt.n	80086d4 <_dtoa_r+0xac4>
 800876e:	d102      	bne.n	8008776 <_dtoa_r+0xb66>
 8008770:	9b08      	ldr	r3, [sp, #32]
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d4ae      	bmi.n	80086d4 <_dtoa_r+0xac4>
 8008776:	463b      	mov	r3, r7
 8008778:	461f      	mov	r7, r3
 800877a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877e:	2a30      	cmp	r2, #48	; 0x30
 8008780:	d0fa      	beq.n	8008778 <_dtoa_r+0xb68>
 8008782:	e6f9      	b.n	8008578 <_dtoa_r+0x968>
 8008784:	9a03      	ldr	r2, [sp, #12]
 8008786:	429a      	cmp	r2, r3
 8008788:	d1a5      	bne.n	80086d6 <_dtoa_r+0xac6>
 800878a:	2331      	movs	r3, #49	; 0x31
 800878c:	f10a 0a01 	add.w	sl, sl, #1
 8008790:	e779      	b.n	8008686 <_dtoa_r+0xa76>
 8008792:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <_dtoa_r+0xbd4>)
 8008794:	f7ff baa8 	b.w	8007ce8 <_dtoa_r+0xd8>
 8008798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800879a:	2b00      	cmp	r3, #0
 800879c:	f47f aa81 	bne.w	8007ca2 <_dtoa_r+0x92>
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <_dtoa_r+0xbd8>)
 80087a2:	f7ff baa1 	b.w	8007ce8 <_dtoa_r+0xd8>
 80087a6:	f1b9 0f00 	cmp.w	r9, #0
 80087aa:	dc03      	bgt.n	80087b4 <_dtoa_r+0xba4>
 80087ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	f73f aecb 	bgt.w	800854a <_dtoa_r+0x93a>
 80087b4:	9f03      	ldr	r7, [sp, #12]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4658      	mov	r0, fp
 80087ba:	f7ff f99d 	bl	8007af8 <quorem>
 80087be:	9a03      	ldr	r2, [sp, #12]
 80087c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087c4:	f807 3b01 	strb.w	r3, [r7], #1
 80087c8:	1aba      	subs	r2, r7, r2
 80087ca:	4591      	cmp	r9, r2
 80087cc:	ddba      	ble.n	8008744 <_dtoa_r+0xb34>
 80087ce:	4659      	mov	r1, fp
 80087d0:	2300      	movs	r3, #0
 80087d2:	220a      	movs	r2, #10
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 fc0b 	bl	8008ff0 <__multadd>
 80087da:	4683      	mov	fp, r0
 80087dc:	e7eb      	b.n	80087b6 <_dtoa_r+0xba6>
 80087de:	bf00      	nop
 80087e0:	0800aba0 	.word	0x0800aba0
 80087e4:	0800a9a4 	.word	0x0800a9a4
 80087e8:	0800ab21 	.word	0x0800ab21

080087ec <rshift>:
 80087ec:	6903      	ldr	r3, [r0, #16]
 80087ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087f6:	f100 0414 	add.w	r4, r0, #20
 80087fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087fe:	dd46      	ble.n	800888e <rshift+0xa2>
 8008800:	f011 011f 	ands.w	r1, r1, #31
 8008804:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008808:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800880c:	d10c      	bne.n	8008828 <rshift+0x3c>
 800880e:	4629      	mov	r1, r5
 8008810:	f100 0710 	add.w	r7, r0, #16
 8008814:	42b1      	cmp	r1, r6
 8008816:	d335      	bcc.n	8008884 <rshift+0x98>
 8008818:	1a9b      	subs	r3, r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	1eea      	subs	r2, r5, #3
 800881e:	4296      	cmp	r6, r2
 8008820:	bf38      	it	cc
 8008822:	2300      	movcc	r3, #0
 8008824:	4423      	add	r3, r4
 8008826:	e015      	b.n	8008854 <rshift+0x68>
 8008828:	46a1      	mov	r9, r4
 800882a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800882e:	f1c1 0820 	rsb	r8, r1, #32
 8008832:	40cf      	lsrs	r7, r1
 8008834:	f105 0e04 	add.w	lr, r5, #4
 8008838:	4576      	cmp	r6, lr
 800883a:	46f4      	mov	ip, lr
 800883c:	d816      	bhi.n	800886c <rshift+0x80>
 800883e:	1a9a      	subs	r2, r3, r2
 8008840:	0092      	lsls	r2, r2, #2
 8008842:	3a04      	subs	r2, #4
 8008844:	3501      	adds	r5, #1
 8008846:	42ae      	cmp	r6, r5
 8008848:	bf38      	it	cc
 800884a:	2200      	movcc	r2, #0
 800884c:	18a3      	adds	r3, r4, r2
 800884e:	50a7      	str	r7, [r4, r2]
 8008850:	b107      	cbz	r7, 8008854 <rshift+0x68>
 8008852:	3304      	adds	r3, #4
 8008854:	42a3      	cmp	r3, r4
 8008856:	eba3 0204 	sub.w	r2, r3, r4
 800885a:	bf08      	it	eq
 800885c:	2300      	moveq	r3, #0
 800885e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008862:	6102      	str	r2, [r0, #16]
 8008864:	bf08      	it	eq
 8008866:	6143      	streq	r3, [r0, #20]
 8008868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800886c:	f8dc c000 	ldr.w	ip, [ip]
 8008870:	fa0c fc08 	lsl.w	ip, ip, r8
 8008874:	ea4c 0707 	orr.w	r7, ip, r7
 8008878:	f849 7b04 	str.w	r7, [r9], #4
 800887c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008880:	40cf      	lsrs	r7, r1
 8008882:	e7d9      	b.n	8008838 <rshift+0x4c>
 8008884:	f851 cb04 	ldr.w	ip, [r1], #4
 8008888:	f847 cf04 	str.w	ip, [r7, #4]!
 800888c:	e7c2      	b.n	8008814 <rshift+0x28>
 800888e:	4623      	mov	r3, r4
 8008890:	e7e0      	b.n	8008854 <rshift+0x68>

08008892 <__hexdig_fun>:
 8008892:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008896:	2b09      	cmp	r3, #9
 8008898:	d802      	bhi.n	80088a0 <__hexdig_fun+0xe>
 800889a:	3820      	subs	r0, #32
 800889c:	b2c0      	uxtb	r0, r0
 800889e:	4770      	bx	lr
 80088a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088a4:	2b05      	cmp	r3, #5
 80088a6:	d801      	bhi.n	80088ac <__hexdig_fun+0x1a>
 80088a8:	3847      	subs	r0, #71	; 0x47
 80088aa:	e7f7      	b.n	800889c <__hexdig_fun+0xa>
 80088ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d801      	bhi.n	80088b8 <__hexdig_fun+0x26>
 80088b4:	3827      	subs	r0, #39	; 0x27
 80088b6:	e7f1      	b.n	800889c <__hexdig_fun+0xa>
 80088b8:	2000      	movs	r0, #0
 80088ba:	4770      	bx	lr

080088bc <__gethex>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	b08b      	sub	sp, #44	; 0x2c
 80088c2:	9305      	str	r3, [sp, #20]
 80088c4:	4bb2      	ldr	r3, [pc, #712]	; (8008b90 <__gethex+0x2d4>)
 80088c6:	9002      	str	r0, [sp, #8]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	468b      	mov	fp, r1
 80088cc:	4618      	mov	r0, r3
 80088ce:	4690      	mov	r8, r2
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	f7f7 fca9 	bl	8000228 <strlen>
 80088d6:	4682      	mov	sl, r0
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	f8db 2000 	ldr.w	r2, [fp]
 80088de:	4403      	add	r3, r0
 80088e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088e4:	9306      	str	r3, [sp, #24]
 80088e6:	1c93      	adds	r3, r2, #2
 80088e8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088ec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088f0:	32fe      	adds	r2, #254	; 0xfe
 80088f2:	18d1      	adds	r1, r2, r3
 80088f4:	461f      	mov	r7, r3
 80088f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088fa:	9101      	str	r1, [sp, #4]
 80088fc:	2830      	cmp	r0, #48	; 0x30
 80088fe:	d0f8      	beq.n	80088f2 <__gethex+0x36>
 8008900:	f7ff ffc7 	bl	8008892 <__hexdig_fun>
 8008904:	4604      	mov	r4, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d13a      	bne.n	8008980 <__gethex+0xc4>
 800890a:	4652      	mov	r2, sl
 800890c:	4638      	mov	r0, r7
 800890e:	9903      	ldr	r1, [sp, #12]
 8008910:	f001 fa26 	bl	8009d60 <strncmp>
 8008914:	4605      	mov	r5, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d166      	bne.n	80089e8 <__gethex+0x12c>
 800891a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800891e:	eb07 060a 	add.w	r6, r7, sl
 8008922:	f7ff ffb6 	bl	8008892 <__hexdig_fun>
 8008926:	2800      	cmp	r0, #0
 8008928:	d060      	beq.n	80089ec <__gethex+0x130>
 800892a:	4633      	mov	r3, r6
 800892c:	7818      	ldrb	r0, [r3, #0]
 800892e:	461f      	mov	r7, r3
 8008930:	2830      	cmp	r0, #48	; 0x30
 8008932:	f103 0301 	add.w	r3, r3, #1
 8008936:	d0f9      	beq.n	800892c <__gethex+0x70>
 8008938:	f7ff ffab 	bl	8008892 <__hexdig_fun>
 800893c:	2301      	movs	r3, #1
 800893e:	fab0 f480 	clz	r4, r0
 8008942:	4635      	mov	r5, r6
 8008944:	0964      	lsrs	r4, r4, #5
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	463a      	mov	r2, r7
 800894a:	4616      	mov	r6, r2
 800894c:	7830      	ldrb	r0, [r6, #0]
 800894e:	3201      	adds	r2, #1
 8008950:	f7ff ff9f 	bl	8008892 <__hexdig_fun>
 8008954:	2800      	cmp	r0, #0
 8008956:	d1f8      	bne.n	800894a <__gethex+0x8e>
 8008958:	4652      	mov	r2, sl
 800895a:	4630      	mov	r0, r6
 800895c:	9903      	ldr	r1, [sp, #12]
 800895e:	f001 f9ff 	bl	8009d60 <strncmp>
 8008962:	b980      	cbnz	r0, 8008986 <__gethex+0xca>
 8008964:	b94d      	cbnz	r5, 800897a <__gethex+0xbe>
 8008966:	eb06 050a 	add.w	r5, r6, sl
 800896a:	462a      	mov	r2, r5
 800896c:	4616      	mov	r6, r2
 800896e:	7830      	ldrb	r0, [r6, #0]
 8008970:	3201      	adds	r2, #1
 8008972:	f7ff ff8e 	bl	8008892 <__hexdig_fun>
 8008976:	2800      	cmp	r0, #0
 8008978:	d1f8      	bne.n	800896c <__gethex+0xb0>
 800897a:	1bad      	subs	r5, r5, r6
 800897c:	00ad      	lsls	r5, r5, #2
 800897e:	e004      	b.n	800898a <__gethex+0xce>
 8008980:	2400      	movs	r4, #0
 8008982:	4625      	mov	r5, r4
 8008984:	e7e0      	b.n	8008948 <__gethex+0x8c>
 8008986:	2d00      	cmp	r5, #0
 8008988:	d1f7      	bne.n	800897a <__gethex+0xbe>
 800898a:	7833      	ldrb	r3, [r6, #0]
 800898c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008990:	2b50      	cmp	r3, #80	; 0x50
 8008992:	d139      	bne.n	8008a08 <__gethex+0x14c>
 8008994:	7873      	ldrb	r3, [r6, #1]
 8008996:	2b2b      	cmp	r3, #43	; 0x2b
 8008998:	d02a      	beq.n	80089f0 <__gethex+0x134>
 800899a:	2b2d      	cmp	r3, #45	; 0x2d
 800899c:	d02c      	beq.n	80089f8 <__gethex+0x13c>
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	1c71      	adds	r1, r6, #1
 80089a4:	7808      	ldrb	r0, [r1, #0]
 80089a6:	f7ff ff74 	bl	8008892 <__hexdig_fun>
 80089aa:	1e43      	subs	r3, r0, #1
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b18      	cmp	r3, #24
 80089b0:	d82a      	bhi.n	8008a08 <__gethex+0x14c>
 80089b2:	f1a0 0210 	sub.w	r2, r0, #16
 80089b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089ba:	f7ff ff6a 	bl	8008892 <__hexdig_fun>
 80089be:	1e43      	subs	r3, r0, #1
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b18      	cmp	r3, #24
 80089c4:	d91b      	bls.n	80089fe <__gethex+0x142>
 80089c6:	f1b9 0f00 	cmp.w	r9, #0
 80089ca:	d000      	beq.n	80089ce <__gethex+0x112>
 80089cc:	4252      	negs	r2, r2
 80089ce:	4415      	add	r5, r2
 80089d0:	f8cb 1000 	str.w	r1, [fp]
 80089d4:	b1d4      	cbz	r4, 8008a0c <__gethex+0x150>
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bf14      	ite	ne
 80089dc:	2700      	movne	r7, #0
 80089de:	2706      	moveq	r7, #6
 80089e0:	4638      	mov	r0, r7
 80089e2:	b00b      	add	sp, #44	; 0x2c
 80089e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e8:	463e      	mov	r6, r7
 80089ea:	4625      	mov	r5, r4
 80089ec:	2401      	movs	r4, #1
 80089ee:	e7cc      	b.n	800898a <__gethex+0xce>
 80089f0:	f04f 0900 	mov.w	r9, #0
 80089f4:	1cb1      	adds	r1, r6, #2
 80089f6:	e7d5      	b.n	80089a4 <__gethex+0xe8>
 80089f8:	f04f 0901 	mov.w	r9, #1
 80089fc:	e7fa      	b.n	80089f4 <__gethex+0x138>
 80089fe:	230a      	movs	r3, #10
 8008a00:	fb03 0202 	mla	r2, r3, r2, r0
 8008a04:	3a10      	subs	r2, #16
 8008a06:	e7d6      	b.n	80089b6 <__gethex+0xfa>
 8008a08:	4631      	mov	r1, r6
 8008a0a:	e7e1      	b.n	80089d0 <__gethex+0x114>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	1bf3      	subs	r3, r6, r7
 8008a10:	3b01      	subs	r3, #1
 8008a12:	2b07      	cmp	r3, #7
 8008a14:	dc0a      	bgt.n	8008a2c <__gethex+0x170>
 8008a16:	9802      	ldr	r0, [sp, #8]
 8008a18:	f000 fa88 	bl	8008f2c <_Balloc>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	b940      	cbnz	r0, 8008a32 <__gethex+0x176>
 8008a20:	4602      	mov	r2, r0
 8008a22:	21de      	movs	r1, #222	; 0xde
 8008a24:	4b5b      	ldr	r3, [pc, #364]	; (8008b94 <__gethex+0x2d8>)
 8008a26:	485c      	ldr	r0, [pc, #368]	; (8008b98 <__gethex+0x2dc>)
 8008a28:	f001 f9bc 	bl	8009da4 <__assert_func>
 8008a2c:	3101      	adds	r1, #1
 8008a2e:	105b      	asrs	r3, r3, #1
 8008a30:	e7ef      	b.n	8008a12 <__gethex+0x156>
 8008a32:	f04f 0b00 	mov.w	fp, #0
 8008a36:	f100 0914 	add.w	r9, r0, #20
 8008a3a:	f1ca 0301 	rsb	r3, sl, #1
 8008a3e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a42:	f8cd b004 	str.w	fp, [sp, #4]
 8008a46:	9308      	str	r3, [sp, #32]
 8008a48:	42b7      	cmp	r7, r6
 8008a4a:	d33f      	bcc.n	8008acc <__gethex+0x210>
 8008a4c:	9f04      	ldr	r7, [sp, #16]
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	f847 3b04 	str.w	r3, [r7], #4
 8008a54:	eba7 0709 	sub.w	r7, r7, r9
 8008a58:	10bf      	asrs	r7, r7, #2
 8008a5a:	6127      	str	r7, [r4, #16]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fb57 	bl	8009110 <__hi0bits>
 8008a62:	017f      	lsls	r7, r7, #5
 8008a64:	f8d8 6000 	ldr.w	r6, [r8]
 8008a68:	1a3f      	subs	r7, r7, r0
 8008a6a:	42b7      	cmp	r7, r6
 8008a6c:	dd62      	ble.n	8008b34 <__gethex+0x278>
 8008a6e:	1bbf      	subs	r7, r7, r6
 8008a70:	4639      	mov	r1, r7
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fef1 	bl	800985a <__any_on>
 8008a78:	4682      	mov	sl, r0
 8008a7a:	b1a8      	cbz	r0, 8008aa8 <__gethex+0x1ec>
 8008a7c:	f04f 0a01 	mov.w	sl, #1
 8008a80:	1e7b      	subs	r3, r7, #1
 8008a82:	1159      	asrs	r1, r3, #5
 8008a84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a88:	f003 021f 	and.w	r2, r3, #31
 8008a8c:	fa0a f202 	lsl.w	r2, sl, r2
 8008a90:	420a      	tst	r2, r1
 8008a92:	d009      	beq.n	8008aa8 <__gethex+0x1ec>
 8008a94:	4553      	cmp	r3, sl
 8008a96:	dd05      	ble.n	8008aa4 <__gethex+0x1e8>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	1eb9      	subs	r1, r7, #2
 8008a9c:	f000 fedd 	bl	800985a <__any_on>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d144      	bne.n	8008b2e <__gethex+0x272>
 8008aa4:	f04f 0a02 	mov.w	sl, #2
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7ff fe9e 	bl	80087ec <rshift>
 8008ab0:	443d      	add	r5, r7
 8008ab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ab6:	42ab      	cmp	r3, r5
 8008ab8:	da4a      	bge.n	8008b50 <__gethex+0x294>
 8008aba:	4621      	mov	r1, r4
 8008abc:	9802      	ldr	r0, [sp, #8]
 8008abe:	f000 fa75 	bl	8008fac <_Bfree>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ac6:	27a3      	movs	r7, #163	; 0xa3
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	e789      	b.n	80089e0 <__gethex+0x124>
 8008acc:	1e73      	subs	r3, r6, #1
 8008ace:	9a06      	ldr	r2, [sp, #24]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d019      	beq.n	8008b0e <__gethex+0x252>
 8008ada:	f1bb 0f20 	cmp.w	fp, #32
 8008ade:	d107      	bne.n	8008af0 <__gethex+0x234>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	9a01      	ldr	r2, [sp, #4]
 8008ae4:	f843 2b04 	str.w	r2, [r3], #4
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	2300      	movs	r3, #0
 8008aec:	469b      	mov	fp, r3
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008af4:	f7ff fecd 	bl	8008892 <__hexdig_fun>
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f000 000f 	and.w	r0, r0, #15
 8008afe:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b02:	4303      	orrs	r3, r0
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	f10b 0b04 	add.w	fp, fp, #4
 8008b0a:	9b07      	ldr	r3, [sp, #28]
 8008b0c:	e00d      	b.n	8008b2a <__gethex+0x26e>
 8008b0e:	9a08      	ldr	r2, [sp, #32]
 8008b10:	1e73      	subs	r3, r6, #1
 8008b12:	4413      	add	r3, r2
 8008b14:	42bb      	cmp	r3, r7
 8008b16:	d3e0      	bcc.n	8008ada <__gethex+0x21e>
 8008b18:	4618      	mov	r0, r3
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	9903      	ldr	r1, [sp, #12]
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	f001 f91e 	bl	8009d60 <strncmp>
 8008b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d1d7      	bne.n	8008ada <__gethex+0x21e>
 8008b2a:	461e      	mov	r6, r3
 8008b2c:	e78c      	b.n	8008a48 <__gethex+0x18c>
 8008b2e:	f04f 0a03 	mov.w	sl, #3
 8008b32:	e7b9      	b.n	8008aa8 <__gethex+0x1ec>
 8008b34:	da09      	bge.n	8008b4a <__gethex+0x28e>
 8008b36:	1bf7      	subs	r7, r6, r7
 8008b38:	4621      	mov	r1, r4
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	9802      	ldr	r0, [sp, #8]
 8008b3e:	f000 fc4d 	bl	80093dc <__lshift>
 8008b42:	4604      	mov	r4, r0
 8008b44:	1bed      	subs	r5, r5, r7
 8008b46:	f100 0914 	add.w	r9, r0, #20
 8008b4a:	f04f 0a00 	mov.w	sl, #0
 8008b4e:	e7b0      	b.n	8008ab2 <__gethex+0x1f6>
 8008b50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b54:	42a8      	cmp	r0, r5
 8008b56:	dd72      	ble.n	8008c3e <__gethex+0x382>
 8008b58:	1b45      	subs	r5, r0, r5
 8008b5a:	42ae      	cmp	r6, r5
 8008b5c:	dc35      	bgt.n	8008bca <__gethex+0x30e>
 8008b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d029      	beq.n	8008bba <__gethex+0x2fe>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d02b      	beq.n	8008bc2 <__gethex+0x306>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d11c      	bne.n	8008ba8 <__gethex+0x2ec>
 8008b6e:	42ae      	cmp	r6, r5
 8008b70:	d11a      	bne.n	8008ba8 <__gethex+0x2ec>
 8008b72:	2e01      	cmp	r6, #1
 8008b74:	d112      	bne.n	8008b9c <__gethex+0x2e0>
 8008b76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b7a:	9a05      	ldr	r2, [sp, #20]
 8008b7c:	2762      	movs	r7, #98	; 0x62
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	2301      	movs	r3, #1
 8008b82:	6123      	str	r3, [r4, #16]
 8008b84:	f8c9 3000 	str.w	r3, [r9]
 8008b88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b8a:	601c      	str	r4, [r3, #0]
 8008b8c:	e728      	b.n	80089e0 <__gethex+0x124>
 8008b8e:	bf00      	nop
 8008b90:	0800ac18 	.word	0x0800ac18
 8008b94:	0800aba0 	.word	0x0800aba0
 8008b98:	0800abb1 	.word	0x0800abb1
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	1e71      	subs	r1, r6, #1
 8008ba0:	f000 fe5b 	bl	800985a <__any_on>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1e6      	bne.n	8008b76 <__gethex+0x2ba>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	9802      	ldr	r0, [sp, #8]
 8008bac:	f000 f9fe 	bl	8008fac <_Bfree>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bb4:	2750      	movs	r7, #80	; 0x50
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	e712      	b.n	80089e0 <__gethex+0x124>
 8008bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f3      	bne.n	8008ba8 <__gethex+0x2ec>
 8008bc0:	e7d9      	b.n	8008b76 <__gethex+0x2ba>
 8008bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1d6      	bne.n	8008b76 <__gethex+0x2ba>
 8008bc8:	e7ee      	b.n	8008ba8 <__gethex+0x2ec>
 8008bca:	1e6f      	subs	r7, r5, #1
 8008bcc:	f1ba 0f00 	cmp.w	sl, #0
 8008bd0:	d132      	bne.n	8008c38 <__gethex+0x37c>
 8008bd2:	b127      	cbz	r7, 8008bde <__gethex+0x322>
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f000 fe3f 	bl	800985a <__any_on>
 8008bdc:	4682      	mov	sl, r0
 8008bde:	2101      	movs	r1, #1
 8008be0:	117b      	asrs	r3, r7, #5
 8008be2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008be6:	f007 071f 	and.w	r7, r7, #31
 8008bea:	fa01 f707 	lsl.w	r7, r1, r7
 8008bee:	421f      	tst	r7, r3
 8008bf0:	f04f 0702 	mov.w	r7, #2
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	bf18      	it	ne
 8008bfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bfe:	1b76      	subs	r6, r6, r5
 8008c00:	f7ff fdf4 	bl	80087ec <rshift>
 8008c04:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c08:	f1ba 0f00 	cmp.w	sl, #0
 8008c0c:	d048      	beq.n	8008ca0 <__gethex+0x3e4>
 8008c0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d015      	beq.n	8008c42 <__gethex+0x386>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d017      	beq.n	8008c4a <__gethex+0x38e>
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d109      	bne.n	8008c32 <__gethex+0x376>
 8008c1e:	f01a 0f02 	tst.w	sl, #2
 8008c22:	d006      	beq.n	8008c32 <__gethex+0x376>
 8008c24:	f8d9 0000 	ldr.w	r0, [r9]
 8008c28:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c2c:	f01a 0f01 	tst.w	sl, #1
 8008c30:	d10e      	bne.n	8008c50 <__gethex+0x394>
 8008c32:	f047 0710 	orr.w	r7, r7, #16
 8008c36:	e033      	b.n	8008ca0 <__gethex+0x3e4>
 8008c38:	f04f 0a01 	mov.w	sl, #1
 8008c3c:	e7cf      	b.n	8008bde <__gethex+0x322>
 8008c3e:	2701      	movs	r7, #1
 8008c40:	e7e2      	b.n	8008c08 <__gethex+0x34c>
 8008c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c44:	f1c3 0301 	rsb	r3, r3, #1
 8008c48:	9315      	str	r3, [sp, #84]	; 0x54
 8008c4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0f0      	beq.n	8008c32 <__gethex+0x376>
 8008c50:	f04f 0c00 	mov.w	ip, #0
 8008c54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c58:	f104 0314 	add.w	r3, r4, #20
 8008c5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c60:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c6e:	d01c      	beq.n	8008caa <__gethex+0x3ee>
 8008c70:	3201      	adds	r2, #1
 8008c72:	6002      	str	r2, [r0, #0]
 8008c74:	2f02      	cmp	r7, #2
 8008c76:	f104 0314 	add.w	r3, r4, #20
 8008c7a:	d13d      	bne.n	8008cf8 <__gethex+0x43c>
 8008c7c:	f8d8 2000 	ldr.w	r2, [r8]
 8008c80:	3a01      	subs	r2, #1
 8008c82:	42b2      	cmp	r2, r6
 8008c84:	d10a      	bne.n	8008c9c <__gethex+0x3e0>
 8008c86:	2201      	movs	r2, #1
 8008c88:	1171      	asrs	r1, r6, #5
 8008c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c8e:	f006 061f 	and.w	r6, r6, #31
 8008c92:	fa02 f606 	lsl.w	r6, r2, r6
 8008c96:	421e      	tst	r6, r3
 8008c98:	bf18      	it	ne
 8008c9a:	4617      	movne	r7, r2
 8008c9c:	f047 0720 	orr.w	r7, r7, #32
 8008ca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ca2:	601c      	str	r4, [r3, #0]
 8008ca4:	9b05      	ldr	r3, [sp, #20]
 8008ca6:	601d      	str	r5, [r3, #0]
 8008ca8:	e69a      	b.n	80089e0 <__gethex+0x124>
 8008caa:	4299      	cmp	r1, r3
 8008cac:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cb0:	d8d8      	bhi.n	8008c64 <__gethex+0x3a8>
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	459b      	cmp	fp, r3
 8008cb6:	db17      	blt.n	8008ce8 <__gethex+0x42c>
 8008cb8:	6861      	ldr	r1, [r4, #4]
 8008cba:	9802      	ldr	r0, [sp, #8]
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	f000 f935 	bl	8008f2c <_Balloc>
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	b918      	cbnz	r0, 8008cce <__gethex+0x412>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	2184      	movs	r1, #132	; 0x84
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <__gethex+0x474>)
 8008ccc:	e6ab      	b.n	8008a26 <__gethex+0x16a>
 8008cce:	6922      	ldr	r2, [r4, #16]
 8008cd0:	f104 010c 	add.w	r1, r4, #12
 8008cd4:	3202      	adds	r2, #2
 8008cd6:	0092      	lsls	r2, r2, #2
 8008cd8:	300c      	adds	r0, #12
 8008cda:	f000 f919 	bl	8008f10 <memcpy>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	9802      	ldr	r0, [sp, #8]
 8008ce2:	f000 f963 	bl	8008fac <_Bfree>
 8008ce6:	464c      	mov	r4, r9
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	6122      	str	r2, [r4, #16]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cf4:	615a      	str	r2, [r3, #20]
 8008cf6:	e7bd      	b.n	8008c74 <__gethex+0x3b8>
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	455a      	cmp	r2, fp
 8008cfc:	dd0b      	ble.n	8008d16 <__gethex+0x45a>
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f7ff fd73 	bl	80087ec <rshift>
 8008d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	42ab      	cmp	r3, r5
 8008d0e:	f6ff aed4 	blt.w	8008aba <__gethex+0x1fe>
 8008d12:	2701      	movs	r7, #1
 8008d14:	e7c2      	b.n	8008c9c <__gethex+0x3e0>
 8008d16:	f016 061f 	ands.w	r6, r6, #31
 8008d1a:	d0fa      	beq.n	8008d12 <__gethex+0x456>
 8008d1c:	4453      	add	r3, sl
 8008d1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d22:	f000 f9f5 	bl	8009110 <__hi0bits>
 8008d26:	f1c6 0620 	rsb	r6, r6, #32
 8008d2a:	42b0      	cmp	r0, r6
 8008d2c:	dbe7      	blt.n	8008cfe <__gethex+0x442>
 8008d2e:	e7f0      	b.n	8008d12 <__gethex+0x456>
 8008d30:	0800aba0 	.word	0x0800aba0

08008d34 <L_shift>:
 8008d34:	f1c2 0208 	rsb	r2, r2, #8
 8008d38:	0092      	lsls	r2, r2, #2
 8008d3a:	b570      	push	{r4, r5, r6, lr}
 8008d3c:	f1c2 0620 	rsb	r6, r2, #32
 8008d40:	6843      	ldr	r3, [r0, #4]
 8008d42:	6804      	ldr	r4, [r0, #0]
 8008d44:	fa03 f506 	lsl.w	r5, r3, r6
 8008d48:	432c      	orrs	r4, r5
 8008d4a:	40d3      	lsrs	r3, r2
 8008d4c:	6004      	str	r4, [r0, #0]
 8008d4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d52:	4288      	cmp	r0, r1
 8008d54:	d3f4      	bcc.n	8008d40 <L_shift+0xc>
 8008d56:	bd70      	pop	{r4, r5, r6, pc}

08008d58 <__match>:
 8008d58:	b530      	push	{r4, r5, lr}
 8008d5a:	6803      	ldr	r3, [r0, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d62:	b914      	cbnz	r4, 8008d6a <__match+0x12>
 8008d64:	6003      	str	r3, [r0, #0]
 8008d66:	2001      	movs	r0, #1
 8008d68:	bd30      	pop	{r4, r5, pc}
 8008d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d72:	2d19      	cmp	r5, #25
 8008d74:	bf98      	it	ls
 8008d76:	3220      	addls	r2, #32
 8008d78:	42a2      	cmp	r2, r4
 8008d7a:	d0f0      	beq.n	8008d5e <__match+0x6>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e7f3      	b.n	8008d68 <__match+0x10>

08008d80 <__hexnan>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	2500      	movs	r5, #0
 8008d86:	680b      	ldr	r3, [r1, #0]
 8008d88:	4682      	mov	sl, r0
 8008d8a:	115e      	asrs	r6, r3, #5
 8008d8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d90:	f013 031f 	ands.w	r3, r3, #31
 8008d94:	bf18      	it	ne
 8008d96:	3604      	addne	r6, #4
 8008d98:	1f37      	subs	r7, r6, #4
 8008d9a:	46b9      	mov	r9, r7
 8008d9c:	463c      	mov	r4, r7
 8008d9e:	46ab      	mov	fp, r5
 8008da0:	b087      	sub	sp, #28
 8008da2:	4690      	mov	r8, r2
 8008da4:	6802      	ldr	r2, [r0, #0]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dac:	9502      	str	r5, [sp, #8]
 8008dae:	7851      	ldrb	r1, [r2, #1]
 8008db0:	1c53      	adds	r3, r2, #1
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	b341      	cbz	r1, 8008e08 <__hexnan+0x88>
 8008db6:	4608      	mov	r0, r1
 8008db8:	9205      	str	r2, [sp, #20]
 8008dba:	9104      	str	r1, [sp, #16]
 8008dbc:	f7ff fd69 	bl	8008892 <__hexdig_fun>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d14f      	bne.n	8008e64 <__hexnan+0xe4>
 8008dc4:	9904      	ldr	r1, [sp, #16]
 8008dc6:	9a05      	ldr	r2, [sp, #20]
 8008dc8:	2920      	cmp	r1, #32
 8008dca:	d818      	bhi.n	8008dfe <__hexnan+0x7e>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	459b      	cmp	fp, r3
 8008dd0:	dd13      	ble.n	8008dfa <__hexnan+0x7a>
 8008dd2:	454c      	cmp	r4, r9
 8008dd4:	d206      	bcs.n	8008de4 <__hexnan+0x64>
 8008dd6:	2d07      	cmp	r5, #7
 8008dd8:	dc04      	bgt.n	8008de4 <__hexnan+0x64>
 8008dda:	462a      	mov	r2, r5
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff ffa8 	bl	8008d34 <L_shift>
 8008de4:	4544      	cmp	r4, r8
 8008de6:	d950      	bls.n	8008e8a <__hexnan+0x10a>
 8008de8:	2300      	movs	r3, #0
 8008dea:	f1a4 0904 	sub.w	r9, r4, #4
 8008dee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008df2:	461d      	mov	r5, r3
 8008df4:	464c      	mov	r4, r9
 8008df6:	f8cd b008 	str.w	fp, [sp, #8]
 8008dfa:	9a03      	ldr	r2, [sp, #12]
 8008dfc:	e7d7      	b.n	8008dae <__hexnan+0x2e>
 8008dfe:	2929      	cmp	r1, #41	; 0x29
 8008e00:	d156      	bne.n	8008eb0 <__hexnan+0x130>
 8008e02:	3202      	adds	r2, #2
 8008e04:	f8ca 2000 	str.w	r2, [sl]
 8008e08:	f1bb 0f00 	cmp.w	fp, #0
 8008e0c:	d050      	beq.n	8008eb0 <__hexnan+0x130>
 8008e0e:	454c      	cmp	r4, r9
 8008e10:	d206      	bcs.n	8008e20 <__hexnan+0xa0>
 8008e12:	2d07      	cmp	r5, #7
 8008e14:	dc04      	bgt.n	8008e20 <__hexnan+0xa0>
 8008e16:	462a      	mov	r2, r5
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7ff ff8a 	bl	8008d34 <L_shift>
 8008e20:	4544      	cmp	r4, r8
 8008e22:	d934      	bls.n	8008e8e <__hexnan+0x10e>
 8008e24:	4623      	mov	r3, r4
 8008e26:	f1a8 0204 	sub.w	r2, r8, #4
 8008e2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e2e:	429f      	cmp	r7, r3
 8008e30:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e34:	d2f9      	bcs.n	8008e2a <__hexnan+0xaa>
 8008e36:	1b3b      	subs	r3, r7, r4
 8008e38:	f023 0303 	bic.w	r3, r3, #3
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	3401      	adds	r4, #1
 8008e40:	3e03      	subs	r6, #3
 8008e42:	42b4      	cmp	r4, r6
 8008e44:	bf88      	it	hi
 8008e46:	2304      	movhi	r3, #4
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4443      	add	r3, r8
 8008e4c:	f843 2b04 	str.w	r2, [r3], #4
 8008e50:	429f      	cmp	r7, r3
 8008e52:	d2fb      	bcs.n	8008e4c <__hexnan+0xcc>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	b91b      	cbnz	r3, 8008e60 <__hexnan+0xe0>
 8008e58:	4547      	cmp	r7, r8
 8008e5a:	d127      	bne.n	8008eac <__hexnan+0x12c>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	2005      	movs	r0, #5
 8008e62:	e026      	b.n	8008eb2 <__hexnan+0x132>
 8008e64:	3501      	adds	r5, #1
 8008e66:	2d08      	cmp	r5, #8
 8008e68:	f10b 0b01 	add.w	fp, fp, #1
 8008e6c:	dd06      	ble.n	8008e7c <__hexnan+0xfc>
 8008e6e:	4544      	cmp	r4, r8
 8008e70:	d9c3      	bls.n	8008dfa <__hexnan+0x7a>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2501      	movs	r5, #1
 8008e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e7a:	3c04      	subs	r4, #4
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	f000 000f 	and.w	r0, r0, #15
 8008e82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e86:	6022      	str	r2, [r4, #0]
 8008e88:	e7b7      	b.n	8008dfa <__hexnan+0x7a>
 8008e8a:	2508      	movs	r5, #8
 8008e8c:	e7b5      	b.n	8008dfa <__hexnan+0x7a>
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0df      	beq.n	8008e54 <__hexnan+0xd4>
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	f1c3 0320 	rsb	r3, r3, #32
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ea4:	401a      	ands	r2, r3
 8008ea6:	f846 2c04 	str.w	r2, [r6, #-4]
 8008eaa:	e7d3      	b.n	8008e54 <__hexnan+0xd4>
 8008eac:	3f04      	subs	r7, #4
 8008eae:	e7d1      	b.n	8008e54 <__hexnan+0xd4>
 8008eb0:	2004      	movs	r0, #4
 8008eb2:	b007      	add	sp, #28
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eb8 <_localeconv_r>:
 8008eb8:	4800      	ldr	r0, [pc, #0]	; (8008ebc <_localeconv_r+0x4>)
 8008eba:	4770      	bx	lr
 8008ebc:	20000164 	.word	0x20000164

08008ec0 <malloc>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <malloc+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f000 bd65 	b.w	8009994 <_malloc_r>
 8008eca:	bf00      	nop
 8008ecc:	2000000c 	.word	0x2000000c

08008ed0 <__ascii_mbtowc>:
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	b901      	cbnz	r1, 8008ed6 <__ascii_mbtowc+0x6>
 8008ed4:	a901      	add	r1, sp, #4
 8008ed6:	b142      	cbz	r2, 8008eea <__ascii_mbtowc+0x1a>
 8008ed8:	b14b      	cbz	r3, 8008eee <__ascii_mbtowc+0x1e>
 8008eda:	7813      	ldrb	r3, [r2, #0]
 8008edc:	600b      	str	r3, [r1, #0]
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	1e10      	subs	r0, r2, #0
 8008ee2:	bf18      	it	ne
 8008ee4:	2001      	movne	r0, #1
 8008ee6:	b002      	add	sp, #8
 8008ee8:	4770      	bx	lr
 8008eea:	4610      	mov	r0, r2
 8008eec:	e7fb      	b.n	8008ee6 <__ascii_mbtowc+0x16>
 8008eee:	f06f 0001 	mvn.w	r0, #1
 8008ef2:	e7f8      	b.n	8008ee6 <__ascii_mbtowc+0x16>

08008ef4 <memchr>:
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	b2c9      	uxtb	r1, r1
 8008efa:	4402      	add	r2, r0
 8008efc:	4293      	cmp	r3, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	d101      	bne.n	8008f06 <memchr+0x12>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e003      	b.n	8008f0e <memchr+0x1a>
 8008f06:	7804      	ldrb	r4, [r0, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	428c      	cmp	r4, r1
 8008f0c:	d1f6      	bne.n	8008efc <memchr+0x8>
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	4291      	cmp	r1, r2
 8008f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <_Balloc>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	b976      	cbnz	r6, 8008f54 <_Balloc+0x28>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f7ff ffc2 	bl	8008ec0 <malloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f40:	b920      	cbnz	r0, 8008f4c <_Balloc+0x20>
 8008f42:	2166      	movs	r1, #102	; 0x66
 8008f44:	4b17      	ldr	r3, [pc, #92]	; (8008fa4 <_Balloc+0x78>)
 8008f46:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <_Balloc+0x7c>)
 8008f48:	f000 ff2c 	bl	8009da4 <__assert_func>
 8008f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f50:	6006      	str	r6, [r0, #0]
 8008f52:	60c6      	str	r6, [r0, #12]
 8008f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f56:	68f3      	ldr	r3, [r6, #12]
 8008f58:	b183      	cbz	r3, 8008f7c <_Balloc+0x50>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f62:	b9b8      	cbnz	r0, 8008f94 <_Balloc+0x68>
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6a:	1d72      	adds	r2, r6, #5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	0092      	lsls	r2, r2, #2
 8008f70:	f000 fc94 	bl	800989c <_calloc_r>
 8008f74:	b160      	cbz	r0, 8008f90 <_Balloc+0x64>
 8008f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7a:	e00e      	b.n	8008f9a <_Balloc+0x6e>
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fc8b 	bl	800989c <_calloc_r>
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	60f0      	str	r0, [r6, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e4      	bne.n	8008f5a <_Balloc+0x2e>
 8008f90:	2000      	movs	r0, #0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa0:	e7f7      	b.n	8008f92 <_Balloc+0x66>
 8008fa2:	bf00      	nop
 8008fa4:	0800ab2e 	.word	0x0800ab2e
 8008fa8:	0800ac2c 	.word	0x0800ac2c

08008fac <_Bfree>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	b976      	cbnz	r6, 8008fd4 <_Bfree+0x28>
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f7ff ff82 	bl	8008ec0 <malloc>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8008fc0:	b920      	cbnz	r0, 8008fcc <_Bfree+0x20>
 8008fc2:	218a      	movs	r1, #138	; 0x8a
 8008fc4:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <_Bfree+0x3c>)
 8008fc6:	4809      	ldr	r0, [pc, #36]	; (8008fec <_Bfree+0x40>)
 8008fc8:	f000 feec 	bl	8009da4 <__assert_func>
 8008fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd0:	6006      	str	r6, [r0, #0]
 8008fd2:	60c6      	str	r6, [r0, #12]
 8008fd4:	b13c      	cbz	r4, 8008fe6 <_Bfree+0x3a>
 8008fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd8:	6862      	ldr	r2, [r4, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe0:	6021      	str	r1, [r4, #0]
 8008fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0800ab2e 	.word	0x0800ab2e
 8008fec:	0800ac2c 	.word	0x0800ac2c

08008ff0 <__multadd>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	461e      	mov	r6, r3
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	690d      	ldr	r5, [r1, #16]
 8008ffe:	f101 0c14 	add.w	ip, r1, #20
 8009002:	f8dc 3000 	ldr.w	r3, [ip]
 8009006:	3001      	adds	r0, #1
 8009008:	b299      	uxth	r1, r3
 800900a:	fb02 6101 	mla	r1, r2, r1, r6
 800900e:	0c1e      	lsrs	r6, r3, #16
 8009010:	0c0b      	lsrs	r3, r1, #16
 8009012:	fb02 3306 	mla	r3, r2, r6, r3
 8009016:	b289      	uxth	r1, r1
 8009018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800901c:	4285      	cmp	r5, r0
 800901e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009022:	f84c 1b04 	str.w	r1, [ip], #4
 8009026:	dcec      	bgt.n	8009002 <__multadd+0x12>
 8009028:	b30e      	cbz	r6, 800906e <__multadd+0x7e>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc19      	bgt.n	8009064 <__multadd+0x74>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	4638      	mov	r0, r7
 8009034:	3101      	adds	r1, #1
 8009036:	f7ff ff79 	bl	8008f2c <_Balloc>
 800903a:	4680      	mov	r8, r0
 800903c:	b928      	cbnz	r0, 800904a <__multadd+0x5a>
 800903e:	4602      	mov	r2, r0
 8009040:	21b5      	movs	r1, #181	; 0xb5
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <__multadd+0x84>)
 8009044:	480c      	ldr	r0, [pc, #48]	; (8009078 <__multadd+0x88>)
 8009046:	f000 fead 	bl	8009da4 <__assert_func>
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	f104 010c 	add.w	r1, r4, #12
 8009050:	3202      	adds	r2, #2
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	300c      	adds	r0, #12
 8009056:	f7ff ff5b 	bl	8008f10 <memcpy>
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ffa5 	bl	8008fac <_Bfree>
 8009062:	4644      	mov	r4, r8
 8009064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009068:	3501      	adds	r5, #1
 800906a:	615e      	str	r6, [r3, #20]
 800906c:	6125      	str	r5, [r4, #16]
 800906e:	4620      	mov	r0, r4
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	0800aba0 	.word	0x0800aba0
 8009078:	0800ac2c 	.word	0x0800ac2c

0800907c <__s2b>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	4615      	mov	r5, r2
 8009082:	2209      	movs	r2, #9
 8009084:	461f      	mov	r7, r3
 8009086:	3308      	adds	r3, #8
 8009088:	460c      	mov	r4, r1
 800908a:	fb93 f3f2 	sdiv	r3, r3, r2
 800908e:	4606      	mov	r6, r0
 8009090:	2201      	movs	r2, #1
 8009092:	2100      	movs	r1, #0
 8009094:	429a      	cmp	r2, r3
 8009096:	db09      	blt.n	80090ac <__s2b+0x30>
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff ff47 	bl	8008f2c <_Balloc>
 800909e:	b940      	cbnz	r0, 80090b2 <__s2b+0x36>
 80090a0:	4602      	mov	r2, r0
 80090a2:	21ce      	movs	r1, #206	; 0xce
 80090a4:	4b18      	ldr	r3, [pc, #96]	; (8009108 <__s2b+0x8c>)
 80090a6:	4819      	ldr	r0, [pc, #100]	; (800910c <__s2b+0x90>)
 80090a8:	f000 fe7c 	bl	8009da4 <__assert_func>
 80090ac:	0052      	lsls	r2, r2, #1
 80090ae:	3101      	adds	r1, #1
 80090b0:	e7f0      	b.n	8009094 <__s2b+0x18>
 80090b2:	9b08      	ldr	r3, [sp, #32]
 80090b4:	2d09      	cmp	r5, #9
 80090b6:	6143      	str	r3, [r0, #20]
 80090b8:	f04f 0301 	mov.w	r3, #1
 80090bc:	6103      	str	r3, [r0, #16]
 80090be:	dd16      	ble.n	80090ee <__s2b+0x72>
 80090c0:	f104 0909 	add.w	r9, r4, #9
 80090c4:	46c8      	mov	r8, r9
 80090c6:	442c      	add	r4, r5
 80090c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090cc:	4601      	mov	r1, r0
 80090ce:	220a      	movs	r2, #10
 80090d0:	4630      	mov	r0, r6
 80090d2:	3b30      	subs	r3, #48	; 0x30
 80090d4:	f7ff ff8c 	bl	8008ff0 <__multadd>
 80090d8:	45a0      	cmp	r8, r4
 80090da:	d1f5      	bne.n	80090c8 <__s2b+0x4c>
 80090dc:	f1a5 0408 	sub.w	r4, r5, #8
 80090e0:	444c      	add	r4, r9
 80090e2:	1b2d      	subs	r5, r5, r4
 80090e4:	1963      	adds	r3, r4, r5
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	db04      	blt.n	80090f4 <__s2b+0x78>
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	2509      	movs	r5, #9
 80090f0:	340a      	adds	r4, #10
 80090f2:	e7f6      	b.n	80090e2 <__s2b+0x66>
 80090f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090f8:	4601      	mov	r1, r0
 80090fa:	220a      	movs	r2, #10
 80090fc:	4630      	mov	r0, r6
 80090fe:	3b30      	subs	r3, #48	; 0x30
 8009100:	f7ff ff76 	bl	8008ff0 <__multadd>
 8009104:	e7ee      	b.n	80090e4 <__s2b+0x68>
 8009106:	bf00      	nop
 8009108:	0800aba0 	.word	0x0800aba0
 800910c:	0800ac2c 	.word	0x0800ac2c

08009110 <__hi0bits>:
 8009110:	0c02      	lsrs	r2, r0, #16
 8009112:	0412      	lsls	r2, r2, #16
 8009114:	4603      	mov	r3, r0
 8009116:	b9ca      	cbnz	r2, 800914c <__hi0bits+0x3c>
 8009118:	0403      	lsls	r3, r0, #16
 800911a:	2010      	movs	r0, #16
 800911c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009120:	bf04      	itt	eq
 8009122:	021b      	lsleq	r3, r3, #8
 8009124:	3008      	addeq	r0, #8
 8009126:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800912a:	bf04      	itt	eq
 800912c:	011b      	lsleq	r3, r3, #4
 800912e:	3004      	addeq	r0, #4
 8009130:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009134:	bf04      	itt	eq
 8009136:	009b      	lsleq	r3, r3, #2
 8009138:	3002      	addeq	r0, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	db05      	blt.n	800914a <__hi0bits+0x3a>
 800913e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009142:	f100 0001 	add.w	r0, r0, #1
 8009146:	bf08      	it	eq
 8009148:	2020      	moveq	r0, #32
 800914a:	4770      	bx	lr
 800914c:	2000      	movs	r0, #0
 800914e:	e7e5      	b.n	800911c <__hi0bits+0xc>

08009150 <__lo0bits>:
 8009150:	6803      	ldr	r3, [r0, #0]
 8009152:	4602      	mov	r2, r0
 8009154:	f013 0007 	ands.w	r0, r3, #7
 8009158:	d00b      	beq.n	8009172 <__lo0bits+0x22>
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d421      	bmi.n	80091a2 <__lo0bits+0x52>
 800915e:	0798      	lsls	r0, r3, #30
 8009160:	bf49      	itett	mi
 8009162:	085b      	lsrmi	r3, r3, #1
 8009164:	089b      	lsrpl	r3, r3, #2
 8009166:	2001      	movmi	r0, #1
 8009168:	6013      	strmi	r3, [r2, #0]
 800916a:	bf5c      	itt	pl
 800916c:	2002      	movpl	r0, #2
 800916e:	6013      	strpl	r3, [r2, #0]
 8009170:	4770      	bx	lr
 8009172:	b299      	uxth	r1, r3
 8009174:	b909      	cbnz	r1, 800917a <__lo0bits+0x2a>
 8009176:	2010      	movs	r0, #16
 8009178:	0c1b      	lsrs	r3, r3, #16
 800917a:	b2d9      	uxtb	r1, r3
 800917c:	b909      	cbnz	r1, 8009182 <__lo0bits+0x32>
 800917e:	3008      	adds	r0, #8
 8009180:	0a1b      	lsrs	r3, r3, #8
 8009182:	0719      	lsls	r1, r3, #28
 8009184:	bf04      	itt	eq
 8009186:	091b      	lsreq	r3, r3, #4
 8009188:	3004      	addeq	r0, #4
 800918a:	0799      	lsls	r1, r3, #30
 800918c:	bf04      	itt	eq
 800918e:	089b      	lsreq	r3, r3, #2
 8009190:	3002      	addeq	r0, #2
 8009192:	07d9      	lsls	r1, r3, #31
 8009194:	d403      	bmi.n	800919e <__lo0bits+0x4e>
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	f100 0001 	add.w	r0, r0, #1
 800919c:	d003      	beq.n	80091a6 <__lo0bits+0x56>
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4770      	bx	lr
 80091a2:	2000      	movs	r0, #0
 80091a4:	4770      	bx	lr
 80091a6:	2020      	movs	r0, #32
 80091a8:	4770      	bx	lr
	...

080091ac <__i2b>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	460c      	mov	r4, r1
 80091b0:	2101      	movs	r1, #1
 80091b2:	f7ff febb 	bl	8008f2c <_Balloc>
 80091b6:	4602      	mov	r2, r0
 80091b8:	b928      	cbnz	r0, 80091c6 <__i2b+0x1a>
 80091ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <__i2b+0x24>)
 80091c0:	4804      	ldr	r0, [pc, #16]	; (80091d4 <__i2b+0x28>)
 80091c2:	f000 fdef 	bl	8009da4 <__assert_func>
 80091c6:	2301      	movs	r3, #1
 80091c8:	6144      	str	r4, [r0, #20]
 80091ca:	6103      	str	r3, [r0, #16]
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	bf00      	nop
 80091d0:	0800aba0 	.word	0x0800aba0
 80091d4:	0800ac2c 	.word	0x0800ac2c

080091d8 <__multiply>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	4691      	mov	r9, r2
 80091de:	690a      	ldr	r2, [r1, #16]
 80091e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091e4:	460c      	mov	r4, r1
 80091e6:	429a      	cmp	r2, r3
 80091e8:	bfbe      	ittt	lt
 80091ea:	460b      	movlt	r3, r1
 80091ec:	464c      	movlt	r4, r9
 80091ee:	4699      	movlt	r9, r3
 80091f0:	6927      	ldr	r7, [r4, #16]
 80091f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	6861      	ldr	r1, [r4, #4]
 80091fa:	eb07 060a 	add.w	r6, r7, sl
 80091fe:	42b3      	cmp	r3, r6
 8009200:	b085      	sub	sp, #20
 8009202:	bfb8      	it	lt
 8009204:	3101      	addlt	r1, #1
 8009206:	f7ff fe91 	bl	8008f2c <_Balloc>
 800920a:	b930      	cbnz	r0, 800921a <__multiply+0x42>
 800920c:	4602      	mov	r2, r0
 800920e:	f240 115d 	movw	r1, #349	; 0x15d
 8009212:	4b43      	ldr	r3, [pc, #268]	; (8009320 <__multiply+0x148>)
 8009214:	4843      	ldr	r0, [pc, #268]	; (8009324 <__multiply+0x14c>)
 8009216:	f000 fdc5 	bl	8009da4 <__assert_func>
 800921a:	f100 0514 	add.w	r5, r0, #20
 800921e:	462b      	mov	r3, r5
 8009220:	2200      	movs	r2, #0
 8009222:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009226:	4543      	cmp	r3, r8
 8009228:	d321      	bcc.n	800926e <__multiply+0x96>
 800922a:	f104 0314 	add.w	r3, r4, #20
 800922e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009232:	f109 0314 	add.w	r3, r9, #20
 8009236:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800923a:	9202      	str	r2, [sp, #8]
 800923c:	1b3a      	subs	r2, r7, r4
 800923e:	3a15      	subs	r2, #21
 8009240:	f022 0203 	bic.w	r2, r2, #3
 8009244:	3204      	adds	r2, #4
 8009246:	f104 0115 	add.w	r1, r4, #21
 800924a:	428f      	cmp	r7, r1
 800924c:	bf38      	it	cc
 800924e:	2204      	movcc	r2, #4
 8009250:	9201      	str	r2, [sp, #4]
 8009252:	9a02      	ldr	r2, [sp, #8]
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	429a      	cmp	r2, r3
 8009258:	d80c      	bhi.n	8009274 <__multiply+0x9c>
 800925a:	2e00      	cmp	r6, #0
 800925c:	dd03      	ble.n	8009266 <__multiply+0x8e>
 800925e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009262:	2b00      	cmp	r3, #0
 8009264:	d059      	beq.n	800931a <__multiply+0x142>
 8009266:	6106      	str	r6, [r0, #16]
 8009268:	b005      	add	sp, #20
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	f843 2b04 	str.w	r2, [r3], #4
 8009272:	e7d8      	b.n	8009226 <__multiply+0x4e>
 8009274:	f8b3 a000 	ldrh.w	sl, [r3]
 8009278:	f1ba 0f00 	cmp.w	sl, #0
 800927c:	d023      	beq.n	80092c6 <__multiply+0xee>
 800927e:	46a9      	mov	r9, r5
 8009280:	f04f 0c00 	mov.w	ip, #0
 8009284:	f104 0e14 	add.w	lr, r4, #20
 8009288:	f85e 2b04 	ldr.w	r2, [lr], #4
 800928c:	f8d9 1000 	ldr.w	r1, [r9]
 8009290:	fa1f fb82 	uxth.w	fp, r2
 8009294:	b289      	uxth	r1, r1
 8009296:	fb0a 110b 	mla	r1, sl, fp, r1
 800929a:	4461      	add	r1, ip
 800929c:	f8d9 c000 	ldr.w	ip, [r9]
 80092a0:	0c12      	lsrs	r2, r2, #16
 80092a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80092a6:	fb0a c202 	mla	r2, sl, r2, ip
 80092aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ae:	b289      	uxth	r1, r1
 80092b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092b4:	4577      	cmp	r7, lr
 80092b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ba:	f849 1b04 	str.w	r1, [r9], #4
 80092be:	d8e3      	bhi.n	8009288 <__multiply+0xb0>
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	f845 c002 	str.w	ip, [r5, r2]
 80092c6:	9a03      	ldr	r2, [sp, #12]
 80092c8:	3304      	adds	r3, #4
 80092ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092ce:	f1b9 0f00 	cmp.w	r9, #0
 80092d2:	d020      	beq.n	8009316 <__multiply+0x13e>
 80092d4:	46ae      	mov	lr, r5
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	6829      	ldr	r1, [r5, #0]
 80092dc:	f104 0c14 	add.w	ip, r4, #20
 80092e0:	f8bc b000 	ldrh.w	fp, [ip]
 80092e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092e8:	b289      	uxth	r1, r1
 80092ea:	fb09 220b 	mla	r2, r9, fp, r2
 80092ee:	4492      	add	sl, r2
 80092f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092f4:	f84e 1b04 	str.w	r1, [lr], #4
 80092f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092fc:	f8be 1000 	ldrh.w	r1, [lr]
 8009300:	0c12      	lsrs	r2, r2, #16
 8009302:	fb09 1102 	mla	r1, r9, r2, r1
 8009306:	4567      	cmp	r7, ip
 8009308:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800930c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009310:	d8e6      	bhi.n	80092e0 <__multiply+0x108>
 8009312:	9a01      	ldr	r2, [sp, #4]
 8009314:	50a9      	str	r1, [r5, r2]
 8009316:	3504      	adds	r5, #4
 8009318:	e79b      	b.n	8009252 <__multiply+0x7a>
 800931a:	3e01      	subs	r6, #1
 800931c:	e79d      	b.n	800925a <__multiply+0x82>
 800931e:	bf00      	nop
 8009320:	0800aba0 	.word	0x0800aba0
 8009324:	0800ac2c 	.word	0x0800ac2c

08009328 <__pow5mult>:
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4615      	mov	r5, r2
 800932e:	f012 0203 	ands.w	r2, r2, #3
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	d007      	beq.n	8009348 <__pow5mult+0x20>
 8009338:	4c25      	ldr	r4, [pc, #148]	; (80093d0 <__pow5mult+0xa8>)
 800933a:	3a01      	subs	r2, #1
 800933c:	2300      	movs	r3, #0
 800933e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009342:	f7ff fe55 	bl	8008ff0 <__multadd>
 8009346:	4607      	mov	r7, r0
 8009348:	10ad      	asrs	r5, r5, #2
 800934a:	d03d      	beq.n	80093c8 <__pow5mult+0xa0>
 800934c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800934e:	b97c      	cbnz	r4, 8009370 <__pow5mult+0x48>
 8009350:	2010      	movs	r0, #16
 8009352:	f7ff fdb5 	bl	8008ec0 <malloc>
 8009356:	4602      	mov	r2, r0
 8009358:	6270      	str	r0, [r6, #36]	; 0x24
 800935a:	b928      	cbnz	r0, 8009368 <__pow5mult+0x40>
 800935c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009360:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <__pow5mult+0xac>)
 8009362:	481d      	ldr	r0, [pc, #116]	; (80093d8 <__pow5mult+0xb0>)
 8009364:	f000 fd1e 	bl	8009da4 <__assert_func>
 8009368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800936c:	6004      	str	r4, [r0, #0]
 800936e:	60c4      	str	r4, [r0, #12]
 8009370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009378:	b94c      	cbnz	r4, 800938e <__pow5mult+0x66>
 800937a:	f240 2171 	movw	r1, #625	; 0x271
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ff14 	bl	80091ac <__i2b>
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	f8c8 0008 	str.w	r0, [r8, #8]
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	07eb      	lsls	r3, r5, #31
 8009394:	d50a      	bpl.n	80093ac <__pow5mult+0x84>
 8009396:	4639      	mov	r1, r7
 8009398:	4622      	mov	r2, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ff1c 	bl	80091d8 <__multiply>
 80093a0:	4680      	mov	r8, r0
 80093a2:	4639      	mov	r1, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff fe01 	bl	8008fac <_Bfree>
 80093aa:	4647      	mov	r7, r8
 80093ac:	106d      	asrs	r5, r5, #1
 80093ae:	d00b      	beq.n	80093c8 <__pow5mult+0xa0>
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	b938      	cbnz	r0, 80093c4 <__pow5mult+0x9c>
 80093b4:	4622      	mov	r2, r4
 80093b6:	4621      	mov	r1, r4
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff ff0d 	bl	80091d8 <__multiply>
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	f8c0 9000 	str.w	r9, [r0]
 80093c4:	4604      	mov	r4, r0
 80093c6:	e7e4      	b.n	8009392 <__pow5mult+0x6a>
 80093c8:	4638      	mov	r0, r7
 80093ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ce:	bf00      	nop
 80093d0:	0800ad78 	.word	0x0800ad78
 80093d4:	0800ab2e 	.word	0x0800ab2e
 80093d8:	0800ac2c 	.word	0x0800ac2c

080093dc <__lshift>:
 80093dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	4607      	mov	r7, r0
 80093e4:	4691      	mov	r9, r2
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6849      	ldr	r1, [r1, #4]
 80093ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093f4:	f108 0601 	add.w	r6, r8, #1
 80093f8:	42b3      	cmp	r3, r6
 80093fa:	db0b      	blt.n	8009414 <__lshift+0x38>
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff fd95 	bl	8008f2c <_Balloc>
 8009402:	4605      	mov	r5, r0
 8009404:	b948      	cbnz	r0, 800941a <__lshift+0x3e>
 8009406:	4602      	mov	r2, r0
 8009408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800940c:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <__lshift+0xd8>)
 800940e:	482a      	ldr	r0, [pc, #168]	; (80094b8 <__lshift+0xdc>)
 8009410:	f000 fcc8 	bl	8009da4 <__assert_func>
 8009414:	3101      	adds	r1, #1
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	e7ee      	b.n	80093f8 <__lshift+0x1c>
 800941a:	2300      	movs	r3, #0
 800941c:	f100 0114 	add.w	r1, r0, #20
 8009420:	f100 0210 	add.w	r2, r0, #16
 8009424:	4618      	mov	r0, r3
 8009426:	4553      	cmp	r3, sl
 8009428:	db37      	blt.n	800949a <__lshift+0xbe>
 800942a:	6920      	ldr	r0, [r4, #16]
 800942c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009430:	f104 0314 	add.w	r3, r4, #20
 8009434:	f019 091f 	ands.w	r9, r9, #31
 8009438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800943c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009440:	d02f      	beq.n	80094a2 <__lshift+0xc6>
 8009442:	468a      	mov	sl, r1
 8009444:	f04f 0c00 	mov.w	ip, #0
 8009448:	f1c9 0e20 	rsb	lr, r9, #32
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	fa02 f209 	lsl.w	r2, r2, r9
 8009452:	ea42 020c 	orr.w	r2, r2, ip
 8009456:	f84a 2b04 	str.w	r2, [sl], #4
 800945a:	f853 2b04 	ldr.w	r2, [r3], #4
 800945e:	4298      	cmp	r0, r3
 8009460:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009464:	d8f2      	bhi.n	800944c <__lshift+0x70>
 8009466:	1b03      	subs	r3, r0, r4
 8009468:	3b15      	subs	r3, #21
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	3304      	adds	r3, #4
 8009470:	f104 0215 	add.w	r2, r4, #21
 8009474:	4290      	cmp	r0, r2
 8009476:	bf38      	it	cc
 8009478:	2304      	movcc	r3, #4
 800947a:	f841 c003 	str.w	ip, [r1, r3]
 800947e:	f1bc 0f00 	cmp.w	ip, #0
 8009482:	d001      	beq.n	8009488 <__lshift+0xac>
 8009484:	f108 0602 	add.w	r6, r8, #2
 8009488:	3e01      	subs	r6, #1
 800948a:	4638      	mov	r0, r7
 800948c:	4621      	mov	r1, r4
 800948e:	612e      	str	r6, [r5, #16]
 8009490:	f7ff fd8c 	bl	8008fac <_Bfree>
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	f842 0f04 	str.w	r0, [r2, #4]!
 800949e:	3301      	adds	r3, #1
 80094a0:	e7c1      	b.n	8009426 <__lshift+0x4a>
 80094a2:	3904      	subs	r1, #4
 80094a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a8:	4298      	cmp	r0, r3
 80094aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80094ae:	d8f9      	bhi.n	80094a4 <__lshift+0xc8>
 80094b0:	e7ea      	b.n	8009488 <__lshift+0xac>
 80094b2:	bf00      	nop
 80094b4:	0800aba0 	.word	0x0800aba0
 80094b8:	0800ac2c 	.word	0x0800ac2c

080094bc <__mcmp>:
 80094bc:	4603      	mov	r3, r0
 80094be:	690a      	ldr	r2, [r1, #16]
 80094c0:	6900      	ldr	r0, [r0, #16]
 80094c2:	b530      	push	{r4, r5, lr}
 80094c4:	1a80      	subs	r0, r0, r2
 80094c6:	d10d      	bne.n	80094e4 <__mcmp+0x28>
 80094c8:	3314      	adds	r3, #20
 80094ca:	3114      	adds	r1, #20
 80094cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094dc:	4295      	cmp	r5, r2
 80094de:	d002      	beq.n	80094e6 <__mcmp+0x2a>
 80094e0:	d304      	bcc.n	80094ec <__mcmp+0x30>
 80094e2:	2001      	movs	r0, #1
 80094e4:	bd30      	pop	{r4, r5, pc}
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	d3f4      	bcc.n	80094d4 <__mcmp+0x18>
 80094ea:	e7fb      	b.n	80094e4 <__mcmp+0x28>
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	e7f8      	b.n	80094e4 <__mcmp+0x28>
	...

080094f4 <__mdiff>:
 80094f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	460d      	mov	r5, r1
 80094fa:	4607      	mov	r7, r0
 80094fc:	4611      	mov	r1, r2
 80094fe:	4628      	mov	r0, r5
 8009500:	4614      	mov	r4, r2
 8009502:	f7ff ffdb 	bl	80094bc <__mcmp>
 8009506:	1e06      	subs	r6, r0, #0
 8009508:	d111      	bne.n	800952e <__mdiff+0x3a>
 800950a:	4631      	mov	r1, r6
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff fd0d 	bl	8008f2c <_Balloc>
 8009512:	4602      	mov	r2, r0
 8009514:	b928      	cbnz	r0, 8009522 <__mdiff+0x2e>
 8009516:	f240 2132 	movw	r1, #562	; 0x232
 800951a:	4b3a      	ldr	r3, [pc, #232]	; (8009604 <__mdiff+0x110>)
 800951c:	483a      	ldr	r0, [pc, #232]	; (8009608 <__mdiff+0x114>)
 800951e:	f000 fc41 	bl	8009da4 <__assert_func>
 8009522:	2301      	movs	r3, #1
 8009524:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009528:	4610      	mov	r0, r2
 800952a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952e:	bfa4      	itt	ge
 8009530:	4623      	movge	r3, r4
 8009532:	462c      	movge	r4, r5
 8009534:	4638      	mov	r0, r7
 8009536:	6861      	ldr	r1, [r4, #4]
 8009538:	bfa6      	itte	ge
 800953a:	461d      	movge	r5, r3
 800953c:	2600      	movge	r6, #0
 800953e:	2601      	movlt	r6, #1
 8009540:	f7ff fcf4 	bl	8008f2c <_Balloc>
 8009544:	4602      	mov	r2, r0
 8009546:	b918      	cbnz	r0, 8009550 <__mdiff+0x5c>
 8009548:	f44f 7110 	mov.w	r1, #576	; 0x240
 800954c:	4b2d      	ldr	r3, [pc, #180]	; (8009604 <__mdiff+0x110>)
 800954e:	e7e5      	b.n	800951c <__mdiff+0x28>
 8009550:	f102 0814 	add.w	r8, r2, #20
 8009554:	46c2      	mov	sl, r8
 8009556:	f04f 0c00 	mov.w	ip, #0
 800955a:	6927      	ldr	r7, [r4, #16]
 800955c:	60c6      	str	r6, [r0, #12]
 800955e:	692e      	ldr	r6, [r5, #16]
 8009560:	f104 0014 	add.w	r0, r4, #20
 8009564:	f105 0914 	add.w	r9, r5, #20
 8009568:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800956c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009570:	3410      	adds	r4, #16
 8009572:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009576:	f859 3b04 	ldr.w	r3, [r9], #4
 800957a:	fa1f f18b 	uxth.w	r1, fp
 800957e:	448c      	add	ip, r1
 8009580:	b299      	uxth	r1, r3
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	ebac 0101 	sub.w	r1, ip, r1
 8009588:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800958c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009590:	b289      	uxth	r1, r1
 8009592:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009596:	454e      	cmp	r6, r9
 8009598:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800959c:	f84a 3b04 	str.w	r3, [sl], #4
 80095a0:	d8e7      	bhi.n	8009572 <__mdiff+0x7e>
 80095a2:	1b73      	subs	r3, r6, r5
 80095a4:	3b15      	subs	r3, #21
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	3515      	adds	r5, #21
 80095ac:	3304      	adds	r3, #4
 80095ae:	42ae      	cmp	r6, r5
 80095b0:	bf38      	it	cc
 80095b2:	2304      	movcc	r3, #4
 80095b4:	4418      	add	r0, r3
 80095b6:	4443      	add	r3, r8
 80095b8:	461e      	mov	r6, r3
 80095ba:	4605      	mov	r5, r0
 80095bc:	4575      	cmp	r5, lr
 80095be:	d30e      	bcc.n	80095de <__mdiff+0xea>
 80095c0:	f10e 0103 	add.w	r1, lr, #3
 80095c4:	1a09      	subs	r1, r1, r0
 80095c6:	f021 0103 	bic.w	r1, r1, #3
 80095ca:	3803      	subs	r0, #3
 80095cc:	4586      	cmp	lr, r0
 80095ce:	bf38      	it	cc
 80095d0:	2100      	movcc	r1, #0
 80095d2:	4419      	add	r1, r3
 80095d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095d8:	b18b      	cbz	r3, 80095fe <__mdiff+0x10a>
 80095da:	6117      	str	r7, [r2, #16]
 80095dc:	e7a4      	b.n	8009528 <__mdiff+0x34>
 80095de:	f855 8b04 	ldr.w	r8, [r5], #4
 80095e2:	fa1f f188 	uxth.w	r1, r8
 80095e6:	4461      	add	r1, ip
 80095e8:	140c      	asrs	r4, r1, #16
 80095ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095ee:	b289      	uxth	r1, r1
 80095f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095f4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80095f8:	f846 1b04 	str.w	r1, [r6], #4
 80095fc:	e7de      	b.n	80095bc <__mdiff+0xc8>
 80095fe:	3f01      	subs	r7, #1
 8009600:	e7e8      	b.n	80095d4 <__mdiff+0xe0>
 8009602:	bf00      	nop
 8009604:	0800aba0 	.word	0x0800aba0
 8009608:	0800ac2c 	.word	0x0800ac2c

0800960c <__ulp>:
 800960c:	4b11      	ldr	r3, [pc, #68]	; (8009654 <__ulp+0x48>)
 800960e:	400b      	ands	r3, r1
 8009610:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd02      	ble.n	800961e <__ulp+0x12>
 8009618:	2000      	movs	r0, #0
 800961a:	4619      	mov	r1, r3
 800961c:	4770      	bx	lr
 800961e:	425b      	negs	r3, r3
 8009620:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009624:	f04f 0000 	mov.w	r0, #0
 8009628:	f04f 0100 	mov.w	r1, #0
 800962c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009630:	da04      	bge.n	800963c <__ulp+0x30>
 8009632:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009636:	fa43 f102 	asr.w	r1, r3, r2
 800963a:	4770      	bx	lr
 800963c:	f1a2 0314 	sub.w	r3, r2, #20
 8009640:	2b1e      	cmp	r3, #30
 8009642:	bfd6      	itet	le
 8009644:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009648:	2301      	movgt	r3, #1
 800964a:	fa22 f303 	lsrle.w	r3, r2, r3
 800964e:	4618      	mov	r0, r3
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	7ff00000 	.word	0x7ff00000

08009658 <__b2d>:
 8009658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965c:	6907      	ldr	r7, [r0, #16]
 800965e:	f100 0914 	add.w	r9, r0, #20
 8009662:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009666:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800966a:	f1a7 0804 	sub.w	r8, r7, #4
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff fd4e 	bl	8009110 <__hi0bits>
 8009674:	f1c0 0320 	rsb	r3, r0, #32
 8009678:	280a      	cmp	r0, #10
 800967a:	600b      	str	r3, [r1, #0]
 800967c:	491f      	ldr	r1, [pc, #124]	; (80096fc <__b2d+0xa4>)
 800967e:	dc17      	bgt.n	80096b0 <__b2d+0x58>
 8009680:	45c1      	cmp	r9, r8
 8009682:	bf28      	it	cs
 8009684:	2200      	movcs	r2, #0
 8009686:	f1c0 0c0b 	rsb	ip, r0, #11
 800968a:	fa26 f30c 	lsr.w	r3, r6, ip
 800968e:	bf38      	it	cc
 8009690:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009694:	ea43 0501 	orr.w	r5, r3, r1
 8009698:	f100 0315 	add.w	r3, r0, #21
 800969c:	fa06 f303 	lsl.w	r3, r6, r3
 80096a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80096a4:	ea43 0402 	orr.w	r4, r3, r2
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b0:	45c1      	cmp	r9, r8
 80096b2:	bf2e      	itee	cs
 80096b4:	2200      	movcs	r2, #0
 80096b6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096ba:	f1a7 0808 	subcc.w	r8, r7, #8
 80096be:	f1b0 030b 	subs.w	r3, r0, #11
 80096c2:	d016      	beq.n	80096f2 <__b2d+0x9a>
 80096c4:	f1c3 0720 	rsb	r7, r3, #32
 80096c8:	fa22 f107 	lsr.w	r1, r2, r7
 80096cc:	45c8      	cmp	r8, r9
 80096ce:	fa06 f603 	lsl.w	r6, r6, r3
 80096d2:	ea46 0601 	orr.w	r6, r6, r1
 80096d6:	bf94      	ite	ls
 80096d8:	2100      	movls	r1, #0
 80096da:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80096de:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80096e2:	fa02 f003 	lsl.w	r0, r2, r3
 80096e6:	40f9      	lsrs	r1, r7
 80096e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096ec:	ea40 0401 	orr.w	r4, r0, r1
 80096f0:	e7da      	b.n	80096a8 <__b2d+0x50>
 80096f2:	4614      	mov	r4, r2
 80096f4:	ea46 0501 	orr.w	r5, r6, r1
 80096f8:	e7d6      	b.n	80096a8 <__b2d+0x50>
 80096fa:	bf00      	nop
 80096fc:	3ff00000 	.word	0x3ff00000

08009700 <__d2b>:
 8009700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009704:	2101      	movs	r1, #1
 8009706:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800970a:	4690      	mov	r8, r2
 800970c:	461d      	mov	r5, r3
 800970e:	f7ff fc0d 	bl	8008f2c <_Balloc>
 8009712:	4604      	mov	r4, r0
 8009714:	b930      	cbnz	r0, 8009724 <__d2b+0x24>
 8009716:	4602      	mov	r2, r0
 8009718:	f240 310a 	movw	r1, #778	; 0x30a
 800971c:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <__d2b+0xb0>)
 800971e:	4825      	ldr	r0, [pc, #148]	; (80097b4 <__d2b+0xb4>)
 8009720:	f000 fb40 	bl	8009da4 <__assert_func>
 8009724:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009728:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800972c:	bb2d      	cbnz	r5, 800977a <__d2b+0x7a>
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	f1b8 0300 	subs.w	r3, r8, #0
 8009734:	d026      	beq.n	8009784 <__d2b+0x84>
 8009736:	4668      	mov	r0, sp
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	f7ff fd09 	bl	8009150 <__lo0bits>
 800973e:	9900      	ldr	r1, [sp, #0]
 8009740:	b1f0      	cbz	r0, 8009780 <__d2b+0x80>
 8009742:	9a01      	ldr	r2, [sp, #4]
 8009744:	f1c0 0320 	rsb	r3, r0, #32
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	430b      	orrs	r3, r1
 800974e:	40c2      	lsrs	r2, r0
 8009750:	6163      	str	r3, [r4, #20]
 8009752:	9201      	str	r2, [sp, #4]
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bf14      	ite	ne
 800975a:	2102      	movne	r1, #2
 800975c:	2101      	moveq	r1, #1
 800975e:	61a3      	str	r3, [r4, #24]
 8009760:	6121      	str	r1, [r4, #16]
 8009762:	b1c5      	cbz	r5, 8009796 <__d2b+0x96>
 8009764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009768:	4405      	add	r5, r0
 800976a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800976e:	603d      	str	r5, [r7, #0]
 8009770:	6030      	str	r0, [r6, #0]
 8009772:	4620      	mov	r0, r4
 8009774:	b002      	add	sp, #8
 8009776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800977e:	e7d6      	b.n	800972e <__d2b+0x2e>
 8009780:	6161      	str	r1, [r4, #20]
 8009782:	e7e7      	b.n	8009754 <__d2b+0x54>
 8009784:	a801      	add	r0, sp, #4
 8009786:	f7ff fce3 	bl	8009150 <__lo0bits>
 800978a:	2101      	movs	r1, #1
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	6121      	str	r1, [r4, #16]
 8009790:	6163      	str	r3, [r4, #20]
 8009792:	3020      	adds	r0, #32
 8009794:	e7e5      	b.n	8009762 <__d2b+0x62>
 8009796:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800979a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800979e:	6038      	str	r0, [r7, #0]
 80097a0:	6918      	ldr	r0, [r3, #16]
 80097a2:	f7ff fcb5 	bl	8009110 <__hi0bits>
 80097a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80097aa:	6031      	str	r1, [r6, #0]
 80097ac:	e7e1      	b.n	8009772 <__d2b+0x72>
 80097ae:	bf00      	nop
 80097b0:	0800aba0 	.word	0x0800aba0
 80097b4:	0800ac2c 	.word	0x0800ac2c

080097b8 <__ratio>:
 80097b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4688      	mov	r8, r1
 80097be:	4669      	mov	r1, sp
 80097c0:	4681      	mov	r9, r0
 80097c2:	f7ff ff49 	bl	8009658 <__b2d>
 80097c6:	460f      	mov	r7, r1
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	4640      	mov	r0, r8
 80097ce:	a901      	add	r1, sp, #4
 80097d0:	f7ff ff42 	bl	8009658 <__b2d>
 80097d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097dc:	468b      	mov	fp, r1
 80097de:	eba3 0c02 	sub.w	ip, r3, r2
 80097e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfd5      	itete	le
 80097f0:	460a      	movle	r2, r1
 80097f2:	462a      	movgt	r2, r5
 80097f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097f8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097fc:	bfd8      	it	le
 80097fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009802:	465b      	mov	r3, fp
 8009804:	4602      	mov	r2, r0
 8009806:	4639      	mov	r1, r7
 8009808:	4620      	mov	r0, r4
 800980a:	f7f6 fffb 	bl	8000804 <__aeabi_ddiv>
 800980e:	b003      	add	sp, #12
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009814 <__copybits>:
 8009814:	3901      	subs	r1, #1
 8009816:	b570      	push	{r4, r5, r6, lr}
 8009818:	1149      	asrs	r1, r1, #5
 800981a:	6914      	ldr	r4, [r2, #16]
 800981c:	3101      	adds	r1, #1
 800981e:	f102 0314 	add.w	r3, r2, #20
 8009822:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800982a:	1f05      	subs	r5, r0, #4
 800982c:	42a3      	cmp	r3, r4
 800982e:	d30c      	bcc.n	800984a <__copybits+0x36>
 8009830:	1aa3      	subs	r3, r4, r2
 8009832:	3b11      	subs	r3, #17
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	3211      	adds	r2, #17
 800983a:	42a2      	cmp	r2, r4
 800983c:	bf88      	it	hi
 800983e:	2300      	movhi	r3, #0
 8009840:	4418      	add	r0, r3
 8009842:	2300      	movs	r3, #0
 8009844:	4288      	cmp	r0, r1
 8009846:	d305      	bcc.n	8009854 <__copybits+0x40>
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	f853 6b04 	ldr.w	r6, [r3], #4
 800984e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009852:	e7eb      	b.n	800982c <__copybits+0x18>
 8009854:	f840 3b04 	str.w	r3, [r0], #4
 8009858:	e7f4      	b.n	8009844 <__copybits+0x30>

0800985a <__any_on>:
 800985a:	f100 0214 	add.w	r2, r0, #20
 800985e:	6900      	ldr	r0, [r0, #16]
 8009860:	114b      	asrs	r3, r1, #5
 8009862:	4298      	cmp	r0, r3
 8009864:	b510      	push	{r4, lr}
 8009866:	db11      	blt.n	800988c <__any_on+0x32>
 8009868:	dd0a      	ble.n	8009880 <__any_on+0x26>
 800986a:	f011 011f 	ands.w	r1, r1, #31
 800986e:	d007      	beq.n	8009880 <__any_on+0x26>
 8009870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009874:	fa24 f001 	lsr.w	r0, r4, r1
 8009878:	fa00 f101 	lsl.w	r1, r0, r1
 800987c:	428c      	cmp	r4, r1
 800987e:	d10b      	bne.n	8009898 <__any_on+0x3e>
 8009880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009884:	4293      	cmp	r3, r2
 8009886:	d803      	bhi.n	8009890 <__any_on+0x36>
 8009888:	2000      	movs	r0, #0
 800988a:	bd10      	pop	{r4, pc}
 800988c:	4603      	mov	r3, r0
 800988e:	e7f7      	b.n	8009880 <__any_on+0x26>
 8009890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009894:	2900      	cmp	r1, #0
 8009896:	d0f5      	beq.n	8009884 <__any_on+0x2a>
 8009898:	2001      	movs	r0, #1
 800989a:	e7f6      	b.n	800988a <__any_on+0x30>

0800989c <_calloc_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	fba1 5402 	umull	r5, r4, r1, r2
 80098a2:	b934      	cbnz	r4, 80098b2 <_calloc_r+0x16>
 80098a4:	4629      	mov	r1, r5
 80098a6:	f000 f875 	bl	8009994 <_malloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	b928      	cbnz	r0, 80098ba <_calloc_r+0x1e>
 80098ae:	4630      	mov	r0, r6
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	220c      	movs	r2, #12
 80098b4:	2600      	movs	r6, #0
 80098b6:	6002      	str	r2, [r0, #0]
 80098b8:	e7f9      	b.n	80098ae <_calloc_r+0x12>
 80098ba:	462a      	mov	r2, r5
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fc fbf1 	bl	80060a4 <memset>
 80098c2:	e7f4      	b.n	80098ae <_calloc_r+0x12>

080098c4 <_free_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4605      	mov	r5, r0
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d040      	beq.n	800994e <_free_r+0x8a>
 80098cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d0:	1f0c      	subs	r4, r1, #4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bfb8      	it	lt
 80098d6:	18e4      	addlt	r4, r4, r3
 80098d8:	f000 faae 	bl	8009e38 <__malloc_lock>
 80098dc:	4a1c      	ldr	r2, [pc, #112]	; (8009950 <_free_r+0x8c>)
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	b933      	cbnz	r3, 80098f0 <_free_r+0x2c>
 80098e2:	6063      	str	r3, [r4, #4]
 80098e4:	6014      	str	r4, [r2, #0]
 80098e6:	4628      	mov	r0, r5
 80098e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ec:	f000 baaa 	b.w	8009e44 <__malloc_unlock>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d908      	bls.n	8009906 <_free_r+0x42>
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	1821      	adds	r1, r4, r0
 80098f8:	428b      	cmp	r3, r1
 80098fa:	bf01      	itttt	eq
 80098fc:	6819      	ldreq	r1, [r3, #0]
 80098fe:	685b      	ldreq	r3, [r3, #4]
 8009900:	1809      	addeq	r1, r1, r0
 8009902:	6021      	streq	r1, [r4, #0]
 8009904:	e7ed      	b.n	80098e2 <_free_r+0x1e>
 8009906:	461a      	mov	r2, r3
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	b10b      	cbz	r3, 8009910 <_free_r+0x4c>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d9fa      	bls.n	8009906 <_free_r+0x42>
 8009910:	6811      	ldr	r1, [r2, #0]
 8009912:	1850      	adds	r0, r2, r1
 8009914:	42a0      	cmp	r0, r4
 8009916:	d10b      	bne.n	8009930 <_free_r+0x6c>
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	4401      	add	r1, r0
 800991c:	1850      	adds	r0, r2, r1
 800991e:	4283      	cmp	r3, r0
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	d1e0      	bne.n	80098e6 <_free_r+0x22>
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4401      	add	r1, r0
 800992a:	6011      	str	r1, [r2, #0]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	e7da      	b.n	80098e6 <_free_r+0x22>
 8009930:	d902      	bls.n	8009938 <_free_r+0x74>
 8009932:	230c      	movs	r3, #12
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	e7d6      	b.n	80098e6 <_free_r+0x22>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	1821      	adds	r1, r4, r0
 800993c:	428b      	cmp	r3, r1
 800993e:	bf01      	itttt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	1809      	addeq	r1, r1, r0
 8009946:	6021      	streq	r1, [r4, #0]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	6054      	str	r4, [r2, #4]
 800994c:	e7cb      	b.n	80098e6 <_free_r+0x22>
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000384 	.word	0x20000384

08009954 <sbrk_aligned>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4e0e      	ldr	r6, [pc, #56]	; (8009990 <sbrk_aligned+0x3c>)
 8009958:	460c      	mov	r4, r1
 800995a:	6831      	ldr	r1, [r6, #0]
 800995c:	4605      	mov	r5, r0
 800995e:	b911      	cbnz	r1, 8009966 <sbrk_aligned+0x12>
 8009960:	f000 f9ee 	bl	8009d40 <_sbrk_r>
 8009964:	6030      	str	r0, [r6, #0]
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f000 f9e9 	bl	8009d40 <_sbrk_r>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d00a      	beq.n	8009988 <sbrk_aligned+0x34>
 8009972:	1cc4      	adds	r4, r0, #3
 8009974:	f024 0403 	bic.w	r4, r4, #3
 8009978:	42a0      	cmp	r0, r4
 800997a:	d007      	beq.n	800998c <sbrk_aligned+0x38>
 800997c:	1a21      	subs	r1, r4, r0
 800997e:	4628      	mov	r0, r5
 8009980:	f000 f9de 	bl	8009d40 <_sbrk_r>
 8009984:	3001      	adds	r0, #1
 8009986:	d101      	bne.n	800998c <sbrk_aligned+0x38>
 8009988:	f04f 34ff 	mov.w	r4, #4294967295
 800998c:	4620      	mov	r0, r4
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	20000388 	.word	0x20000388

08009994 <_malloc_r>:
 8009994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009998:	1ccd      	adds	r5, r1, #3
 800999a:	f025 0503 	bic.w	r5, r5, #3
 800999e:	3508      	adds	r5, #8
 80099a0:	2d0c      	cmp	r5, #12
 80099a2:	bf38      	it	cc
 80099a4:	250c      	movcc	r5, #12
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	4607      	mov	r7, r0
 80099aa:	db01      	blt.n	80099b0 <_malloc_r+0x1c>
 80099ac:	42a9      	cmp	r1, r5
 80099ae:	d905      	bls.n	80099bc <_malloc_r+0x28>
 80099b0:	230c      	movs	r3, #12
 80099b2:	2600      	movs	r6, #0
 80099b4:	603b      	str	r3, [r7, #0]
 80099b6:	4630      	mov	r0, r6
 80099b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099bc:	4e2e      	ldr	r6, [pc, #184]	; (8009a78 <_malloc_r+0xe4>)
 80099be:	f000 fa3b 	bl	8009e38 <__malloc_lock>
 80099c2:	6833      	ldr	r3, [r6, #0]
 80099c4:	461c      	mov	r4, r3
 80099c6:	bb34      	cbnz	r4, 8009a16 <_malloc_r+0x82>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4638      	mov	r0, r7
 80099cc:	f7ff ffc2 	bl	8009954 <sbrk_aligned>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	4604      	mov	r4, r0
 80099d4:	d14d      	bne.n	8009a72 <_malloc_r+0xde>
 80099d6:	6834      	ldr	r4, [r6, #0]
 80099d8:	4626      	mov	r6, r4
 80099da:	2e00      	cmp	r6, #0
 80099dc:	d140      	bne.n	8009a60 <_malloc_r+0xcc>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	4631      	mov	r1, r6
 80099e2:	4638      	mov	r0, r7
 80099e4:	eb04 0803 	add.w	r8, r4, r3
 80099e8:	f000 f9aa 	bl	8009d40 <_sbrk_r>
 80099ec:	4580      	cmp	r8, r0
 80099ee:	d13a      	bne.n	8009a66 <_malloc_r+0xd2>
 80099f0:	6821      	ldr	r1, [r4, #0]
 80099f2:	3503      	adds	r5, #3
 80099f4:	1a6d      	subs	r5, r5, r1
 80099f6:	f025 0503 	bic.w	r5, r5, #3
 80099fa:	3508      	adds	r5, #8
 80099fc:	2d0c      	cmp	r5, #12
 80099fe:	bf38      	it	cc
 8009a00:	250c      	movcc	r5, #12
 8009a02:	4638      	mov	r0, r7
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7ff ffa5 	bl	8009954 <sbrk_aligned>
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d02b      	beq.n	8009a66 <_malloc_r+0xd2>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	442b      	add	r3, r5
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	e00e      	b.n	8009a34 <_malloc_r+0xa0>
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	1b52      	subs	r2, r2, r5
 8009a1a:	d41e      	bmi.n	8009a5a <_malloc_r+0xc6>
 8009a1c:	2a0b      	cmp	r2, #11
 8009a1e:	d916      	bls.n	8009a4e <_malloc_r+0xba>
 8009a20:	1961      	adds	r1, r4, r5
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	6025      	str	r5, [r4, #0]
 8009a26:	bf18      	it	ne
 8009a28:	6059      	strne	r1, [r3, #4]
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	bf08      	it	eq
 8009a2e:	6031      	streq	r1, [r6, #0]
 8009a30:	5162      	str	r2, [r4, r5]
 8009a32:	604b      	str	r3, [r1, #4]
 8009a34:	4638      	mov	r0, r7
 8009a36:	f104 060b 	add.w	r6, r4, #11
 8009a3a:	f000 fa03 	bl	8009e44 <__malloc_unlock>
 8009a3e:	f026 0607 	bic.w	r6, r6, #7
 8009a42:	1d23      	adds	r3, r4, #4
 8009a44:	1af2      	subs	r2, r6, r3
 8009a46:	d0b6      	beq.n	80099b6 <_malloc_r+0x22>
 8009a48:	1b9b      	subs	r3, r3, r6
 8009a4a:	50a3      	str	r3, [r4, r2]
 8009a4c:	e7b3      	b.n	80099b6 <_malloc_r+0x22>
 8009a4e:	6862      	ldr	r2, [r4, #4]
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	bf0c      	ite	eq
 8009a54:	6032      	streq	r2, [r6, #0]
 8009a56:	605a      	strne	r2, [r3, #4]
 8009a58:	e7ec      	b.n	8009a34 <_malloc_r+0xa0>
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	6864      	ldr	r4, [r4, #4]
 8009a5e:	e7b2      	b.n	80099c6 <_malloc_r+0x32>
 8009a60:	4634      	mov	r4, r6
 8009a62:	6876      	ldr	r6, [r6, #4]
 8009a64:	e7b9      	b.n	80099da <_malloc_r+0x46>
 8009a66:	230c      	movs	r3, #12
 8009a68:	4638      	mov	r0, r7
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f000 f9ea 	bl	8009e44 <__malloc_unlock>
 8009a70:	e7a1      	b.n	80099b6 <_malloc_r+0x22>
 8009a72:	6025      	str	r5, [r4, #0]
 8009a74:	e7de      	b.n	8009a34 <_malloc_r+0xa0>
 8009a76:	bf00      	nop
 8009a78:	20000384 	.word	0x20000384

08009a7c <__ssputs_r>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	688e      	ldr	r6, [r1, #8]
 8009a82:	4682      	mov	sl, r0
 8009a84:	429e      	cmp	r6, r3
 8009a86:	460c      	mov	r4, r1
 8009a88:	4690      	mov	r8, r2
 8009a8a:	461f      	mov	r7, r3
 8009a8c:	d838      	bhi.n	8009b00 <__ssputs_r+0x84>
 8009a8e:	898a      	ldrh	r2, [r1, #12]
 8009a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a94:	d032      	beq.n	8009afc <__ssputs_r+0x80>
 8009a96:	6825      	ldr	r5, [r4, #0]
 8009a98:	6909      	ldr	r1, [r1, #16]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	eba5 0901 	sub.w	r9, r5, r1
 8009aa0:	6965      	ldr	r5, [r4, #20]
 8009aa2:	444b      	add	r3, r9
 8009aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aac:	106d      	asrs	r5, r5, #1
 8009aae:	429d      	cmp	r5, r3
 8009ab0:	bf38      	it	cc
 8009ab2:	461d      	movcc	r5, r3
 8009ab4:	0553      	lsls	r3, r2, #21
 8009ab6:	d531      	bpl.n	8009b1c <__ssputs_r+0xa0>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7ff ff6b 	bl	8009994 <_malloc_r>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	b950      	cbnz	r0, 8009ad8 <__ssputs_r+0x5c>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	f8ca 3000 	str.w	r3, [sl]
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad8:	464a      	mov	r2, r9
 8009ada:	6921      	ldr	r1, [r4, #16]
 8009adc:	f7ff fa18 	bl	8008f10 <memcpy>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	6126      	str	r6, [r4, #16]
 8009aee:	444e      	add	r6, r9
 8009af0:	6026      	str	r6, [r4, #0]
 8009af2:	463e      	mov	r6, r7
 8009af4:	6165      	str	r5, [r4, #20]
 8009af6:	eba5 0509 	sub.w	r5, r5, r9
 8009afa:	60a5      	str	r5, [r4, #8]
 8009afc:	42be      	cmp	r6, r7
 8009afe:	d900      	bls.n	8009b02 <__ssputs_r+0x86>
 8009b00:	463e      	mov	r6, r7
 8009b02:	4632      	mov	r2, r6
 8009b04:	4641      	mov	r1, r8
 8009b06:	6820      	ldr	r0, [r4, #0]
 8009b08:	f000 f97c 	bl	8009e04 <memmove>
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	2000      	movs	r0, #0
 8009b10:	1b9b      	subs	r3, r3, r6
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	4433      	add	r3, r6
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	e7db      	b.n	8009ad4 <__ssputs_r+0x58>
 8009b1c:	462a      	mov	r2, r5
 8009b1e:	f000 f997 	bl	8009e50 <_realloc_r>
 8009b22:	4606      	mov	r6, r0
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1e1      	bne.n	8009aec <__ssputs_r+0x70>
 8009b28:	4650      	mov	r0, sl
 8009b2a:	6921      	ldr	r1, [r4, #16]
 8009b2c:	f7ff feca 	bl	80098c4 <_free_r>
 8009b30:	e7c7      	b.n	8009ac2 <__ssputs_r+0x46>
	...

08009b34 <_svfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4698      	mov	r8, r3
 8009b3a:	898b      	ldrh	r3, [r1, #12]
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	061b      	lsls	r3, r3, #24
 8009b40:	460d      	mov	r5, r1
 8009b42:	4614      	mov	r4, r2
 8009b44:	b09d      	sub	sp, #116	; 0x74
 8009b46:	d50e      	bpl.n	8009b66 <_svfiprintf_r+0x32>
 8009b48:	690b      	ldr	r3, [r1, #16]
 8009b4a:	b963      	cbnz	r3, 8009b66 <_svfiprintf_r+0x32>
 8009b4c:	2140      	movs	r1, #64	; 0x40
 8009b4e:	f7ff ff21 	bl	8009994 <_malloc_r>
 8009b52:	6028      	str	r0, [r5, #0]
 8009b54:	6128      	str	r0, [r5, #16]
 8009b56:	b920      	cbnz	r0, 8009b62 <_svfiprintf_r+0x2e>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e0d1      	b.n	8009d06 <_svfiprintf_r+0x1d2>
 8009b62:	2340      	movs	r3, #64	; 0x40
 8009b64:	616b      	str	r3, [r5, #20]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6a:	2320      	movs	r3, #32
 8009b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b70:	2330      	movs	r3, #48	; 0x30
 8009b72:	f04f 0901 	mov.w	r9, #1
 8009b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d20 <_svfiprintf_r+0x1ec>
 8009b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b82:	4623      	mov	r3, r4
 8009b84:	469a      	mov	sl, r3
 8009b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b8a:	b10a      	cbz	r2, 8009b90 <_svfiprintf_r+0x5c>
 8009b8c:	2a25      	cmp	r2, #37	; 0x25
 8009b8e:	d1f9      	bne.n	8009b84 <_svfiprintf_r+0x50>
 8009b90:	ebba 0b04 	subs.w	fp, sl, r4
 8009b94:	d00b      	beq.n	8009bae <_svfiprintf_r+0x7a>
 8009b96:	465b      	mov	r3, fp
 8009b98:	4622      	mov	r2, r4
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff ff6d 	bl	8009a7c <__ssputs_r>
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f000 80aa 	beq.w	8009cfc <_svfiprintf_r+0x1c8>
 8009ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009baa:	445a      	add	r2, fp
 8009bac:	9209      	str	r2, [sp, #36]	; 0x24
 8009bae:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80a2 	beq.w	8009cfc <_svfiprintf_r+0x1c8>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc2:	f10a 0a01 	add.w	sl, sl, #1
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	9307      	str	r3, [sp, #28]
 8009bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bce:	931a      	str	r3, [sp, #104]	; 0x68
 8009bd0:	4654      	mov	r4, sl
 8009bd2:	2205      	movs	r2, #5
 8009bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd8:	4851      	ldr	r0, [pc, #324]	; (8009d20 <_svfiprintf_r+0x1ec>)
 8009bda:	f7ff f98b 	bl	8008ef4 <memchr>
 8009bde:	9a04      	ldr	r2, [sp, #16]
 8009be0:	b9d8      	cbnz	r0, 8009c1a <_svfiprintf_r+0xe6>
 8009be2:	06d0      	lsls	r0, r2, #27
 8009be4:	bf44      	itt	mi
 8009be6:	2320      	movmi	r3, #32
 8009be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bec:	0711      	lsls	r1, r2, #28
 8009bee:	bf44      	itt	mi
 8009bf0:	232b      	movmi	r3, #43	; 0x2b
 8009bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfc:	d015      	beq.n	8009c2a <_svfiprintf_r+0xf6>
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2000      	movs	r0, #0
 8009c02:	f04f 0c0a 	mov.w	ip, #10
 8009c06:	9a07      	ldr	r2, [sp, #28]
 8009c08:	4621      	mov	r1, r4
 8009c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0e:	3b30      	subs	r3, #48	; 0x30
 8009c10:	2b09      	cmp	r3, #9
 8009c12:	d94e      	bls.n	8009cb2 <_svfiprintf_r+0x17e>
 8009c14:	b1b0      	cbz	r0, 8009c44 <_svfiprintf_r+0x110>
 8009c16:	9207      	str	r2, [sp, #28]
 8009c18:	e014      	b.n	8009c44 <_svfiprintf_r+0x110>
 8009c1a:	eba0 0308 	sub.w	r3, r0, r8
 8009c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c22:	4313      	orrs	r3, r2
 8009c24:	46a2      	mov	sl, r4
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	e7d2      	b.n	8009bd0 <_svfiprintf_r+0x9c>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	1d19      	adds	r1, r3, #4
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	9103      	str	r1, [sp, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfbb      	ittet	lt
 8009c36:	425b      	neglt	r3, r3
 8009c38:	f042 0202 	orrlt.w	r2, r2, #2
 8009c3c:	9307      	strge	r3, [sp, #28]
 8009c3e:	9307      	strlt	r3, [sp, #28]
 8009c40:	bfb8      	it	lt
 8009c42:	9204      	strlt	r2, [sp, #16]
 8009c44:	7823      	ldrb	r3, [r4, #0]
 8009c46:	2b2e      	cmp	r3, #46	; 0x2e
 8009c48:	d10c      	bne.n	8009c64 <_svfiprintf_r+0x130>
 8009c4a:	7863      	ldrb	r3, [r4, #1]
 8009c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c4e:	d135      	bne.n	8009cbc <_svfiprintf_r+0x188>
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	3402      	adds	r4, #2
 8009c54:	1d1a      	adds	r2, r3, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	9203      	str	r2, [sp, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bfb8      	it	lt
 8009c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009d24 <_svfiprintf_r+0x1f0>
 8009c68:	2203      	movs	r2, #3
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	7821      	ldrb	r1, [r4, #0]
 8009c6e:	f7ff f941 	bl	8008ef4 <memchr>
 8009c72:	b140      	cbz	r0, 8009c86 <_svfiprintf_r+0x152>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	eba0 000a 	sub.w	r0, r0, sl
 8009c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	3401      	adds	r4, #1
 8009c82:	4303      	orrs	r3, r0
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8a:	2206      	movs	r2, #6
 8009c8c:	4826      	ldr	r0, [pc, #152]	; (8009d28 <_svfiprintf_r+0x1f4>)
 8009c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c92:	f7ff f92f 	bl	8008ef4 <memchr>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d038      	beq.n	8009d0c <_svfiprintf_r+0x1d8>
 8009c9a:	4b24      	ldr	r3, [pc, #144]	; (8009d2c <_svfiprintf_r+0x1f8>)
 8009c9c:	bb1b      	cbnz	r3, 8009ce6 <_svfiprintf_r+0x1b2>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	3307      	adds	r3, #7
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	9303      	str	r3, [sp, #12]
 8009caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cac:	4433      	add	r3, r6
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	e767      	b.n	8009b82 <_svfiprintf_r+0x4e>
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cba:	e7a5      	b.n	8009c08 <_svfiprintf_r+0xd4>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f04f 0c0a 	mov.w	ip, #10
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	3401      	adds	r4, #1
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cce:	3a30      	subs	r2, #48	; 0x30
 8009cd0:	2a09      	cmp	r2, #9
 8009cd2:	d903      	bls.n	8009cdc <_svfiprintf_r+0x1a8>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0c5      	beq.n	8009c64 <_svfiprintf_r+0x130>
 8009cd8:	9105      	str	r1, [sp, #20]
 8009cda:	e7c3      	b.n	8009c64 <_svfiprintf_r+0x130>
 8009cdc:	4604      	mov	r4, r0
 8009cde:	2301      	movs	r3, #1
 8009ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ce4:	e7f0      	b.n	8009cc8 <_svfiprintf_r+0x194>
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	462a      	mov	r2, r5
 8009cec:	4638      	mov	r0, r7
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <_svfiprintf_r+0x1fc>)
 8009cf0:	a904      	add	r1, sp, #16
 8009cf2:	f7fc fa7d 	bl	80061f0 <_printf_float>
 8009cf6:	1c42      	adds	r2, r0, #1
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	d1d6      	bne.n	8009caa <_svfiprintf_r+0x176>
 8009cfc:	89ab      	ldrh	r3, [r5, #12]
 8009cfe:	065b      	lsls	r3, r3, #25
 8009d00:	f53f af2c 	bmi.w	8009b5c <_svfiprintf_r+0x28>
 8009d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d06:	b01d      	add	sp, #116	; 0x74
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0c:	ab03      	add	r3, sp, #12
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4638      	mov	r0, r7
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <_svfiprintf_r+0x1fc>)
 8009d16:	a904      	add	r1, sp, #16
 8009d18:	f7fc fd06 	bl	8006728 <_printf_i>
 8009d1c:	e7eb      	b.n	8009cf6 <_svfiprintf_r+0x1c2>
 8009d1e:	bf00      	nop
 8009d20:	0800ad84 	.word	0x0800ad84
 8009d24:	0800ad8a 	.word	0x0800ad8a
 8009d28:	0800ad8e 	.word	0x0800ad8e
 8009d2c:	080061f1 	.word	0x080061f1
 8009d30:	08009a7d 	.word	0x08009a7d

08009d34 <nan>:
 8009d34:	2000      	movs	r0, #0
 8009d36:	4901      	ldr	r1, [pc, #4]	; (8009d3c <nan+0x8>)
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	7ff80000 	.word	0x7ff80000

08009d40 <_sbrk_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	2300      	movs	r3, #0
 8009d44:	4d05      	ldr	r5, [pc, #20]	; (8009d5c <_sbrk_r+0x1c>)
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f7 fdfc 	bl	8001948 <_sbrk>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_sbrk_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_sbrk_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	2000038c 	.word	0x2000038c

08009d60 <strncmp>:
 8009d60:	4603      	mov	r3, r0
 8009d62:	b510      	push	{r4, lr}
 8009d64:	b172      	cbz	r2, 8009d84 <strncmp+0x24>
 8009d66:	3901      	subs	r1, #1
 8009d68:	1884      	adds	r4, r0, r2
 8009d6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d72:	4290      	cmp	r0, r2
 8009d74:	d101      	bne.n	8009d7a <strncmp+0x1a>
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	d101      	bne.n	8009d7e <strncmp+0x1e>
 8009d7a:	1a80      	subs	r0, r0, r2
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d1f3      	bne.n	8009d6a <strncmp+0xa>
 8009d82:	e7fa      	b.n	8009d7a <strncmp+0x1a>
 8009d84:	4610      	mov	r0, r2
 8009d86:	e7f9      	b.n	8009d7c <strncmp+0x1c>

08009d88 <__ascii_wctomb>:
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4608      	mov	r0, r1
 8009d8c:	b141      	cbz	r1, 8009da0 <__ascii_wctomb+0x18>
 8009d8e:	2aff      	cmp	r2, #255	; 0xff
 8009d90:	d904      	bls.n	8009d9c <__ascii_wctomb+0x14>
 8009d92:	228a      	movs	r2, #138	; 0x8a
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	4770      	bx	lr
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	700a      	strb	r2, [r1, #0]
 8009da0:	4770      	bx	lr
	...

08009da4 <__assert_func>:
 8009da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009da6:	4614      	mov	r4, r2
 8009da8:	461a      	mov	r2, r3
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <__assert_func+0x2c>)
 8009dac:	4605      	mov	r5, r0
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68d8      	ldr	r0, [r3, #12]
 8009db2:	b14c      	cbz	r4, 8009dc8 <__assert_func+0x24>
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <__assert_func+0x30>)
 8009db6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	4906      	ldr	r1, [pc, #24]	; (8009dd8 <__assert_func+0x34>)
 8009dc0:	f000 f80e 	bl	8009de0 <fiprintf>
 8009dc4:	f000 fa8a 	bl	800a2dc <abort>
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <__assert_func+0x38>)
 8009dca:	461c      	mov	r4, r3
 8009dcc:	e7f3      	b.n	8009db6 <__assert_func+0x12>
 8009dce:	bf00      	nop
 8009dd0:	2000000c 	.word	0x2000000c
 8009dd4:	0800ad95 	.word	0x0800ad95
 8009dd8:	0800ada2 	.word	0x0800ada2
 8009ddc:	0800add0 	.word	0x0800add0

08009de0 <fiprintf>:
 8009de0:	b40e      	push	{r1, r2, r3}
 8009de2:	b503      	push	{r0, r1, lr}
 8009de4:	4601      	mov	r1, r0
 8009de6:	ab03      	add	r3, sp, #12
 8009de8:	4805      	ldr	r0, [pc, #20]	; (8009e00 <fiprintf+0x20>)
 8009dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dee:	6800      	ldr	r0, [r0, #0]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	f000 f883 	bl	8009efc <_vfiprintf_r>
 8009df6:	b002      	add	sp, #8
 8009df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dfc:	b003      	add	sp, #12
 8009dfe:	4770      	bx	lr
 8009e00:	2000000c 	.word	0x2000000c

08009e04 <memmove>:
 8009e04:	4288      	cmp	r0, r1
 8009e06:	b510      	push	{r4, lr}
 8009e08:	eb01 0402 	add.w	r4, r1, r2
 8009e0c:	d902      	bls.n	8009e14 <memmove+0x10>
 8009e0e:	4284      	cmp	r4, r0
 8009e10:	4623      	mov	r3, r4
 8009e12:	d807      	bhi.n	8009e24 <memmove+0x20>
 8009e14:	1e43      	subs	r3, r0, #1
 8009e16:	42a1      	cmp	r1, r4
 8009e18:	d008      	beq.n	8009e2c <memmove+0x28>
 8009e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e22:	e7f8      	b.n	8009e16 <memmove+0x12>
 8009e24:	4601      	mov	r1, r0
 8009e26:	4402      	add	r2, r0
 8009e28:	428a      	cmp	r2, r1
 8009e2a:	d100      	bne.n	8009e2e <memmove+0x2a>
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e36:	e7f7      	b.n	8009e28 <memmove+0x24>

08009e38 <__malloc_lock>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__malloc_lock+0x8>)
 8009e3a:	f000 bc0b 	b.w	800a654 <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	20000390 	.word	0x20000390

08009e44 <__malloc_unlock>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__malloc_unlock+0x8>)
 8009e46:	f000 bc06 	b.w	800a656 <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	20000390 	.word	0x20000390

08009e50 <_realloc_r>:
 8009e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e54:	4680      	mov	r8, r0
 8009e56:	4614      	mov	r4, r2
 8009e58:	460e      	mov	r6, r1
 8009e5a:	b921      	cbnz	r1, 8009e66 <_realloc_r+0x16>
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	f7ff bd97 	b.w	8009994 <_malloc_r>
 8009e66:	b92a      	cbnz	r2, 8009e74 <_realloc_r+0x24>
 8009e68:	f7ff fd2c 	bl	80098c4 <_free_r>
 8009e6c:	4625      	mov	r5, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	f000 fc56 	bl	800a724 <_malloc_usable_size_r>
 8009e78:	4284      	cmp	r4, r0
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	d802      	bhi.n	8009e84 <_realloc_r+0x34>
 8009e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e82:	d812      	bhi.n	8009eaa <_realloc_r+0x5a>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4640      	mov	r0, r8
 8009e88:	f7ff fd84 	bl	8009994 <_malloc_r>
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d0ed      	beq.n	8009e6e <_realloc_r+0x1e>
 8009e92:	42bc      	cmp	r4, r7
 8009e94:	4622      	mov	r2, r4
 8009e96:	4631      	mov	r1, r6
 8009e98:	bf28      	it	cs
 8009e9a:	463a      	movcs	r2, r7
 8009e9c:	f7ff f838 	bl	8008f10 <memcpy>
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff fd0e 	bl	80098c4 <_free_r>
 8009ea8:	e7e1      	b.n	8009e6e <_realloc_r+0x1e>
 8009eaa:	4635      	mov	r5, r6
 8009eac:	e7df      	b.n	8009e6e <_realloc_r+0x1e>

08009eae <__sfputc_r>:
 8009eae:	6893      	ldr	r3, [r2, #8]
 8009eb0:	b410      	push	{r4}
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	6093      	str	r3, [r2, #8]
 8009eb8:	da07      	bge.n	8009eca <__sfputc_r+0x1c>
 8009eba:	6994      	ldr	r4, [r2, #24]
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	db01      	blt.n	8009ec4 <__sfputc_r+0x16>
 8009ec0:	290a      	cmp	r1, #10
 8009ec2:	d102      	bne.n	8009eca <__sfputc_r+0x1c>
 8009ec4:	bc10      	pop	{r4}
 8009ec6:	f000 b949 	b.w	800a15c <__swbuf_r>
 8009eca:	6813      	ldr	r3, [r2, #0]
 8009ecc:	1c58      	adds	r0, r3, #1
 8009ece:	6010      	str	r0, [r2, #0]
 8009ed0:	7019      	strb	r1, [r3, #0]
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	bc10      	pop	{r4}
 8009ed6:	4770      	bx	lr

08009ed8 <__sfputs_r>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	4614      	mov	r4, r2
 8009ee0:	18d5      	adds	r5, r2, r3
 8009ee2:	42ac      	cmp	r4, r5
 8009ee4:	d101      	bne.n	8009eea <__sfputs_r+0x12>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	e007      	b.n	8009efa <__sfputs_r+0x22>
 8009eea:	463a      	mov	r2, r7
 8009eec:	4630      	mov	r0, r6
 8009eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef2:	f7ff ffdc 	bl	8009eae <__sfputc_r>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d1f3      	bne.n	8009ee2 <__sfputs_r+0xa>
 8009efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009efc <_vfiprintf_r>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	460d      	mov	r5, r1
 8009f02:	4614      	mov	r4, r2
 8009f04:	4698      	mov	r8, r3
 8009f06:	4606      	mov	r6, r0
 8009f08:	b09d      	sub	sp, #116	; 0x74
 8009f0a:	b118      	cbz	r0, 8009f14 <_vfiprintf_r+0x18>
 8009f0c:	6983      	ldr	r3, [r0, #24]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <_vfiprintf_r+0x18>
 8009f10:	f000 fb02 	bl	800a518 <__sinit>
 8009f14:	4b89      	ldr	r3, [pc, #548]	; (800a13c <_vfiprintf_r+0x240>)
 8009f16:	429d      	cmp	r5, r3
 8009f18:	d11b      	bne.n	8009f52 <_vfiprintf_r+0x56>
 8009f1a:	6875      	ldr	r5, [r6, #4]
 8009f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f1e:	07d9      	lsls	r1, r3, #31
 8009f20:	d405      	bmi.n	8009f2e <_vfiprintf_r+0x32>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	059a      	lsls	r2, r3, #22
 8009f26:	d402      	bmi.n	8009f2e <_vfiprintf_r+0x32>
 8009f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f2a:	f000 fb93 	bl	800a654 <__retarget_lock_acquire_recursive>
 8009f2e:	89ab      	ldrh	r3, [r5, #12]
 8009f30:	071b      	lsls	r3, r3, #28
 8009f32:	d501      	bpl.n	8009f38 <_vfiprintf_r+0x3c>
 8009f34:	692b      	ldr	r3, [r5, #16]
 8009f36:	b9eb      	cbnz	r3, 8009f74 <_vfiprintf_r+0x78>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 f960 	bl	800a200 <__swsetup_r>
 8009f40:	b1c0      	cbz	r0, 8009f74 <_vfiprintf_r+0x78>
 8009f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f44:	07dc      	lsls	r4, r3, #31
 8009f46:	d50e      	bpl.n	8009f66 <_vfiprintf_r+0x6a>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	b01d      	add	sp, #116	; 0x74
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f52:	4b7b      	ldr	r3, [pc, #492]	; (800a140 <_vfiprintf_r+0x244>)
 8009f54:	429d      	cmp	r5, r3
 8009f56:	d101      	bne.n	8009f5c <_vfiprintf_r+0x60>
 8009f58:	68b5      	ldr	r5, [r6, #8]
 8009f5a:	e7df      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009f5c:	4b79      	ldr	r3, [pc, #484]	; (800a144 <_vfiprintf_r+0x248>)
 8009f5e:	429d      	cmp	r5, r3
 8009f60:	bf08      	it	eq
 8009f62:	68f5      	ldreq	r5, [r6, #12]
 8009f64:	e7da      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	0598      	lsls	r0, r3, #22
 8009f6a:	d4ed      	bmi.n	8009f48 <_vfiprintf_r+0x4c>
 8009f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f6e:	f000 fb72 	bl	800a656 <__retarget_lock_release_recursive>
 8009f72:	e7e9      	b.n	8009f48 <_vfiprintf_r+0x4c>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f7e:	2330      	movs	r3, #48	; 0x30
 8009f80:	f04f 0901 	mov.w	r9, #1
 8009f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a148 <_vfiprintf_r+0x24c>
 8009f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f90:	4623      	mov	r3, r4
 8009f92:	469a      	mov	sl, r3
 8009f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f98:	b10a      	cbz	r2, 8009f9e <_vfiprintf_r+0xa2>
 8009f9a:	2a25      	cmp	r2, #37	; 0x25
 8009f9c:	d1f9      	bne.n	8009f92 <_vfiprintf_r+0x96>
 8009f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa2:	d00b      	beq.n	8009fbc <_vfiprintf_r+0xc0>
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff94 	bl	8009ed8 <__sfputs_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	f000 80aa 	beq.w	800a10a <_vfiprintf_r+0x20e>
 8009fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fb8:	445a      	add	r2, fp
 8009fba:	9209      	str	r2, [sp, #36]	; 0x24
 8009fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80a2 	beq.w	800a10a <_vfiprintf_r+0x20e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd0:	f10a 0a01 	add.w	sl, sl, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	9307      	str	r3, [sp, #28]
 8009fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8009fde:	4654      	mov	r4, sl
 8009fe0:	2205      	movs	r2, #5
 8009fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe6:	4858      	ldr	r0, [pc, #352]	; (800a148 <_vfiprintf_r+0x24c>)
 8009fe8:	f7fe ff84 	bl	8008ef4 <memchr>
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	b9d8      	cbnz	r0, 800a028 <_vfiprintf_r+0x12c>
 8009ff0:	06d1      	lsls	r1, r2, #27
 8009ff2:	bf44      	itt	mi
 8009ff4:	2320      	movmi	r3, #32
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ffa:	0713      	lsls	r3, r2, #28
 8009ffc:	bf44      	itt	mi
 8009ffe:	232b      	movmi	r3, #43	; 0x2b
 800a000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a004:	f89a 3000 	ldrb.w	r3, [sl]
 800a008:	2b2a      	cmp	r3, #42	; 0x2a
 800a00a:	d015      	beq.n	800a038 <_vfiprintf_r+0x13c>
 800a00c:	4654      	mov	r4, sl
 800a00e:	2000      	movs	r0, #0
 800a010:	f04f 0c0a 	mov.w	ip, #10
 800a014:	9a07      	ldr	r2, [sp, #28]
 800a016:	4621      	mov	r1, r4
 800a018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a01c:	3b30      	subs	r3, #48	; 0x30
 800a01e:	2b09      	cmp	r3, #9
 800a020:	d94e      	bls.n	800a0c0 <_vfiprintf_r+0x1c4>
 800a022:	b1b0      	cbz	r0, 800a052 <_vfiprintf_r+0x156>
 800a024:	9207      	str	r2, [sp, #28]
 800a026:	e014      	b.n	800a052 <_vfiprintf_r+0x156>
 800a028:	eba0 0308 	sub.w	r3, r0, r8
 800a02c:	fa09 f303 	lsl.w	r3, r9, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	46a2      	mov	sl, r4
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	e7d2      	b.n	8009fde <_vfiprintf_r+0xe2>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	1d19      	adds	r1, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9103      	str	r1, [sp, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfbb      	ittet	lt
 800a044:	425b      	neglt	r3, r3
 800a046:	f042 0202 	orrlt.w	r2, r2, #2
 800a04a:	9307      	strge	r3, [sp, #28]
 800a04c:	9307      	strlt	r3, [sp, #28]
 800a04e:	bfb8      	it	lt
 800a050:	9204      	strlt	r2, [sp, #16]
 800a052:	7823      	ldrb	r3, [r4, #0]
 800a054:	2b2e      	cmp	r3, #46	; 0x2e
 800a056:	d10c      	bne.n	800a072 <_vfiprintf_r+0x176>
 800a058:	7863      	ldrb	r3, [r4, #1]
 800a05a:	2b2a      	cmp	r3, #42	; 0x2a
 800a05c:	d135      	bne.n	800a0ca <_vfiprintf_r+0x1ce>
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	3402      	adds	r4, #2
 800a062:	1d1a      	adds	r2, r3, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	9203      	str	r2, [sp, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfb8      	it	lt
 800a06c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a14c <_vfiprintf_r+0x250>
 800a076:	2203      	movs	r2, #3
 800a078:	4650      	mov	r0, sl
 800a07a:	7821      	ldrb	r1, [r4, #0]
 800a07c:	f7fe ff3a 	bl	8008ef4 <memchr>
 800a080:	b140      	cbz	r0, 800a094 <_vfiprintf_r+0x198>
 800a082:	2340      	movs	r3, #64	; 0x40
 800a084:	eba0 000a 	sub.w	r0, r0, sl
 800a088:	fa03 f000 	lsl.w	r0, r3, r0
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	3401      	adds	r4, #1
 800a090:	4303      	orrs	r3, r0
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a098:	2206      	movs	r2, #6
 800a09a:	482d      	ldr	r0, [pc, #180]	; (800a150 <_vfiprintf_r+0x254>)
 800a09c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0a0:	f7fe ff28 	bl	8008ef4 <memchr>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d03f      	beq.n	800a128 <_vfiprintf_r+0x22c>
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	; (800a154 <_vfiprintf_r+0x258>)
 800a0aa:	bb1b      	cbnz	r3, 800a0f4 <_vfiprintf_r+0x1f8>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ba:	443b      	add	r3, r7
 800a0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0be:	e767      	b.n	8009f90 <_vfiprintf_r+0x94>
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0c8:	e7a5      	b.n	800a016 <_vfiprintf_r+0x11a>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f04f 0c0a 	mov.w	ip, #10
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	3401      	adds	r4, #1
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0dc:	3a30      	subs	r2, #48	; 0x30
 800a0de:	2a09      	cmp	r2, #9
 800a0e0:	d903      	bls.n	800a0ea <_vfiprintf_r+0x1ee>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0c5      	beq.n	800a072 <_vfiprintf_r+0x176>
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	e7c3      	b.n	800a072 <_vfiprintf_r+0x176>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f2:	e7f0      	b.n	800a0d6 <_vfiprintf_r+0x1da>
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4b16      	ldr	r3, [pc, #88]	; (800a158 <_vfiprintf_r+0x25c>)
 800a0fe:	a904      	add	r1, sp, #16
 800a100:	f7fc f876 	bl	80061f0 <_printf_float>
 800a104:	4607      	mov	r7, r0
 800a106:	1c78      	adds	r0, r7, #1
 800a108:	d1d6      	bne.n	800a0b8 <_vfiprintf_r+0x1bc>
 800a10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10c:	07d9      	lsls	r1, r3, #31
 800a10e:	d405      	bmi.n	800a11c <_vfiprintf_r+0x220>
 800a110:	89ab      	ldrh	r3, [r5, #12]
 800a112:	059a      	lsls	r2, r3, #22
 800a114:	d402      	bmi.n	800a11c <_vfiprintf_r+0x220>
 800a116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a118:	f000 fa9d 	bl	800a656 <__retarget_lock_release_recursive>
 800a11c:	89ab      	ldrh	r3, [r5, #12]
 800a11e:	065b      	lsls	r3, r3, #25
 800a120:	f53f af12 	bmi.w	8009f48 <_vfiprintf_r+0x4c>
 800a124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a126:	e711      	b.n	8009f4c <_vfiprintf_r+0x50>
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	462a      	mov	r2, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	4b09      	ldr	r3, [pc, #36]	; (800a158 <_vfiprintf_r+0x25c>)
 800a132:	a904      	add	r1, sp, #16
 800a134:	f7fc faf8 	bl	8006728 <_printf_i>
 800a138:	e7e4      	b.n	800a104 <_vfiprintf_r+0x208>
 800a13a:	bf00      	nop
 800a13c:	0800adf4 	.word	0x0800adf4
 800a140:	0800ae14 	.word	0x0800ae14
 800a144:	0800add4 	.word	0x0800add4
 800a148:	0800ad84 	.word	0x0800ad84
 800a14c:	0800ad8a 	.word	0x0800ad8a
 800a150:	0800ad8e 	.word	0x0800ad8e
 800a154:	080061f1 	.word	0x080061f1
 800a158:	08009ed9 	.word	0x08009ed9

0800a15c <__swbuf_r>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	460e      	mov	r6, r1
 800a160:	4614      	mov	r4, r2
 800a162:	4605      	mov	r5, r0
 800a164:	b118      	cbz	r0, 800a16e <__swbuf_r+0x12>
 800a166:	6983      	ldr	r3, [r0, #24]
 800a168:	b90b      	cbnz	r3, 800a16e <__swbuf_r+0x12>
 800a16a:	f000 f9d5 	bl	800a518 <__sinit>
 800a16e:	4b21      	ldr	r3, [pc, #132]	; (800a1f4 <__swbuf_r+0x98>)
 800a170:	429c      	cmp	r4, r3
 800a172:	d12b      	bne.n	800a1cc <__swbuf_r+0x70>
 800a174:	686c      	ldr	r4, [r5, #4]
 800a176:	69a3      	ldr	r3, [r4, #24]
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	071a      	lsls	r2, r3, #28
 800a17e:	d52f      	bpl.n	800a1e0 <__swbuf_r+0x84>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	b36b      	cbz	r3, 800a1e0 <__swbuf_r+0x84>
 800a184:	6923      	ldr	r3, [r4, #16]
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	b2f6      	uxtb	r6, r6
 800a18a:	1ac0      	subs	r0, r0, r3
 800a18c:	6963      	ldr	r3, [r4, #20]
 800a18e:	4637      	mov	r7, r6
 800a190:	4283      	cmp	r3, r0
 800a192:	dc04      	bgt.n	800a19e <__swbuf_r+0x42>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f92a 	bl	800a3f0 <_fflush_r>
 800a19c:	bb30      	cbnz	r0, 800a1ec <__swbuf_r+0x90>
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	701e      	strb	r6, [r3, #0]
 800a1ae:	6963      	ldr	r3, [r4, #20]
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	d004      	beq.n	800a1be <__swbuf_r+0x62>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	07db      	lsls	r3, r3, #31
 800a1b8:	d506      	bpl.n	800a1c8 <__swbuf_r+0x6c>
 800a1ba:	2e0a      	cmp	r6, #10
 800a1bc:	d104      	bne.n	800a1c8 <__swbuf_r+0x6c>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 f915 	bl	800a3f0 <_fflush_r>
 800a1c6:	b988      	cbnz	r0, 800a1ec <__swbuf_r+0x90>
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <__swbuf_r+0x9c>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <__swbuf_r+0x7a>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7cf      	b.n	800a176 <__swbuf_r+0x1a>
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <__swbuf_r+0xa0>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7ca      	b.n	800a176 <__swbuf_r+0x1a>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f000 f80c 	bl	800a200 <__swsetup_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d0cb      	beq.n	800a184 <__swbuf_r+0x28>
 800a1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a1f0:	e7ea      	b.n	800a1c8 <__swbuf_r+0x6c>
 800a1f2:	bf00      	nop
 800a1f4:	0800adf4 	.word	0x0800adf4
 800a1f8:	0800ae14 	.word	0x0800ae14
 800a1fc:	0800add4 	.word	0x0800add4

0800a200 <__swsetup_r>:
 800a200:	4b32      	ldr	r3, [pc, #200]	; (800a2cc <__swsetup_r+0xcc>)
 800a202:	b570      	push	{r4, r5, r6, lr}
 800a204:	681d      	ldr	r5, [r3, #0]
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	b125      	cbz	r5, 800a216 <__swsetup_r+0x16>
 800a20c:	69ab      	ldr	r3, [r5, #24]
 800a20e:	b913      	cbnz	r3, 800a216 <__swsetup_r+0x16>
 800a210:	4628      	mov	r0, r5
 800a212:	f000 f981 	bl	800a518 <__sinit>
 800a216:	4b2e      	ldr	r3, [pc, #184]	; (800a2d0 <__swsetup_r+0xd0>)
 800a218:	429c      	cmp	r4, r3
 800a21a:	d10f      	bne.n	800a23c <__swsetup_r+0x3c>
 800a21c:	686c      	ldr	r4, [r5, #4]
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a224:	0719      	lsls	r1, r3, #28
 800a226:	d42c      	bmi.n	800a282 <__swsetup_r+0x82>
 800a228:	06dd      	lsls	r5, r3, #27
 800a22a:	d411      	bmi.n	800a250 <__swsetup_r+0x50>
 800a22c:	2309      	movs	r3, #9
 800a22e:	6033      	str	r3, [r6, #0]
 800a230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	e03e      	b.n	800a2ba <__swsetup_r+0xba>
 800a23c:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <__swsetup_r+0xd4>)
 800a23e:	429c      	cmp	r4, r3
 800a240:	d101      	bne.n	800a246 <__swsetup_r+0x46>
 800a242:	68ac      	ldr	r4, [r5, #8]
 800a244:	e7eb      	b.n	800a21e <__swsetup_r+0x1e>
 800a246:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <__swsetup_r+0xd8>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	bf08      	it	eq
 800a24c:	68ec      	ldreq	r4, [r5, #12]
 800a24e:	e7e6      	b.n	800a21e <__swsetup_r+0x1e>
 800a250:	0758      	lsls	r0, r3, #29
 800a252:	d512      	bpl.n	800a27a <__swsetup_r+0x7a>
 800a254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a256:	b141      	cbz	r1, 800a26a <__swsetup_r+0x6a>
 800a258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <__swsetup_r+0x66>
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff fb2f 	bl	80098c4 <_free_r>
 800a266:	2300      	movs	r3, #0
 800a268:	6363      	str	r3, [r4, #52]	; 0x34
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	6063      	str	r3, [r4, #4]
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f043 0308 	orr.w	r3, r3, #8
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	b94b      	cbnz	r3, 800a29a <__swsetup_r+0x9a>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a290:	d003      	beq.n	800a29a <__swsetup_r+0x9a>
 800a292:	4621      	mov	r1, r4
 800a294:	4630      	mov	r0, r6
 800a296:	f000 fa05 	bl	800a6a4 <__smakebuf_r>
 800a29a:	89a0      	ldrh	r0, [r4, #12]
 800a29c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a0:	f010 0301 	ands.w	r3, r0, #1
 800a2a4:	d00a      	beq.n	800a2bc <__swsetup_r+0xbc>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60a3      	str	r3, [r4, #8]
 800a2aa:	6963      	ldr	r3, [r4, #20]
 800a2ac:	425b      	negs	r3, r3
 800a2ae:	61a3      	str	r3, [r4, #24]
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	b943      	cbnz	r3, 800a2c6 <__swsetup_r+0xc6>
 800a2b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2b8:	d1ba      	bne.n	800a230 <__swsetup_r+0x30>
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	0781      	lsls	r1, r0, #30
 800a2be:	bf58      	it	pl
 800a2c0:	6963      	ldrpl	r3, [r4, #20]
 800a2c2:	60a3      	str	r3, [r4, #8]
 800a2c4:	e7f4      	b.n	800a2b0 <__swsetup_r+0xb0>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	e7f7      	b.n	800a2ba <__swsetup_r+0xba>
 800a2ca:	bf00      	nop
 800a2cc:	2000000c 	.word	0x2000000c
 800a2d0:	0800adf4 	.word	0x0800adf4
 800a2d4:	0800ae14 	.word	0x0800ae14
 800a2d8:	0800add4 	.word	0x0800add4

0800a2dc <abort>:
 800a2dc:	2006      	movs	r0, #6
 800a2de:	b508      	push	{r3, lr}
 800a2e0:	f000 fa50 	bl	800a784 <raise>
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	f7f7 fabc 	bl	8001862 <_exit>
	...

0800a2ec <__sflush_r>:
 800a2ec:	898a      	ldrh	r2, [r1, #12]
 800a2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	0710      	lsls	r0, r2, #28
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	d457      	bmi.n	800a3a8 <__sflush_r+0xbc>
 800a2f8:	684b      	ldr	r3, [r1, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	dc04      	bgt.n	800a308 <__sflush_r+0x1c>
 800a2fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	dc01      	bgt.n	800a308 <__sflush_r+0x1c>
 800a304:	2000      	movs	r0, #0
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a30a:	2e00      	cmp	r6, #0
 800a30c:	d0fa      	beq.n	800a304 <__sflush_r+0x18>
 800a30e:	2300      	movs	r3, #0
 800a310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a314:	682f      	ldr	r7, [r5, #0]
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	d032      	beq.n	800a380 <__sflush_r+0x94>
 800a31a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	075a      	lsls	r2, r3, #29
 800a320:	d505      	bpl.n	800a32e <__sflush_r+0x42>
 800a322:	6863      	ldr	r3, [r4, #4]
 800a324:	1ac0      	subs	r0, r0, r3
 800a326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a328:	b10b      	cbz	r3, 800a32e <__sflush_r+0x42>
 800a32a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a32c:	1ac0      	subs	r0, r0, r3
 800a32e:	2300      	movs	r3, #0
 800a330:	4602      	mov	r2, r0
 800a332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a334:	4628      	mov	r0, r5
 800a336:	6a21      	ldr	r1, [r4, #32]
 800a338:	47b0      	blx	r6
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	d106      	bne.n	800a34e <__sflush_r+0x62>
 800a340:	6829      	ldr	r1, [r5, #0]
 800a342:	291d      	cmp	r1, #29
 800a344:	d82c      	bhi.n	800a3a0 <__sflush_r+0xb4>
 800a346:	4a29      	ldr	r2, [pc, #164]	; (800a3ec <__sflush_r+0x100>)
 800a348:	40ca      	lsrs	r2, r1
 800a34a:	07d6      	lsls	r6, r2, #31
 800a34c:	d528      	bpl.n	800a3a0 <__sflush_r+0xb4>
 800a34e:	2200      	movs	r2, #0
 800a350:	6062      	str	r2, [r4, #4]
 800a352:	6922      	ldr	r2, [r4, #16]
 800a354:	04d9      	lsls	r1, r3, #19
 800a356:	6022      	str	r2, [r4, #0]
 800a358:	d504      	bpl.n	800a364 <__sflush_r+0x78>
 800a35a:	1c42      	adds	r2, r0, #1
 800a35c:	d101      	bne.n	800a362 <__sflush_r+0x76>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	b903      	cbnz	r3, 800a364 <__sflush_r+0x78>
 800a362:	6560      	str	r0, [r4, #84]	; 0x54
 800a364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a366:	602f      	str	r7, [r5, #0]
 800a368:	2900      	cmp	r1, #0
 800a36a:	d0cb      	beq.n	800a304 <__sflush_r+0x18>
 800a36c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a370:	4299      	cmp	r1, r3
 800a372:	d002      	beq.n	800a37a <__sflush_r+0x8e>
 800a374:	4628      	mov	r0, r5
 800a376:	f7ff faa5 	bl	80098c4 <_free_r>
 800a37a:	2000      	movs	r0, #0
 800a37c:	6360      	str	r0, [r4, #52]	; 0x34
 800a37e:	e7c2      	b.n	800a306 <__sflush_r+0x1a>
 800a380:	6a21      	ldr	r1, [r4, #32]
 800a382:	2301      	movs	r3, #1
 800a384:	4628      	mov	r0, r5
 800a386:	47b0      	blx	r6
 800a388:	1c41      	adds	r1, r0, #1
 800a38a:	d1c7      	bne.n	800a31c <__sflush_r+0x30>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0c4      	beq.n	800a31c <__sflush_r+0x30>
 800a392:	2b1d      	cmp	r3, #29
 800a394:	d001      	beq.n	800a39a <__sflush_r+0xae>
 800a396:	2b16      	cmp	r3, #22
 800a398:	d101      	bne.n	800a39e <__sflush_r+0xb2>
 800a39a:	602f      	str	r7, [r5, #0]
 800a39c:	e7b2      	b.n	800a304 <__sflush_r+0x18>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a4:	81a3      	strh	r3, [r4, #12]
 800a3a6:	e7ae      	b.n	800a306 <__sflush_r+0x1a>
 800a3a8:	690f      	ldr	r7, [r1, #16]
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d0aa      	beq.n	800a304 <__sflush_r+0x18>
 800a3ae:	0793      	lsls	r3, r2, #30
 800a3b0:	bf18      	it	ne
 800a3b2:	2300      	movne	r3, #0
 800a3b4:	680e      	ldr	r6, [r1, #0]
 800a3b6:	bf08      	it	eq
 800a3b8:	694b      	ldreq	r3, [r1, #20]
 800a3ba:	1bf6      	subs	r6, r6, r7
 800a3bc:	600f      	str	r7, [r1, #0]
 800a3be:	608b      	str	r3, [r1, #8]
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	dd9f      	ble.n	800a304 <__sflush_r+0x18>
 800a3c4:	4633      	mov	r3, r6
 800a3c6:	463a      	mov	r2, r7
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	6a21      	ldr	r1, [r4, #32]
 800a3cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a3d0:	47e0      	blx	ip
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	dc06      	bgt.n	800a3e4 <__sflush_r+0xf8>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	e790      	b.n	800a306 <__sflush_r+0x1a>
 800a3e4:	4407      	add	r7, r0
 800a3e6:	1a36      	subs	r6, r6, r0
 800a3e8:	e7ea      	b.n	800a3c0 <__sflush_r+0xd4>
 800a3ea:	bf00      	nop
 800a3ec:	20400001 	.word	0x20400001

0800a3f0 <_fflush_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	690b      	ldr	r3, [r1, #16]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	b913      	cbnz	r3, 800a400 <_fflush_r+0x10>
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	b118      	cbz	r0, 800a40a <_fflush_r+0x1a>
 800a402:	6983      	ldr	r3, [r0, #24]
 800a404:	b90b      	cbnz	r3, 800a40a <_fflush_r+0x1a>
 800a406:	f000 f887 	bl	800a518 <__sinit>
 800a40a:	4b14      	ldr	r3, [pc, #80]	; (800a45c <_fflush_r+0x6c>)
 800a40c:	429c      	cmp	r4, r3
 800a40e:	d11b      	bne.n	800a448 <_fflush_r+0x58>
 800a410:	686c      	ldr	r4, [r5, #4]
 800a412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0ef      	beq.n	800a3fa <_fflush_r+0xa>
 800a41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a41c:	07d0      	lsls	r0, r2, #31
 800a41e:	d404      	bmi.n	800a42a <_fflush_r+0x3a>
 800a420:	0599      	lsls	r1, r3, #22
 800a422:	d402      	bmi.n	800a42a <_fflush_r+0x3a>
 800a424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a426:	f000 f915 	bl	800a654 <__retarget_lock_acquire_recursive>
 800a42a:	4628      	mov	r0, r5
 800a42c:	4621      	mov	r1, r4
 800a42e:	f7ff ff5d 	bl	800a2ec <__sflush_r>
 800a432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a434:	4605      	mov	r5, r0
 800a436:	07da      	lsls	r2, r3, #31
 800a438:	d4e0      	bmi.n	800a3fc <_fflush_r+0xc>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	059b      	lsls	r3, r3, #22
 800a43e:	d4dd      	bmi.n	800a3fc <_fflush_r+0xc>
 800a440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a442:	f000 f908 	bl	800a656 <__retarget_lock_release_recursive>
 800a446:	e7d9      	b.n	800a3fc <_fflush_r+0xc>
 800a448:	4b05      	ldr	r3, [pc, #20]	; (800a460 <_fflush_r+0x70>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d101      	bne.n	800a452 <_fflush_r+0x62>
 800a44e:	68ac      	ldr	r4, [r5, #8]
 800a450:	e7df      	b.n	800a412 <_fflush_r+0x22>
 800a452:	4b04      	ldr	r3, [pc, #16]	; (800a464 <_fflush_r+0x74>)
 800a454:	429c      	cmp	r4, r3
 800a456:	bf08      	it	eq
 800a458:	68ec      	ldreq	r4, [r5, #12]
 800a45a:	e7da      	b.n	800a412 <_fflush_r+0x22>
 800a45c:	0800adf4 	.word	0x0800adf4
 800a460:	0800ae14 	.word	0x0800ae14
 800a464:	0800add4 	.word	0x0800add4

0800a468 <std>:
 800a468:	2300      	movs	r3, #0
 800a46a:	b510      	push	{r4, lr}
 800a46c:	4604      	mov	r4, r0
 800a46e:	e9c0 3300 	strd	r3, r3, [r0]
 800a472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a476:	6083      	str	r3, [r0, #8]
 800a478:	8181      	strh	r1, [r0, #12]
 800a47a:	6643      	str	r3, [r0, #100]	; 0x64
 800a47c:	81c2      	strh	r2, [r0, #14]
 800a47e:	6183      	str	r3, [r0, #24]
 800a480:	4619      	mov	r1, r3
 800a482:	2208      	movs	r2, #8
 800a484:	305c      	adds	r0, #92	; 0x5c
 800a486:	f7fb fe0d 	bl	80060a4 <memset>
 800a48a:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <std+0x38>)
 800a48c:	6224      	str	r4, [r4, #32]
 800a48e:	6263      	str	r3, [r4, #36]	; 0x24
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <std+0x3c>)
 800a492:	62a3      	str	r3, [r4, #40]	; 0x28
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <std+0x40>)
 800a496:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <std+0x44>)
 800a49a:	6323      	str	r3, [r4, #48]	; 0x30
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800a7bd 	.word	0x0800a7bd
 800a4a4:	0800a7df 	.word	0x0800a7df
 800a4a8:	0800a817 	.word	0x0800a817
 800a4ac:	0800a83b 	.word	0x0800a83b

0800a4b0 <_cleanup_r>:
 800a4b0:	4901      	ldr	r1, [pc, #4]	; (800a4b8 <_cleanup_r+0x8>)
 800a4b2:	f000 b8af 	b.w	800a614 <_fwalk_reent>
 800a4b6:	bf00      	nop
 800a4b8:	0800a3f1 	.word	0x0800a3f1

0800a4bc <__sfmoreglue>:
 800a4bc:	2268      	movs	r2, #104	; 0x68
 800a4be:	b570      	push	{r4, r5, r6, lr}
 800a4c0:	1e4d      	subs	r5, r1, #1
 800a4c2:	4355      	muls	r5, r2
 800a4c4:	460e      	mov	r6, r1
 800a4c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4ca:	f7ff fa63 	bl	8009994 <_malloc_r>
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	b140      	cbz	r0, 800a4e4 <__sfmoreglue+0x28>
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4d8:	300c      	adds	r0, #12
 800a4da:	60a0      	str	r0, [r4, #8]
 800a4dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4e0:	f7fb fde0 	bl	80060a4 <memset>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <__sfp_lock_acquire>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <__sfp_lock_acquire+0x8>)
 800a4ea:	f000 b8b3 	b.w	800a654 <__retarget_lock_acquire_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	20000391 	.word	0x20000391

0800a4f4 <__sfp_lock_release>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__sfp_lock_release+0x8>)
 800a4f6:	f000 b8ae 	b.w	800a656 <__retarget_lock_release_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	20000391 	.word	0x20000391

0800a500 <__sinit_lock_acquire>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__sinit_lock_acquire+0x8>)
 800a502:	f000 b8a7 	b.w	800a654 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	20000392 	.word	0x20000392

0800a50c <__sinit_lock_release>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sinit_lock_release+0x8>)
 800a50e:	f000 b8a2 	b.w	800a656 <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	20000392 	.word	0x20000392

0800a518 <__sinit>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	4604      	mov	r4, r0
 800a51c:	f7ff fff0 	bl	800a500 <__sinit_lock_acquire>
 800a520:	69a3      	ldr	r3, [r4, #24]
 800a522:	b11b      	cbz	r3, 800a52c <__sinit+0x14>
 800a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a528:	f7ff bff0 	b.w	800a50c <__sinit_lock_release>
 800a52c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a530:	6523      	str	r3, [r4, #80]	; 0x50
 800a532:	4b13      	ldr	r3, [pc, #76]	; (800a580 <__sinit+0x68>)
 800a534:	4a13      	ldr	r2, [pc, #76]	; (800a584 <__sinit+0x6c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	62a2      	str	r2, [r4, #40]	; 0x28
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	bf08      	it	eq
 800a53e:	2301      	moveq	r3, #1
 800a540:	4620      	mov	r0, r4
 800a542:	bf08      	it	eq
 800a544:	61a3      	streq	r3, [r4, #24]
 800a546:	f000 f81f 	bl	800a588 <__sfp>
 800a54a:	6060      	str	r0, [r4, #4]
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 f81b 	bl	800a588 <__sfp>
 800a552:	60a0      	str	r0, [r4, #8]
 800a554:	4620      	mov	r0, r4
 800a556:	f000 f817 	bl	800a588 <__sfp>
 800a55a:	2200      	movs	r2, #0
 800a55c:	2104      	movs	r1, #4
 800a55e:	60e0      	str	r0, [r4, #12]
 800a560:	6860      	ldr	r0, [r4, #4]
 800a562:	f7ff ff81 	bl	800a468 <std>
 800a566:	2201      	movs	r2, #1
 800a568:	2109      	movs	r1, #9
 800a56a:	68a0      	ldr	r0, [r4, #8]
 800a56c:	f7ff ff7c 	bl	800a468 <std>
 800a570:	2202      	movs	r2, #2
 800a572:	2112      	movs	r1, #18
 800a574:	68e0      	ldr	r0, [r4, #12]
 800a576:	f7ff ff77 	bl	800a468 <std>
 800a57a:	2301      	movs	r3, #1
 800a57c:	61a3      	str	r3, [r4, #24]
 800a57e:	e7d1      	b.n	800a524 <__sinit+0xc>
 800a580:	0800a990 	.word	0x0800a990
 800a584:	0800a4b1 	.word	0x0800a4b1

0800a588 <__sfp>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	4607      	mov	r7, r0
 800a58c:	f7ff ffac 	bl	800a4e8 <__sfp_lock_acquire>
 800a590:	4b1e      	ldr	r3, [pc, #120]	; (800a60c <__sfp+0x84>)
 800a592:	681e      	ldr	r6, [r3, #0]
 800a594:	69b3      	ldr	r3, [r6, #24]
 800a596:	b913      	cbnz	r3, 800a59e <__sfp+0x16>
 800a598:	4630      	mov	r0, r6
 800a59a:	f7ff ffbd 	bl	800a518 <__sinit>
 800a59e:	3648      	adds	r6, #72	; 0x48
 800a5a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	d503      	bpl.n	800a5b0 <__sfp+0x28>
 800a5a8:	6833      	ldr	r3, [r6, #0]
 800a5aa:	b30b      	cbz	r3, 800a5f0 <__sfp+0x68>
 800a5ac:	6836      	ldr	r6, [r6, #0]
 800a5ae:	e7f7      	b.n	800a5a0 <__sfp+0x18>
 800a5b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5b4:	b9d5      	cbnz	r5, 800a5ec <__sfp+0x64>
 800a5b6:	4b16      	ldr	r3, [pc, #88]	; (800a610 <__sfp+0x88>)
 800a5b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5bc:	60e3      	str	r3, [r4, #12]
 800a5be:	6665      	str	r5, [r4, #100]	; 0x64
 800a5c0:	f000 f847 	bl	800a652 <__retarget_lock_init_recursive>
 800a5c4:	f7ff ff96 	bl	800a4f4 <__sfp_lock_release>
 800a5c8:	2208      	movs	r2, #8
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5d4:	6025      	str	r5, [r4, #0]
 800a5d6:	61a5      	str	r5, [r4, #24]
 800a5d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5dc:	f7fb fd62 	bl	80060a4 <memset>
 800a5e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ec:	3468      	adds	r4, #104	; 0x68
 800a5ee:	e7d9      	b.n	800a5a4 <__sfp+0x1c>
 800a5f0:	2104      	movs	r1, #4
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f7ff ff62 	bl	800a4bc <__sfmoreglue>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	6030      	str	r0, [r6, #0]
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d1d5      	bne.n	800a5ac <__sfp+0x24>
 800a600:	f7ff ff78 	bl	800a4f4 <__sfp_lock_release>
 800a604:	230c      	movs	r3, #12
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	e7ee      	b.n	800a5e8 <__sfp+0x60>
 800a60a:	bf00      	nop
 800a60c:	0800a990 	.word	0x0800a990
 800a610:	ffff0001 	.word	0xffff0001

0800a614 <_fwalk_reent>:
 800a614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a618:	4606      	mov	r6, r0
 800a61a:	4688      	mov	r8, r1
 800a61c:	2700      	movs	r7, #0
 800a61e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a626:	f1b9 0901 	subs.w	r9, r9, #1
 800a62a:	d505      	bpl.n	800a638 <_fwalk_reent+0x24>
 800a62c:	6824      	ldr	r4, [r4, #0]
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d1f7      	bne.n	800a622 <_fwalk_reent+0xe>
 800a632:	4638      	mov	r0, r7
 800a634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a638:	89ab      	ldrh	r3, [r5, #12]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d907      	bls.n	800a64e <_fwalk_reent+0x3a>
 800a63e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a642:	3301      	adds	r3, #1
 800a644:	d003      	beq.n	800a64e <_fwalk_reent+0x3a>
 800a646:	4629      	mov	r1, r5
 800a648:	4630      	mov	r0, r6
 800a64a:	47c0      	blx	r8
 800a64c:	4307      	orrs	r7, r0
 800a64e:	3568      	adds	r5, #104	; 0x68
 800a650:	e7e9      	b.n	800a626 <_fwalk_reent+0x12>

0800a652 <__retarget_lock_init_recursive>:
 800a652:	4770      	bx	lr

0800a654 <__retarget_lock_acquire_recursive>:
 800a654:	4770      	bx	lr

0800a656 <__retarget_lock_release_recursive>:
 800a656:	4770      	bx	lr

0800a658 <__swhatbuf_r>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	460e      	mov	r6, r1
 800a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a660:	4614      	mov	r4, r2
 800a662:	2900      	cmp	r1, #0
 800a664:	461d      	mov	r5, r3
 800a666:	b096      	sub	sp, #88	; 0x58
 800a668:	da08      	bge.n	800a67c <__swhatbuf_r+0x24>
 800a66a:	2200      	movs	r2, #0
 800a66c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	061a      	lsls	r2, r3, #24
 800a674:	d410      	bmi.n	800a698 <__swhatbuf_r+0x40>
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	e00e      	b.n	800a69a <__swhatbuf_r+0x42>
 800a67c:	466a      	mov	r2, sp
 800a67e:	f000 f903 	bl	800a888 <_fstat_r>
 800a682:	2800      	cmp	r0, #0
 800a684:	dbf1      	blt.n	800a66a <__swhatbuf_r+0x12>
 800a686:	9a01      	ldr	r2, [sp, #4]
 800a688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a68c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a690:	425a      	negs	r2, r3
 800a692:	415a      	adcs	r2, r3
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	e7ee      	b.n	800a676 <__swhatbuf_r+0x1e>
 800a698:	2340      	movs	r3, #64	; 0x40
 800a69a:	2000      	movs	r0, #0
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	b016      	add	sp, #88	; 0x58
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6a4 <__smakebuf_r>:
 800a6a4:	898b      	ldrh	r3, [r1, #12]
 800a6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6a8:	079d      	lsls	r5, r3, #30
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	d507      	bpl.n	800a6c0 <__smakebuf_r+0x1c>
 800a6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	6163      	str	r3, [r4, #20]
 800a6bc:	b002      	add	sp, #8
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	466a      	mov	r2, sp
 800a6c2:	ab01      	add	r3, sp, #4
 800a6c4:	f7ff ffc8 	bl	800a658 <__swhatbuf_r>
 800a6c8:	9900      	ldr	r1, [sp, #0]
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7ff f961 	bl	8009994 <_malloc_r>
 800a6d2:	b948      	cbnz	r0, 800a6e8 <__smakebuf_r+0x44>
 800a6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d8:	059a      	lsls	r2, r3, #22
 800a6da:	d4ef      	bmi.n	800a6bc <__smakebuf_r+0x18>
 800a6dc:	f023 0303 	bic.w	r3, r3, #3
 800a6e0:	f043 0302 	orr.w	r3, r3, #2
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	e7e3      	b.n	800a6b0 <__smakebuf_r+0xc>
 800a6e8:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <__smakebuf_r+0x7c>)
 800a6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	6020      	str	r0, [r4, #0]
 800a6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	6120      	str	r0, [r4, #16]
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	9b01      	ldr	r3, [sp, #4]
 800a6fe:	b15b      	cbz	r3, 800a718 <__smakebuf_r+0x74>
 800a700:	4630      	mov	r0, r6
 800a702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a706:	f000 f8d1 	bl	800a8ac <_isatty_r>
 800a70a:	b128      	cbz	r0, 800a718 <__smakebuf_r+0x74>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	f043 0301 	orr.w	r3, r3, #1
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	89a0      	ldrh	r0, [r4, #12]
 800a71a:	4305      	orrs	r5, r0
 800a71c:	81a5      	strh	r5, [r4, #12]
 800a71e:	e7cd      	b.n	800a6bc <__smakebuf_r+0x18>
 800a720:	0800a4b1 	.word	0x0800a4b1

0800a724 <_malloc_usable_size_r>:
 800a724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a728:	1f18      	subs	r0, r3, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfbc      	itt	lt
 800a72e:	580b      	ldrlt	r3, [r1, r0]
 800a730:	18c0      	addlt	r0, r0, r3
 800a732:	4770      	bx	lr

0800a734 <_raise_r>:
 800a734:	291f      	cmp	r1, #31
 800a736:	b538      	push	{r3, r4, r5, lr}
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	d904      	bls.n	800a748 <_raise_r+0x14>
 800a73e:	2316      	movs	r3, #22
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a74a:	b112      	cbz	r2, 800a752 <_raise_r+0x1e>
 800a74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a750:	b94b      	cbnz	r3, 800a766 <_raise_r+0x32>
 800a752:	4620      	mov	r0, r4
 800a754:	f000 f830 	bl	800a7b8 <_getpid_r>
 800a758:	462a      	mov	r2, r5
 800a75a:	4601      	mov	r1, r0
 800a75c:	4620      	mov	r0, r4
 800a75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a762:	f000 b817 	b.w	800a794 <_kill_r>
 800a766:	2b01      	cmp	r3, #1
 800a768:	d00a      	beq.n	800a780 <_raise_r+0x4c>
 800a76a:	1c59      	adds	r1, r3, #1
 800a76c:	d103      	bne.n	800a776 <_raise_r+0x42>
 800a76e:	2316      	movs	r3, #22
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	2001      	movs	r0, #1
 800a774:	e7e7      	b.n	800a746 <_raise_r+0x12>
 800a776:	2400      	movs	r4, #0
 800a778:	4628      	mov	r0, r5
 800a77a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a77e:	4798      	blx	r3
 800a780:	2000      	movs	r0, #0
 800a782:	e7e0      	b.n	800a746 <_raise_r+0x12>

0800a784 <raise>:
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <raise+0xc>)
 800a786:	4601      	mov	r1, r0
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	f7ff bfd3 	b.w	800a734 <_raise_r>
 800a78e:	bf00      	nop
 800a790:	2000000c 	.word	0x2000000c

0800a794 <_kill_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	2300      	movs	r3, #0
 800a798:	4d06      	ldr	r5, [pc, #24]	; (800a7b4 <_kill_r+0x20>)
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f7f7 f84e 	bl	8001842 <_kill>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d102      	bne.n	800a7b0 <_kill_r+0x1c>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b103      	cbz	r3, 800a7b0 <_kill_r+0x1c>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2000038c 	.word	0x2000038c

0800a7b8 <_getpid_r>:
 800a7b8:	f7f7 b83c 	b.w	8001834 <_getpid>

0800a7bc <__sread>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	f000 f894 	bl	800a8f0 <_read_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	bfab      	itete	ge
 800a7cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a7d0:	181b      	addge	r3, r3, r0
 800a7d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7d6:	bfac      	ite	ge
 800a7d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7da:	81a3      	strhlt	r3, [r4, #12]
 800a7dc:	bd10      	pop	{r4, pc}

0800a7de <__swrite>:
 800a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	05db      	lsls	r3, r3, #23
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	d505      	bpl.n	800a7fc <__swrite+0x1e>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f8:	f000 f868 	bl	800a8cc <_lseek_r>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	4632      	mov	r2, r6
 800a800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	4628      	mov	r0, r5
 800a808:	463b      	mov	r3, r7
 800a80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	f000 b817 	b.w	800a844 <_write_r>

0800a816 <__sseek>:
 800a816:	b510      	push	{r4, lr}
 800a818:	460c      	mov	r4, r1
 800a81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81e:	f000 f855 	bl	800a8cc <_lseek_r>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	bf15      	itete	ne
 800a828:	6560      	strne	r0, [r4, #84]	; 0x54
 800a82a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a82e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a832:	81a3      	strheq	r3, [r4, #12]
 800a834:	bf18      	it	ne
 800a836:	81a3      	strhne	r3, [r4, #12]
 800a838:	bd10      	pop	{r4, pc}

0800a83a <__sclose>:
 800a83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83e:	f000 b813 	b.w	800a868 <_close_r>
	...

0800a844 <_write_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	2200      	movs	r2, #0
 800a84e:	4d05      	ldr	r5, [pc, #20]	; (800a864 <_write_r+0x20>)
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f7 f82c 	bl	80018b0 <_write>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_write_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_write_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	2000038c 	.word	0x2000038c

0800a868 <_close_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	2300      	movs	r3, #0
 800a86c:	4d05      	ldr	r5, [pc, #20]	; (800a884 <_close_r+0x1c>)
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f7 f838 	bl	80018e8 <_close>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_close_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_close_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	2000038c 	.word	0x2000038c

0800a888 <_fstat_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	2300      	movs	r3, #0
 800a88c:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_fstat_r+0x20>)
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	f7f7 f832 	bl	80018fe <_fstat>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d102      	bne.n	800a8a4 <_fstat_r+0x1c>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b103      	cbz	r3, 800a8a4 <_fstat_r+0x1c>
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2000038c 	.word	0x2000038c

0800a8ac <_isatty_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d05      	ldr	r5, [pc, #20]	; (800a8c8 <_isatty_r+0x1c>)
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	f7f7 f830 	bl	800191c <_isatty>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_isatty_r+0x1a>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_isatty_r+0x1a>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	2000038c 	.word	0x2000038c

0800a8cc <_lseek_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4d05      	ldr	r5, [pc, #20]	; (800a8ec <_lseek_r+0x20>)
 800a8d8:	602a      	str	r2, [r5, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f7f7 f828 	bl	8001930 <_lseek>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_lseek_r+0x1e>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_lseek_r+0x1e>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	2000038c 	.word	0x2000038c

0800a8f0 <_read_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4d05      	ldr	r5, [pc, #20]	; (800a910 <_read_r+0x20>)
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f6 ffb9 	bl	8001876 <_read>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_read_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_read_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	2000038c 	.word	0x2000038c

0800a914 <_init>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <_fini>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr
